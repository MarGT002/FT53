Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSAND
    ASTERISK
    AT
    BACKSLASH
    CARET
    COMMA
    DOLLAR
    DOT
    DOUBLE_QUOTE
    EQUALS
    EXCLAMATION
    GRAVE
    GREATER_THAN
    HASH
    HT
    LBRACE
    LBRACKET
    LBRACKET_SPEC
    LESS_THAN
    LPAREN
    MINUS
    NULL_CHAR
    PERCENT
    PLUS
    QUESTION
    RBRACE
    RBRACKET
    RBRACKET_SPEC
    RPAREN
    SEMICOLON
    SINGLE_QUOTE
    SLASH
    SPACE
    TILDE
    UNDERSCORE
    VERTICAL_BAR

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> declaration_statement
Rule 5     statement -> expression_statement
Rule 6     statement -> print_statement
Rule 7     statement -> if_statement
Rule 8     statement -> while_statement
Rule 9     statement -> return_statement
Rule 10    statement -> break_statement
Rule 11    statement -> block_statement
Rule 12    statement -> switch_statement
Rule 13    declaration_statement -> type IDENTIFIER SEMICOLON_SPEC
Rule 14    declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC
Rule 15    type -> ENTERO
Rule 16    type -> FLOTANTE
Rule 17    type -> STRING
Rule 18    type -> CHAR
Rule 19    type -> ARRAY
Rule 20    expression_statement -> expression SEMICOLON_SPEC
Rule 21    expression_statement -> SEMICOLON_SPEC
Rule 22    print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC
Rule 23    if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement
Rule 24    if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement
Rule 25    while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement
Rule 26    return_statement -> RETURN expression SEMICOLON_SPEC
Rule 27    return_statement -> RETURN SEMICOLON_SPEC
Rule 28    break_statement -> BREAK SEMICOLON_SPEC
Rule 29    block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC
Rule 30    block_statement -> LBRACE_SPEC RBRACE_SPEC
Rule 31    switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC
Rule 32    switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC
Rule 33    case_list -> case
Rule 34    case_list -> case_list case
Rule 35    case -> CASE expression COLON statement_list
Rule 36    case -> DEFAULT COLON statement_list
Rule 37    expression -> assignment_expression
Rule 38    expression -> binary_expression
Rule 39    expression -> unary_expression
Rule 40    expression -> primary_expression
Rule 41    assignment_expression -> IDENTIFIER ASSIGN_OP expression
Rule 42    binary_expression -> expression PLUS_OP expression
Rule 43    binary_expression -> expression MINUS_OP expression
Rule 44    binary_expression -> expression MULT_OP expression
Rule 45    binary_expression -> expression DIV_OP expression
Rule 46    binary_expression -> expression EQ_OP expression
Rule 47    binary_expression -> expression NE_OP expression
Rule 48    unary_expression -> PLUS_OP expression
Rule 49    unary_expression -> MINUS_OP expression
Rule 50    primary_expression -> literal
Rule 51    primary_expression -> IDENTIFIER
Rule 52    primary_expression -> LPAREN_SPEC expression RPAREN_SPEC
Rule 53    literal -> numeric_literal
Rule 54    literal -> string_literal
Rule 55    literal -> boolean_literal
Rule 56    literal -> null_literal
Rule 57    numeric_literal -> HEX_0
Rule 58    numeric_literal -> HEX_1
Rule 59    numeric_literal -> HEX_2
Rule 60    numeric_literal -> HEX_3
Rule 61    numeric_literal -> HEX_4
Rule 62    numeric_literal -> HEX_5
Rule 63    numeric_literal -> HEX_6
Rule 64    numeric_literal -> HEX_7
Rule 65    numeric_literal -> HEX_8
Rule 66    numeric_literal -> HEX_9
Rule 67    numeric_literal -> HEX_A
Rule 68    numeric_literal -> HEX_B
Rule 69    numeric_literal -> HEX_C
Rule 70    numeric_literal -> HEX_D
Rule 71    numeric_literal -> HEX_E
Rule 72    numeric_literal -> HEX_F
Rule 73    string_literal -> STRING
Rule 74    boolean_literal -> TRUE
Rule 75    boolean_literal -> FALSE
Rule 76    null_literal -> NULL

Terminals, with rules where they appear

AMPERSAND            : 
ARRAY                : 19
ASSIGN_OP            : 14 41
ASTERISK             : 
AT                   : 
BACKSLASH            : 
BREAK                : 28
CARET                : 
CASE                 : 35
CHAR                 : 18
COLON                : 35 36
COMMA                : 
DEFAULT              : 36
DIV_OP               : 45
DOLLAR               : 
DOT                  : 
DOUBLE_QUOTE         : 
ELSE                 : 24
ENTERO               : 15
EQUALS               : 
EQ_OP                : 46
EXCLAMATION          : 
FALSE                : 75
FLOTANTE             : 16
GRAVE                : 
GREATER_THAN         : 
HASH                 : 
HEX_0                : 57
HEX_1                : 58
HEX_2                : 59
HEX_3                : 60
HEX_4                : 61
HEX_5                : 62
HEX_6                : 63
HEX_7                : 64
HEX_8                : 65
HEX_9                : 66
HEX_A                : 67
HEX_B                : 68
HEX_C                : 69
HEX_D                : 70
HEX_E                : 71
HEX_F                : 72
HT                   : 
IDENTIFIER           : 13 14 41 51
IF                   : 23 24
LBRACE               : 
LBRACE_SPEC          : 29 30 31 32
LBRACKET             : 
LBRACKET_SPEC        : 
LESS_THAN            : 
LPAREN               : 
LPAREN_SPEC          : 22 23 24 25 31 32 52
MINUS                : 
MINUS_OP             : 43 49
MULT_OP              : 44
NE_OP                : 47
NULL                 : 76
NULL_CHAR            : 
PERCENT              : 
PLUS                 : 
PLUS_OP              : 42 48
PRINT                : 22
QUESTION             : 
RBRACE               : 
RBRACE_SPEC          : 29 30 31 32
RBRACKET             : 
RBRACKET_SPEC        : 
RETURN               : 26 27
RPAREN               : 
RPAREN_SPEC          : 22 23 24 25 31 32 52
SEMICOLON            : 
SEMICOLON_SPEC       : 13 14 20 21 22 26 27 28
SINGLE_QUOTE         : 
SLASH                : 
SPACE                : 
STRING               : 17 73
SWITCH               : 31 32
TILDE                : 
TRUE                 : 74
UNDERSCORE           : 
VERTICAL_BAR         : 
WHILE                : 25
error                : 

Nonterminals, with rules where they appear

assignment_expression : 37
binary_expression    : 38
block_statement      : 11
boolean_literal      : 55
break_statement      : 10
case                 : 33 34
case_list            : 31 34
declaration_statement : 4
expression           : 14 20 22 23 24 25 26 31 32 35 41 42 42 43 43 44 44 45 45 46 46 47 47 48 49 52
expression_statement : 5
if_statement         : 7
literal              : 50
null_literal         : 56
numeric_literal      : 53
primary_expression   : 40
print_statement      : 6
program              : 0
return_statement     : 9
statement            : 2 3 23 24 24 25
statement_list       : 1 3 29 35 36
string_literal       : 54
switch_statement     : 12
type                 : 13 14
unary_expression     : 39
while_statement      : 8

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration_statement
    (5) statement -> . expression_statement
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . while_statement
    (9) statement -> . return_statement
    (10) statement -> . break_statement
    (11) statement -> . block_statement
    (12) statement -> . switch_statement
    (13) declaration_statement -> . type IDENTIFIER SEMICOLON_SPEC
    (14) declaration_statement -> . type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC
    (20) expression_statement -> . expression SEMICOLON_SPEC
    (21) expression_statement -> . SEMICOLON_SPEC
    (22) print_statement -> . PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC
    (23) if_statement -> . IF LPAREN_SPEC expression RPAREN_SPEC statement
    (24) if_statement -> . IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement
    (25) while_statement -> . WHILE LPAREN_SPEC expression RPAREN_SPEC statement
    (26) return_statement -> . RETURN expression SEMICOLON_SPEC
    (27) return_statement -> . RETURN SEMICOLON_SPEC
    (28) break_statement -> . BREAK SEMICOLON_SPEC
    (29) block_statement -> . LBRACE_SPEC statement_list RBRACE_SPEC
    (30) block_statement -> . LBRACE_SPEC RBRACE_SPEC
    (31) switch_statement -> . SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC
    (32) switch_statement -> . SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC
    (15) type -> . ENTERO
    (16) type -> . FLOTANTE
    (17) type -> . STRING
    (18) type -> . CHAR
    (19) type -> . ARRAY
    (37) expression -> . assignment_expression
    (38) expression -> . binary_expression
    (39) expression -> . unary_expression
    (40) expression -> . primary_expression
    (41) assignment_expression -> . IDENTIFIER ASSIGN_OP expression
    (42) binary_expression -> . expression PLUS_OP expression
    (43) binary_expression -> . expression MINUS_OP expression
    (44) binary_expression -> . expression MULT_OP expression
    (45) binary_expression -> . expression DIV_OP expression
    (46) binary_expression -> . expression EQ_OP expression
    (47) binary_expression -> . expression NE_OP expression
    (48) unary_expression -> . PLUS_OP expression
    (49) unary_expression -> . MINUS_OP expression
    (50) primary_expression -> . literal
    (51) primary_expression -> . IDENTIFIER
    (52) primary_expression -> . LPAREN_SPEC expression RPAREN_SPEC
    (53) literal -> . numeric_literal
    (54) literal -> . string_literal
    (55) literal -> . boolean_literal
    (56) literal -> . null_literal
    (57) numeric_literal -> . HEX_0
    (58) numeric_literal -> . HEX_1
    (59) numeric_literal -> . HEX_2
    (60) numeric_literal -> . HEX_3
    (61) numeric_literal -> . HEX_4
    (62) numeric_literal -> . HEX_5
    (63) numeric_literal -> . HEX_6
    (64) numeric_literal -> . HEX_7
    (65) numeric_literal -> . HEX_8
    (66) numeric_literal -> . HEX_9
    (67) numeric_literal -> . HEX_A
    (68) numeric_literal -> . HEX_B
    (69) numeric_literal -> . HEX_C
    (70) numeric_literal -> . HEX_D
    (71) numeric_literal -> . HEX_E
    (72) numeric_literal -> . HEX_F
    (73) string_literal -> . STRING
    (74) boolean_literal -> . TRUE
    (75) boolean_literal -> . FALSE
    (76) null_literal -> . NULL

    SEMICOLON_SPEC  shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    RETURN          shift and go to state 21
    BREAK           shift and go to state 22
    LBRACE_SPEC     shift and go to state 23
    SWITCH          shift and go to state 24
    ENTERO          shift and go to state 25
    FLOTANTE        shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    ARRAY           shift and go to state 29
    IDENTIFIER      shift and go to state 14
    PLUS_OP         shift and go to state 34
    MINUS_OP        shift and go to state 35
    LPAREN_SPEC     shift and go to state 18
    HEX_0           shift and go to state 41
    HEX_1           shift and go to state 42
    HEX_2           shift and go to state 43
    HEX_3           shift and go to state 44
    HEX_4           shift and go to state 45
    HEX_5           shift and go to state 46
    HEX_6           shift and go to state 47
    HEX_7           shift and go to state 48
    HEX_8           shift and go to state 49
    HEX_9           shift and go to state 50
    HEX_A           shift and go to state 51
    HEX_B           shift and go to state 52
    HEX_C           shift and go to state 53
    HEX_D           shift and go to state 54
    HEX_E           shift and go to state 55
    HEX_F           shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NULL            shift and go to state 59

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    declaration_statement          shift and go to state 4
    expression_statement           shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8
    return_statement               shift and go to state 9
    break_statement                shift and go to state 10
    block_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    type                           shift and go to state 13
    expression                     shift and go to state 16
    assignment_expression          shift and go to state 30
    binary_expression              shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 33
    literal                        shift and go to state 36
    numeric_literal                shift and go to state 37
    string_literal                 shift and go to state 38
    boolean_literal                shift and go to state 39
    null_literal                   shift and go to state 40

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . expression_statement
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . while_statement
    (9) statement -> . return_statement
    (10) statement -> . break_statement
    (11) statement -> . block_statement
    (12) statement -> . switch_statement
    (13) declaration_statement -> . type IDENTIFIER SEMICOLON_SPEC
    (14) declaration_statement -> . type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC
    (20) expression_statement -> . expression SEMICOLON_SPEC
    (21) expression_statement -> . SEMICOLON_SPEC
    (22) print_statement -> . PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC
    (23) if_statement -> . IF LPAREN_SPEC expression RPAREN_SPEC statement
    (24) if_statement -> . IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement
    (25) while_statement -> . WHILE LPAREN_SPEC expression RPAREN_SPEC statement
    (26) return_statement -> . RETURN expression SEMICOLON_SPEC
    (27) return_statement -> . RETURN SEMICOLON_SPEC
    (28) break_statement -> . BREAK SEMICOLON_SPEC
    (29) block_statement -> . LBRACE_SPEC statement_list RBRACE_SPEC
    (30) block_statement -> . LBRACE_SPEC RBRACE_SPEC
    (31) switch_statement -> . SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC
    (32) switch_statement -> . SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC
    (15) type -> . ENTERO
    (16) type -> . FLOTANTE
    (17) type -> . STRING
    (18) type -> . CHAR
    (19) type -> . ARRAY
    (37) expression -> . assignment_expression
    (38) expression -> . binary_expression
    (39) expression -> . unary_expression
    (40) expression -> . primary_expression
    (41) assignment_expression -> . IDENTIFIER ASSIGN_OP expression
    (42) binary_expression -> . expression PLUS_OP expression
    (43) binary_expression -> . expression MINUS_OP expression
    (44) binary_expression -> . expression MULT_OP expression
    (45) binary_expression -> . expression DIV_OP expression
    (46) binary_expression -> . expression EQ_OP expression
    (47) binary_expression -> . expression NE_OP expression
    (48) unary_expression -> . PLUS_OP expression
    (49) unary_expression -> . MINUS_OP expression
    (50) primary_expression -> . literal
    (51) primary_expression -> . IDENTIFIER
    (52) primary_expression -> . LPAREN_SPEC expression RPAREN_SPEC
    (53) literal -> . numeric_literal
    (54) literal -> . string_literal
    (55) literal -> . boolean_literal
    (56) literal -> . null_literal
    (57) numeric_literal -> . HEX_0
    (58) numeric_literal -> . HEX_1
    (59) numeric_literal -> . HEX_2
    (60) numeric_literal -> . HEX_3
    (61) numeric_literal -> . HEX_4
    (62) numeric_literal -> . HEX_5
    (63) numeric_literal -> . HEX_6
    (64) numeric_literal -> . HEX_7
    (65) numeric_literal -> . HEX_8
    (66) numeric_literal -> . HEX_9
    (67) numeric_literal -> . HEX_A
    (68) numeric_literal -> . HEX_B
    (69) numeric_literal -> . HEX_C
    (70) numeric_literal -> . HEX_D
    (71) numeric_literal -> . HEX_E
    (72) numeric_literal -> . HEX_F
    (73) string_literal -> . STRING
    (74) boolean_literal -> . TRUE
    (75) boolean_literal -> . FALSE
    (76) null_literal -> . NULL

    $end            reduce using rule 1 (program -> statement_list .)
    SEMICOLON_SPEC  shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    RETURN          shift and go to state 21
    BREAK           shift and go to state 22
    LBRACE_SPEC     shift and go to state 23
    SWITCH          shift and go to state 24
    ENTERO          shift and go to state 25
    FLOTANTE        shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    ARRAY           shift and go to state 29
    IDENTIFIER      shift and go to state 14
    PLUS_OP         shift and go to state 34
    MINUS_OP        shift and go to state 35
    LPAREN_SPEC     shift and go to state 18
    HEX_0           shift and go to state 41
    HEX_1           shift and go to state 42
    HEX_2           shift and go to state 43
    HEX_3           shift and go to state 44
    HEX_4           shift and go to state 45
    HEX_5           shift and go to state 46
    HEX_6           shift and go to state 47
    HEX_7           shift and go to state 48
    HEX_8           shift and go to state 49
    HEX_9           shift and go to state 50
    HEX_A           shift and go to state 51
    HEX_B           shift and go to state 52
    HEX_C           shift and go to state 53
    HEX_D           shift and go to state 54
    HEX_E           shift and go to state 55
    HEX_F           shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NULL            shift and go to state 59

    statement                      shift and go to state 60
    declaration_statement          shift and go to state 4
    expression_statement           shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8
    return_statement               shift and go to state 9
    break_statement                shift and go to state 10
    block_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    type                           shift and go to state 13
    expression                     shift and go to state 16
    assignment_expression          shift and go to state 30
    binary_expression              shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 33
    literal                        shift and go to state 36
    numeric_literal                shift and go to state 37
    string_literal                 shift and go to state 38
    boolean_literal                shift and go to state 39
    null_literal                   shift and go to state 40

state 3

    (2) statement_list -> statement .

    SEMICOLON_SPEC  reduce using rule 2 (statement_list -> statement .)
    PRINT           reduce using rule 2 (statement_list -> statement .)
    IF              reduce using rule 2 (statement_list -> statement .)
    WHILE           reduce using rule 2 (statement_list -> statement .)
    RETURN          reduce using rule 2 (statement_list -> statement .)
    BREAK           reduce using rule 2 (statement_list -> statement .)
    LBRACE_SPEC     reduce using rule 2 (statement_list -> statement .)
    SWITCH          reduce using rule 2 (statement_list -> statement .)
    ENTERO          reduce using rule 2 (statement_list -> statement .)
    FLOTANTE        reduce using rule 2 (statement_list -> statement .)
    STRING          reduce using rule 2 (statement_list -> statement .)
    CHAR            reduce using rule 2 (statement_list -> statement .)
    ARRAY           reduce using rule 2 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 2 (statement_list -> statement .)
    PLUS_OP         reduce using rule 2 (statement_list -> statement .)
    MINUS_OP        reduce using rule 2 (statement_list -> statement .)
    LPAREN_SPEC     reduce using rule 2 (statement_list -> statement .)
    HEX_0           reduce using rule 2 (statement_list -> statement .)
    HEX_1           reduce using rule 2 (statement_list -> statement .)
    HEX_2           reduce using rule 2 (statement_list -> statement .)
    HEX_3           reduce using rule 2 (statement_list -> statement .)
    HEX_4           reduce using rule 2 (statement_list -> statement .)
    HEX_5           reduce using rule 2 (statement_list -> statement .)
    HEX_6           reduce using rule 2 (statement_list -> statement .)
    HEX_7           reduce using rule 2 (statement_list -> statement .)
    HEX_8           reduce using rule 2 (statement_list -> statement .)
    HEX_9           reduce using rule 2 (statement_list -> statement .)
    HEX_A           reduce using rule 2 (statement_list -> statement .)
    HEX_B           reduce using rule 2 (statement_list -> statement .)
    HEX_C           reduce using rule 2 (statement_list -> statement .)
    HEX_D           reduce using rule 2 (statement_list -> statement .)
    HEX_E           reduce using rule 2 (statement_list -> statement .)
    HEX_F           reduce using rule 2 (statement_list -> statement .)
    TRUE            reduce using rule 2 (statement_list -> statement .)
    FALSE           reduce using rule 2 (statement_list -> statement .)
    NULL            reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)
    RBRACE_SPEC     reduce using rule 2 (statement_list -> statement .)
    CASE            reduce using rule 2 (statement_list -> statement .)
    DEFAULT         reduce using rule 2 (statement_list -> statement .)


state 4

    (4) statement -> declaration_statement .

    SEMICOLON_SPEC  reduce using rule 4 (statement -> declaration_statement .)
    PRINT           reduce using rule 4 (statement -> declaration_statement .)
    IF              reduce using rule 4 (statement -> declaration_statement .)
    WHILE           reduce using rule 4 (statement -> declaration_statement .)
    RETURN          reduce using rule 4 (statement -> declaration_statement .)
    BREAK           reduce using rule 4 (statement -> declaration_statement .)
    LBRACE_SPEC     reduce using rule 4 (statement -> declaration_statement .)
    SWITCH          reduce using rule 4 (statement -> declaration_statement .)
    ENTERO          reduce using rule 4 (statement -> declaration_statement .)
    FLOTANTE        reduce using rule 4 (statement -> declaration_statement .)
    STRING          reduce using rule 4 (statement -> declaration_statement .)
    CHAR            reduce using rule 4 (statement -> declaration_statement .)
    ARRAY           reduce using rule 4 (statement -> declaration_statement .)
    IDENTIFIER      reduce using rule 4 (statement -> declaration_statement .)
    PLUS_OP         reduce using rule 4 (statement -> declaration_statement .)
    MINUS_OP        reduce using rule 4 (statement -> declaration_statement .)
    LPAREN_SPEC     reduce using rule 4 (statement -> declaration_statement .)
    HEX_0           reduce using rule 4 (statement -> declaration_statement .)
    HEX_1           reduce using rule 4 (statement -> declaration_statement .)
    HEX_2           reduce using rule 4 (statement -> declaration_statement .)
    HEX_3           reduce using rule 4 (statement -> declaration_statement .)
    HEX_4           reduce using rule 4 (statement -> declaration_statement .)
    HEX_5           reduce using rule 4 (statement -> declaration_statement .)
    HEX_6           reduce using rule 4 (statement -> declaration_statement .)
    HEX_7           reduce using rule 4 (statement -> declaration_statement .)
    HEX_8           reduce using rule 4 (statement -> declaration_statement .)
    HEX_9           reduce using rule 4 (statement -> declaration_statement .)
    HEX_A           reduce using rule 4 (statement -> declaration_statement .)
    HEX_B           reduce using rule 4 (statement -> declaration_statement .)
    HEX_C           reduce using rule 4 (statement -> declaration_statement .)
    HEX_D           reduce using rule 4 (statement -> declaration_statement .)
    HEX_E           reduce using rule 4 (statement -> declaration_statement .)
    HEX_F           reduce using rule 4 (statement -> declaration_statement .)
    TRUE            reduce using rule 4 (statement -> declaration_statement .)
    FALSE           reduce using rule 4 (statement -> declaration_statement .)
    NULL            reduce using rule 4 (statement -> declaration_statement .)
    $end            reduce using rule 4 (statement -> declaration_statement .)
    RBRACE_SPEC     reduce using rule 4 (statement -> declaration_statement .)
    ELSE            reduce using rule 4 (statement -> declaration_statement .)
    CASE            reduce using rule 4 (statement -> declaration_statement .)
    DEFAULT         reduce using rule 4 (statement -> declaration_statement .)


state 5

    (5) statement -> expression_statement .

    SEMICOLON_SPEC  reduce using rule 5 (statement -> expression_statement .)
    PRINT           reduce using rule 5 (statement -> expression_statement .)
    IF              reduce using rule 5 (statement -> expression_statement .)
    WHILE           reduce using rule 5 (statement -> expression_statement .)
    RETURN          reduce using rule 5 (statement -> expression_statement .)
    BREAK           reduce using rule 5 (statement -> expression_statement .)
    LBRACE_SPEC     reduce using rule 5 (statement -> expression_statement .)
    SWITCH          reduce using rule 5 (statement -> expression_statement .)
    ENTERO          reduce using rule 5 (statement -> expression_statement .)
    FLOTANTE        reduce using rule 5 (statement -> expression_statement .)
    STRING          reduce using rule 5 (statement -> expression_statement .)
    CHAR            reduce using rule 5 (statement -> expression_statement .)
    ARRAY           reduce using rule 5 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 5 (statement -> expression_statement .)
    PLUS_OP         reduce using rule 5 (statement -> expression_statement .)
    MINUS_OP        reduce using rule 5 (statement -> expression_statement .)
    LPAREN_SPEC     reduce using rule 5 (statement -> expression_statement .)
    HEX_0           reduce using rule 5 (statement -> expression_statement .)
    HEX_1           reduce using rule 5 (statement -> expression_statement .)
    HEX_2           reduce using rule 5 (statement -> expression_statement .)
    HEX_3           reduce using rule 5 (statement -> expression_statement .)
    HEX_4           reduce using rule 5 (statement -> expression_statement .)
    HEX_5           reduce using rule 5 (statement -> expression_statement .)
    HEX_6           reduce using rule 5 (statement -> expression_statement .)
    HEX_7           reduce using rule 5 (statement -> expression_statement .)
    HEX_8           reduce using rule 5 (statement -> expression_statement .)
    HEX_9           reduce using rule 5 (statement -> expression_statement .)
    HEX_A           reduce using rule 5 (statement -> expression_statement .)
    HEX_B           reduce using rule 5 (statement -> expression_statement .)
    HEX_C           reduce using rule 5 (statement -> expression_statement .)
    HEX_D           reduce using rule 5 (statement -> expression_statement .)
    HEX_E           reduce using rule 5 (statement -> expression_statement .)
    HEX_F           reduce using rule 5 (statement -> expression_statement .)
    TRUE            reduce using rule 5 (statement -> expression_statement .)
    FALSE           reduce using rule 5 (statement -> expression_statement .)
    NULL            reduce using rule 5 (statement -> expression_statement .)
    $end            reduce using rule 5 (statement -> expression_statement .)
    RBRACE_SPEC     reduce using rule 5 (statement -> expression_statement .)
    ELSE            reduce using rule 5 (statement -> expression_statement .)
    CASE            reduce using rule 5 (statement -> expression_statement .)
    DEFAULT         reduce using rule 5 (statement -> expression_statement .)


state 6

    (6) statement -> print_statement .

    SEMICOLON_SPEC  reduce using rule 6 (statement -> print_statement .)
    PRINT           reduce using rule 6 (statement -> print_statement .)
    IF              reduce using rule 6 (statement -> print_statement .)
    WHILE           reduce using rule 6 (statement -> print_statement .)
    RETURN          reduce using rule 6 (statement -> print_statement .)
    BREAK           reduce using rule 6 (statement -> print_statement .)
    LBRACE_SPEC     reduce using rule 6 (statement -> print_statement .)
    SWITCH          reduce using rule 6 (statement -> print_statement .)
    ENTERO          reduce using rule 6 (statement -> print_statement .)
    FLOTANTE        reduce using rule 6 (statement -> print_statement .)
    STRING          reduce using rule 6 (statement -> print_statement .)
    CHAR            reduce using rule 6 (statement -> print_statement .)
    ARRAY           reduce using rule 6 (statement -> print_statement .)
    IDENTIFIER      reduce using rule 6 (statement -> print_statement .)
    PLUS_OP         reduce using rule 6 (statement -> print_statement .)
    MINUS_OP        reduce using rule 6 (statement -> print_statement .)
    LPAREN_SPEC     reduce using rule 6 (statement -> print_statement .)
    HEX_0           reduce using rule 6 (statement -> print_statement .)
    HEX_1           reduce using rule 6 (statement -> print_statement .)
    HEX_2           reduce using rule 6 (statement -> print_statement .)
    HEX_3           reduce using rule 6 (statement -> print_statement .)
    HEX_4           reduce using rule 6 (statement -> print_statement .)
    HEX_5           reduce using rule 6 (statement -> print_statement .)
    HEX_6           reduce using rule 6 (statement -> print_statement .)
    HEX_7           reduce using rule 6 (statement -> print_statement .)
    HEX_8           reduce using rule 6 (statement -> print_statement .)
    HEX_9           reduce using rule 6 (statement -> print_statement .)
    HEX_A           reduce using rule 6 (statement -> print_statement .)
    HEX_B           reduce using rule 6 (statement -> print_statement .)
    HEX_C           reduce using rule 6 (statement -> print_statement .)
    HEX_D           reduce using rule 6 (statement -> print_statement .)
    HEX_E           reduce using rule 6 (statement -> print_statement .)
    HEX_F           reduce using rule 6 (statement -> print_statement .)
    TRUE            reduce using rule 6 (statement -> print_statement .)
    FALSE           reduce using rule 6 (statement -> print_statement .)
    NULL            reduce using rule 6 (statement -> print_statement .)
    $end            reduce using rule 6 (statement -> print_statement .)
    RBRACE_SPEC     reduce using rule 6 (statement -> print_statement .)
    ELSE            reduce using rule 6 (statement -> print_statement .)
    CASE            reduce using rule 6 (statement -> print_statement .)
    DEFAULT         reduce using rule 6 (statement -> print_statement .)


state 7

    (7) statement -> if_statement .

    SEMICOLON_SPEC  reduce using rule 7 (statement -> if_statement .)
    PRINT           reduce using rule 7 (statement -> if_statement .)
    IF              reduce using rule 7 (statement -> if_statement .)
    WHILE           reduce using rule 7 (statement -> if_statement .)
    RETURN          reduce using rule 7 (statement -> if_statement .)
    BREAK           reduce using rule 7 (statement -> if_statement .)
    LBRACE_SPEC     reduce using rule 7 (statement -> if_statement .)
    SWITCH          reduce using rule 7 (statement -> if_statement .)
    ENTERO          reduce using rule 7 (statement -> if_statement .)
    FLOTANTE        reduce using rule 7 (statement -> if_statement .)
    STRING          reduce using rule 7 (statement -> if_statement .)
    CHAR            reduce using rule 7 (statement -> if_statement .)
    ARRAY           reduce using rule 7 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 7 (statement -> if_statement .)
    PLUS_OP         reduce using rule 7 (statement -> if_statement .)
    MINUS_OP        reduce using rule 7 (statement -> if_statement .)
    LPAREN_SPEC     reduce using rule 7 (statement -> if_statement .)
    HEX_0           reduce using rule 7 (statement -> if_statement .)
    HEX_1           reduce using rule 7 (statement -> if_statement .)
    HEX_2           reduce using rule 7 (statement -> if_statement .)
    HEX_3           reduce using rule 7 (statement -> if_statement .)
    HEX_4           reduce using rule 7 (statement -> if_statement .)
    HEX_5           reduce using rule 7 (statement -> if_statement .)
    HEX_6           reduce using rule 7 (statement -> if_statement .)
    HEX_7           reduce using rule 7 (statement -> if_statement .)
    HEX_8           reduce using rule 7 (statement -> if_statement .)
    HEX_9           reduce using rule 7 (statement -> if_statement .)
    HEX_A           reduce using rule 7 (statement -> if_statement .)
    HEX_B           reduce using rule 7 (statement -> if_statement .)
    HEX_C           reduce using rule 7 (statement -> if_statement .)
    HEX_D           reduce using rule 7 (statement -> if_statement .)
    HEX_E           reduce using rule 7 (statement -> if_statement .)
    HEX_F           reduce using rule 7 (statement -> if_statement .)
    TRUE            reduce using rule 7 (statement -> if_statement .)
    FALSE           reduce using rule 7 (statement -> if_statement .)
    NULL            reduce using rule 7 (statement -> if_statement .)
    $end            reduce using rule 7 (statement -> if_statement .)
    RBRACE_SPEC     reduce using rule 7 (statement -> if_statement .)
    ELSE            reduce using rule 7 (statement -> if_statement .)
    CASE            reduce using rule 7 (statement -> if_statement .)
    DEFAULT         reduce using rule 7 (statement -> if_statement .)


state 8

    (8) statement -> while_statement .

    SEMICOLON_SPEC  reduce using rule 8 (statement -> while_statement .)
    PRINT           reduce using rule 8 (statement -> while_statement .)
    IF              reduce using rule 8 (statement -> while_statement .)
    WHILE           reduce using rule 8 (statement -> while_statement .)
    RETURN          reduce using rule 8 (statement -> while_statement .)
    BREAK           reduce using rule 8 (statement -> while_statement .)
    LBRACE_SPEC     reduce using rule 8 (statement -> while_statement .)
    SWITCH          reduce using rule 8 (statement -> while_statement .)
    ENTERO          reduce using rule 8 (statement -> while_statement .)
    FLOTANTE        reduce using rule 8 (statement -> while_statement .)
    STRING          reduce using rule 8 (statement -> while_statement .)
    CHAR            reduce using rule 8 (statement -> while_statement .)
    ARRAY           reduce using rule 8 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 8 (statement -> while_statement .)
    PLUS_OP         reduce using rule 8 (statement -> while_statement .)
    MINUS_OP        reduce using rule 8 (statement -> while_statement .)
    LPAREN_SPEC     reduce using rule 8 (statement -> while_statement .)
    HEX_0           reduce using rule 8 (statement -> while_statement .)
    HEX_1           reduce using rule 8 (statement -> while_statement .)
    HEX_2           reduce using rule 8 (statement -> while_statement .)
    HEX_3           reduce using rule 8 (statement -> while_statement .)
    HEX_4           reduce using rule 8 (statement -> while_statement .)
    HEX_5           reduce using rule 8 (statement -> while_statement .)
    HEX_6           reduce using rule 8 (statement -> while_statement .)
    HEX_7           reduce using rule 8 (statement -> while_statement .)
    HEX_8           reduce using rule 8 (statement -> while_statement .)
    HEX_9           reduce using rule 8 (statement -> while_statement .)
    HEX_A           reduce using rule 8 (statement -> while_statement .)
    HEX_B           reduce using rule 8 (statement -> while_statement .)
    HEX_C           reduce using rule 8 (statement -> while_statement .)
    HEX_D           reduce using rule 8 (statement -> while_statement .)
    HEX_E           reduce using rule 8 (statement -> while_statement .)
    HEX_F           reduce using rule 8 (statement -> while_statement .)
    TRUE            reduce using rule 8 (statement -> while_statement .)
    FALSE           reduce using rule 8 (statement -> while_statement .)
    NULL            reduce using rule 8 (statement -> while_statement .)
    $end            reduce using rule 8 (statement -> while_statement .)
    RBRACE_SPEC     reduce using rule 8 (statement -> while_statement .)
    ELSE            reduce using rule 8 (statement -> while_statement .)
    CASE            reduce using rule 8 (statement -> while_statement .)
    DEFAULT         reduce using rule 8 (statement -> while_statement .)


state 9

    (9) statement -> return_statement .

    SEMICOLON_SPEC  reduce using rule 9 (statement -> return_statement .)
    PRINT           reduce using rule 9 (statement -> return_statement .)
    IF              reduce using rule 9 (statement -> return_statement .)
    WHILE           reduce using rule 9 (statement -> return_statement .)
    RETURN          reduce using rule 9 (statement -> return_statement .)
    BREAK           reduce using rule 9 (statement -> return_statement .)
    LBRACE_SPEC     reduce using rule 9 (statement -> return_statement .)
    SWITCH          reduce using rule 9 (statement -> return_statement .)
    ENTERO          reduce using rule 9 (statement -> return_statement .)
    FLOTANTE        reduce using rule 9 (statement -> return_statement .)
    STRING          reduce using rule 9 (statement -> return_statement .)
    CHAR            reduce using rule 9 (statement -> return_statement .)
    ARRAY           reduce using rule 9 (statement -> return_statement .)
    IDENTIFIER      reduce using rule 9 (statement -> return_statement .)
    PLUS_OP         reduce using rule 9 (statement -> return_statement .)
    MINUS_OP        reduce using rule 9 (statement -> return_statement .)
    LPAREN_SPEC     reduce using rule 9 (statement -> return_statement .)
    HEX_0           reduce using rule 9 (statement -> return_statement .)
    HEX_1           reduce using rule 9 (statement -> return_statement .)
    HEX_2           reduce using rule 9 (statement -> return_statement .)
    HEX_3           reduce using rule 9 (statement -> return_statement .)
    HEX_4           reduce using rule 9 (statement -> return_statement .)
    HEX_5           reduce using rule 9 (statement -> return_statement .)
    HEX_6           reduce using rule 9 (statement -> return_statement .)
    HEX_7           reduce using rule 9 (statement -> return_statement .)
    HEX_8           reduce using rule 9 (statement -> return_statement .)
    HEX_9           reduce using rule 9 (statement -> return_statement .)
    HEX_A           reduce using rule 9 (statement -> return_statement .)
    HEX_B           reduce using rule 9 (statement -> return_statement .)
    HEX_C           reduce using rule 9 (statement -> return_statement .)
    HEX_D           reduce using rule 9 (statement -> return_statement .)
    HEX_E           reduce using rule 9 (statement -> return_statement .)
    HEX_F           reduce using rule 9 (statement -> return_statement .)
    TRUE            reduce using rule 9 (statement -> return_statement .)
    FALSE           reduce using rule 9 (statement -> return_statement .)
    NULL            reduce using rule 9 (statement -> return_statement .)
    $end            reduce using rule 9 (statement -> return_statement .)
    RBRACE_SPEC     reduce using rule 9 (statement -> return_statement .)
    ELSE            reduce using rule 9 (statement -> return_statement .)
    CASE            reduce using rule 9 (statement -> return_statement .)
    DEFAULT         reduce using rule 9 (statement -> return_statement .)


state 10

    (10) statement -> break_statement .

    SEMICOLON_SPEC  reduce using rule 10 (statement -> break_statement .)
    PRINT           reduce using rule 10 (statement -> break_statement .)
    IF              reduce using rule 10 (statement -> break_statement .)
    WHILE           reduce using rule 10 (statement -> break_statement .)
    RETURN          reduce using rule 10 (statement -> break_statement .)
    BREAK           reduce using rule 10 (statement -> break_statement .)
    LBRACE_SPEC     reduce using rule 10 (statement -> break_statement .)
    SWITCH          reduce using rule 10 (statement -> break_statement .)
    ENTERO          reduce using rule 10 (statement -> break_statement .)
    FLOTANTE        reduce using rule 10 (statement -> break_statement .)
    STRING          reduce using rule 10 (statement -> break_statement .)
    CHAR            reduce using rule 10 (statement -> break_statement .)
    ARRAY           reduce using rule 10 (statement -> break_statement .)
    IDENTIFIER      reduce using rule 10 (statement -> break_statement .)
    PLUS_OP         reduce using rule 10 (statement -> break_statement .)
    MINUS_OP        reduce using rule 10 (statement -> break_statement .)
    LPAREN_SPEC     reduce using rule 10 (statement -> break_statement .)
    HEX_0           reduce using rule 10 (statement -> break_statement .)
    HEX_1           reduce using rule 10 (statement -> break_statement .)
    HEX_2           reduce using rule 10 (statement -> break_statement .)
    HEX_3           reduce using rule 10 (statement -> break_statement .)
    HEX_4           reduce using rule 10 (statement -> break_statement .)
    HEX_5           reduce using rule 10 (statement -> break_statement .)
    HEX_6           reduce using rule 10 (statement -> break_statement .)
    HEX_7           reduce using rule 10 (statement -> break_statement .)
    HEX_8           reduce using rule 10 (statement -> break_statement .)
    HEX_9           reduce using rule 10 (statement -> break_statement .)
    HEX_A           reduce using rule 10 (statement -> break_statement .)
    HEX_B           reduce using rule 10 (statement -> break_statement .)
    HEX_C           reduce using rule 10 (statement -> break_statement .)
    HEX_D           reduce using rule 10 (statement -> break_statement .)
    HEX_E           reduce using rule 10 (statement -> break_statement .)
    HEX_F           reduce using rule 10 (statement -> break_statement .)
    TRUE            reduce using rule 10 (statement -> break_statement .)
    FALSE           reduce using rule 10 (statement -> break_statement .)
    NULL            reduce using rule 10 (statement -> break_statement .)
    $end            reduce using rule 10 (statement -> break_statement .)
    RBRACE_SPEC     reduce using rule 10 (statement -> break_statement .)
    ELSE            reduce using rule 10 (statement -> break_statement .)
    CASE            reduce using rule 10 (statement -> break_statement .)
    DEFAULT         reduce using rule 10 (statement -> break_statement .)


state 11

    (11) statement -> block_statement .

    SEMICOLON_SPEC  reduce using rule 11 (statement -> block_statement .)
    PRINT           reduce using rule 11 (statement -> block_statement .)
    IF              reduce using rule 11 (statement -> block_statement .)
    WHILE           reduce using rule 11 (statement -> block_statement .)
    RETURN          reduce using rule 11 (statement -> block_statement .)
    BREAK           reduce using rule 11 (statement -> block_statement .)
    LBRACE_SPEC     reduce using rule 11 (statement -> block_statement .)
    SWITCH          reduce using rule 11 (statement -> block_statement .)
    ENTERO          reduce using rule 11 (statement -> block_statement .)
    FLOTANTE        reduce using rule 11 (statement -> block_statement .)
    STRING          reduce using rule 11 (statement -> block_statement .)
    CHAR            reduce using rule 11 (statement -> block_statement .)
    ARRAY           reduce using rule 11 (statement -> block_statement .)
    IDENTIFIER      reduce using rule 11 (statement -> block_statement .)
    PLUS_OP         reduce using rule 11 (statement -> block_statement .)
    MINUS_OP        reduce using rule 11 (statement -> block_statement .)
    LPAREN_SPEC     reduce using rule 11 (statement -> block_statement .)
    HEX_0           reduce using rule 11 (statement -> block_statement .)
    HEX_1           reduce using rule 11 (statement -> block_statement .)
    HEX_2           reduce using rule 11 (statement -> block_statement .)
    HEX_3           reduce using rule 11 (statement -> block_statement .)
    HEX_4           reduce using rule 11 (statement -> block_statement .)
    HEX_5           reduce using rule 11 (statement -> block_statement .)
    HEX_6           reduce using rule 11 (statement -> block_statement .)
    HEX_7           reduce using rule 11 (statement -> block_statement .)
    HEX_8           reduce using rule 11 (statement -> block_statement .)
    HEX_9           reduce using rule 11 (statement -> block_statement .)
    HEX_A           reduce using rule 11 (statement -> block_statement .)
    HEX_B           reduce using rule 11 (statement -> block_statement .)
    HEX_C           reduce using rule 11 (statement -> block_statement .)
    HEX_D           reduce using rule 11 (statement -> block_statement .)
    HEX_E           reduce using rule 11 (statement -> block_statement .)
    HEX_F           reduce using rule 11 (statement -> block_statement .)
    TRUE            reduce using rule 11 (statement -> block_statement .)
    FALSE           reduce using rule 11 (statement -> block_statement .)
    NULL            reduce using rule 11 (statement -> block_statement .)
    $end            reduce using rule 11 (statement -> block_statement .)
    RBRACE_SPEC     reduce using rule 11 (statement -> block_statement .)
    ELSE            reduce using rule 11 (statement -> block_statement .)
    CASE            reduce using rule 11 (statement -> block_statement .)
    DEFAULT         reduce using rule 11 (statement -> block_statement .)


state 12

    (12) statement -> switch_statement .

    SEMICOLON_SPEC  reduce using rule 12 (statement -> switch_statement .)
    PRINT           reduce using rule 12 (statement -> switch_statement .)
    IF              reduce using rule 12 (statement -> switch_statement .)
    WHILE           reduce using rule 12 (statement -> switch_statement .)
    RETURN          reduce using rule 12 (statement -> switch_statement .)
    BREAK           reduce using rule 12 (statement -> switch_statement .)
    LBRACE_SPEC     reduce using rule 12 (statement -> switch_statement .)
    SWITCH          reduce using rule 12 (statement -> switch_statement .)
    ENTERO          reduce using rule 12 (statement -> switch_statement .)
    FLOTANTE        reduce using rule 12 (statement -> switch_statement .)
    STRING          reduce using rule 12 (statement -> switch_statement .)
    CHAR            reduce using rule 12 (statement -> switch_statement .)
    ARRAY           reduce using rule 12 (statement -> switch_statement .)
    IDENTIFIER      reduce using rule 12 (statement -> switch_statement .)
    PLUS_OP         reduce using rule 12 (statement -> switch_statement .)
    MINUS_OP        reduce using rule 12 (statement -> switch_statement .)
    LPAREN_SPEC     reduce using rule 12 (statement -> switch_statement .)
    HEX_0           reduce using rule 12 (statement -> switch_statement .)
    HEX_1           reduce using rule 12 (statement -> switch_statement .)
    HEX_2           reduce using rule 12 (statement -> switch_statement .)
    HEX_3           reduce using rule 12 (statement -> switch_statement .)
    HEX_4           reduce using rule 12 (statement -> switch_statement .)
    HEX_5           reduce using rule 12 (statement -> switch_statement .)
    HEX_6           reduce using rule 12 (statement -> switch_statement .)
    HEX_7           reduce using rule 12 (statement -> switch_statement .)
    HEX_8           reduce using rule 12 (statement -> switch_statement .)
    HEX_9           reduce using rule 12 (statement -> switch_statement .)
    HEX_A           reduce using rule 12 (statement -> switch_statement .)
    HEX_B           reduce using rule 12 (statement -> switch_statement .)
    HEX_C           reduce using rule 12 (statement -> switch_statement .)
    HEX_D           reduce using rule 12 (statement -> switch_statement .)
    HEX_E           reduce using rule 12 (statement -> switch_statement .)
    HEX_F           reduce using rule 12 (statement -> switch_statement .)
    TRUE            reduce using rule 12 (statement -> switch_statement .)
    FALSE           reduce using rule 12 (statement -> switch_statement .)
    NULL            reduce using rule 12 (statement -> switch_statement .)
    $end            reduce using rule 12 (statement -> switch_statement .)
    RBRACE_SPEC     reduce using rule 12 (statement -> switch_statement .)
    ELSE            reduce using rule 12 (statement -> switch_statement .)
    CASE            reduce using rule 12 (statement -> switch_statement .)
    DEFAULT         reduce using rule 12 (statement -> switch_statement .)


state 13

    (13) declaration_statement -> type . IDENTIFIER SEMICOLON_SPEC
    (14) declaration_statement -> type . IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC

    IDENTIFIER      shift and go to state 61


state 14

    (41) assignment_expression -> IDENTIFIER . ASSIGN_OP expression
    (51) primary_expression -> IDENTIFIER .

    ASSIGN_OP       shift and go to state 62
    SEMICOLON_SPEC  reduce using rule 51 (primary_expression -> IDENTIFIER .)
    PLUS_OP         reduce using rule 51 (primary_expression -> IDENTIFIER .)
    MINUS_OP        reduce using rule 51 (primary_expression -> IDENTIFIER .)
    MULT_OP         reduce using rule 51 (primary_expression -> IDENTIFIER .)
    DIV_OP          reduce using rule 51 (primary_expression -> IDENTIFIER .)
    EQ_OP           reduce using rule 51 (primary_expression -> IDENTIFIER .)
    NE_OP           reduce using rule 51 (primary_expression -> IDENTIFIER .)
    RPAREN_SPEC     reduce using rule 51 (primary_expression -> IDENTIFIER .)
    COLON           reduce using rule 51 (primary_expression -> IDENTIFIER .)


state 15

    (21) expression_statement -> SEMICOLON_SPEC .

    SEMICOLON_SPEC  reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    PRINT           reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    IF              reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    WHILE           reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    RETURN          reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    BREAK           reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    LBRACE_SPEC     reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    SWITCH          reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    ENTERO          reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    FLOTANTE        reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    STRING          reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    CHAR            reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    ARRAY           reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    IDENTIFIER      reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    PLUS_OP         reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    MINUS_OP        reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    LPAREN_SPEC     reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    HEX_0           reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    HEX_1           reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    HEX_2           reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    HEX_3           reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    HEX_4           reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    HEX_5           reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    HEX_6           reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    HEX_7           reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    HEX_8           reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    HEX_9           reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    HEX_A           reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    HEX_B           reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    HEX_C           reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    HEX_D           reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    HEX_E           reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    HEX_F           reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    TRUE            reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    FALSE           reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    NULL            reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    $end            reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    RBRACE_SPEC     reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    ELSE            reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    CASE            reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)
    DEFAULT         reduce using rule 21 (expression_statement -> SEMICOLON_SPEC .)


state 16

    (20) expression_statement -> expression . SEMICOLON_SPEC
    (42) binary_expression -> expression . PLUS_OP expression
    (43) binary_expression -> expression . MINUS_OP expression
    (44) binary_expression -> expression . MULT_OP expression
    (45) binary_expression -> expression . DIV_OP expression
    (46) binary_expression -> expression . EQ_OP expression
    (47) binary_expression -> expression . NE_OP expression

    SEMICOLON_SPEC  shift and go to state 63
    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 65
    MULT_OP         shift and go to state 66
    DIV_OP          shift and go to state 67
    EQ_OP           shift and go to state 68
    NE_OP           shift and go to state 69


state 17

    (22) print_statement -> PRINT . LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC

    LPAREN_SPEC     shift and go to state 70


state 18

    (52) primary_expression -> LPAREN_SPEC . expression RPAREN_SPEC
    (37) expression -> . assignment_expression
    (38) expression -> . binary_expression
    (39) expression -> . unary_expression
    (40) expression -> . primary_expression
    (41) assignment_expression -> . IDENTIFIER ASSIGN_OP expression
    (42) binary_expression -> . expression PLUS_OP expression
    (43) binary_expression -> . expression MINUS_OP expression
    (44) binary_expression -> . expression MULT_OP expression
    (45) binary_expression -> . expression DIV_OP expression
    (46) binary_expression -> . expression EQ_OP expression
    (47) binary_expression -> . expression NE_OP expression
    (48) unary_expression -> . PLUS_OP expression
    (49) unary_expression -> . MINUS_OP expression
    (50) primary_expression -> . literal
    (51) primary_expression -> . IDENTIFIER
    (52) primary_expression -> . LPAREN_SPEC expression RPAREN_SPEC
    (53) literal -> . numeric_literal
    (54) literal -> . string_literal
    (55) literal -> . boolean_literal
    (56) literal -> . null_literal
    (57) numeric_literal -> . HEX_0
    (58) numeric_literal -> . HEX_1
    (59) numeric_literal -> . HEX_2
    (60) numeric_literal -> . HEX_3
    (61) numeric_literal -> . HEX_4
    (62) numeric_literal -> . HEX_5
    (63) numeric_literal -> . HEX_6
    (64) numeric_literal -> . HEX_7
    (65) numeric_literal -> . HEX_8
    (66) numeric_literal -> . HEX_9
    (67) numeric_literal -> . HEX_A
    (68) numeric_literal -> . HEX_B
    (69) numeric_literal -> . HEX_C
    (70) numeric_literal -> . HEX_D
    (71) numeric_literal -> . HEX_E
    (72) numeric_literal -> . HEX_F
    (73) string_literal -> . STRING
    (74) boolean_literal -> . TRUE
    (75) boolean_literal -> . FALSE
    (76) null_literal -> . NULL

    IDENTIFIER      shift and go to state 14
    PLUS_OP         shift and go to state 34
    MINUS_OP        shift and go to state 35
    LPAREN_SPEC     shift and go to state 18
    HEX_0           shift and go to state 41
    HEX_1           shift and go to state 42
    HEX_2           shift and go to state 43
    HEX_3           shift and go to state 44
    HEX_4           shift and go to state 45
    HEX_5           shift and go to state 46
    HEX_6           shift and go to state 47
    HEX_7           shift and go to state 48
    HEX_8           shift and go to state 49
    HEX_9           shift and go to state 50
    HEX_A           shift and go to state 51
    HEX_B           shift and go to state 52
    HEX_C           shift and go to state 53
    HEX_D           shift and go to state 54
    HEX_E           shift and go to state 55
    HEX_F           shift and go to state 56
    STRING          shift and go to state 72
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NULL            shift and go to state 59

    expression                     shift and go to state 71
    assignment_expression          shift and go to state 30
    binary_expression              shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 33
    literal                        shift and go to state 36
    numeric_literal                shift and go to state 37
    string_literal                 shift and go to state 38
    boolean_literal                shift and go to state 39
    null_literal                   shift and go to state 40

state 19

    (23) if_statement -> IF . LPAREN_SPEC expression RPAREN_SPEC statement
    (24) if_statement -> IF . LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement

    LPAREN_SPEC     shift and go to state 73


state 20

    (25) while_statement -> WHILE . LPAREN_SPEC expression RPAREN_SPEC statement

    LPAREN_SPEC     shift and go to state 74


state 21

    (26) return_statement -> RETURN . expression SEMICOLON_SPEC
    (27) return_statement -> RETURN . SEMICOLON_SPEC
    (37) expression -> . assignment_expression
    (38) expression -> . binary_expression
    (39) expression -> . unary_expression
    (40) expression -> . primary_expression
    (41) assignment_expression -> . IDENTIFIER ASSIGN_OP expression
    (42) binary_expression -> . expression PLUS_OP expression
    (43) binary_expression -> . expression MINUS_OP expression
    (44) binary_expression -> . expression MULT_OP expression
    (45) binary_expression -> . expression DIV_OP expression
    (46) binary_expression -> . expression EQ_OP expression
    (47) binary_expression -> . expression NE_OP expression
    (48) unary_expression -> . PLUS_OP expression
    (49) unary_expression -> . MINUS_OP expression
    (50) primary_expression -> . literal
    (51) primary_expression -> . IDENTIFIER
    (52) primary_expression -> . LPAREN_SPEC expression RPAREN_SPEC
    (53) literal -> . numeric_literal
    (54) literal -> . string_literal
    (55) literal -> . boolean_literal
    (56) literal -> . null_literal
    (57) numeric_literal -> . HEX_0
    (58) numeric_literal -> . HEX_1
    (59) numeric_literal -> . HEX_2
    (60) numeric_literal -> . HEX_3
    (61) numeric_literal -> . HEX_4
    (62) numeric_literal -> . HEX_5
    (63) numeric_literal -> . HEX_6
    (64) numeric_literal -> . HEX_7
    (65) numeric_literal -> . HEX_8
    (66) numeric_literal -> . HEX_9
    (67) numeric_literal -> . HEX_A
    (68) numeric_literal -> . HEX_B
    (69) numeric_literal -> . HEX_C
    (70) numeric_literal -> . HEX_D
    (71) numeric_literal -> . HEX_E
    (72) numeric_literal -> . HEX_F
    (73) string_literal -> . STRING
    (74) boolean_literal -> . TRUE
    (75) boolean_literal -> . FALSE
    (76) null_literal -> . NULL

    SEMICOLON_SPEC  shift and go to state 76
    IDENTIFIER      shift and go to state 14
    PLUS_OP         shift and go to state 34
    MINUS_OP        shift and go to state 35
    LPAREN_SPEC     shift and go to state 18
    HEX_0           shift and go to state 41
    HEX_1           shift and go to state 42
    HEX_2           shift and go to state 43
    HEX_3           shift and go to state 44
    HEX_4           shift and go to state 45
    HEX_5           shift and go to state 46
    HEX_6           shift and go to state 47
    HEX_7           shift and go to state 48
    HEX_8           shift and go to state 49
    HEX_9           shift and go to state 50
    HEX_A           shift and go to state 51
    HEX_B           shift and go to state 52
    HEX_C           shift and go to state 53
    HEX_D           shift and go to state 54
    HEX_E           shift and go to state 55
    HEX_F           shift and go to state 56
    STRING          shift and go to state 72
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NULL            shift and go to state 59

    expression                     shift and go to state 75
    assignment_expression          shift and go to state 30
    binary_expression              shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 33
    literal                        shift and go to state 36
    numeric_literal                shift and go to state 37
    string_literal                 shift and go to state 38
    boolean_literal                shift and go to state 39
    null_literal                   shift and go to state 40

state 22

    (28) break_statement -> BREAK . SEMICOLON_SPEC

    SEMICOLON_SPEC  shift and go to state 77


state 23

    (29) block_statement -> LBRACE_SPEC . statement_list RBRACE_SPEC
    (30) block_statement -> LBRACE_SPEC . RBRACE_SPEC
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration_statement
    (5) statement -> . expression_statement
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . while_statement
    (9) statement -> . return_statement
    (10) statement -> . break_statement
    (11) statement -> . block_statement
    (12) statement -> . switch_statement
    (13) declaration_statement -> . type IDENTIFIER SEMICOLON_SPEC
    (14) declaration_statement -> . type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC
    (20) expression_statement -> . expression SEMICOLON_SPEC
    (21) expression_statement -> . SEMICOLON_SPEC
    (22) print_statement -> . PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC
    (23) if_statement -> . IF LPAREN_SPEC expression RPAREN_SPEC statement
    (24) if_statement -> . IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement
    (25) while_statement -> . WHILE LPAREN_SPEC expression RPAREN_SPEC statement
    (26) return_statement -> . RETURN expression SEMICOLON_SPEC
    (27) return_statement -> . RETURN SEMICOLON_SPEC
    (28) break_statement -> . BREAK SEMICOLON_SPEC
    (29) block_statement -> . LBRACE_SPEC statement_list RBRACE_SPEC
    (30) block_statement -> . LBRACE_SPEC RBRACE_SPEC
    (31) switch_statement -> . SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC
    (32) switch_statement -> . SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC
    (15) type -> . ENTERO
    (16) type -> . FLOTANTE
    (17) type -> . STRING
    (18) type -> . CHAR
    (19) type -> . ARRAY
    (37) expression -> . assignment_expression
    (38) expression -> . binary_expression
    (39) expression -> . unary_expression
    (40) expression -> . primary_expression
    (41) assignment_expression -> . IDENTIFIER ASSIGN_OP expression
    (42) binary_expression -> . expression PLUS_OP expression
    (43) binary_expression -> . expression MINUS_OP expression
    (44) binary_expression -> . expression MULT_OP expression
    (45) binary_expression -> . expression DIV_OP expression
    (46) binary_expression -> . expression EQ_OP expression
    (47) binary_expression -> . expression NE_OP expression
    (48) unary_expression -> . PLUS_OP expression
    (49) unary_expression -> . MINUS_OP expression
    (50) primary_expression -> . literal
    (51) primary_expression -> . IDENTIFIER
    (52) primary_expression -> . LPAREN_SPEC expression RPAREN_SPEC
    (53) literal -> . numeric_literal
    (54) literal -> . string_literal
    (55) literal -> . boolean_literal
    (56) literal -> . null_literal
    (57) numeric_literal -> . HEX_0
    (58) numeric_literal -> . HEX_1
    (59) numeric_literal -> . HEX_2
    (60) numeric_literal -> . HEX_3
    (61) numeric_literal -> . HEX_4
    (62) numeric_literal -> . HEX_5
    (63) numeric_literal -> . HEX_6
    (64) numeric_literal -> . HEX_7
    (65) numeric_literal -> . HEX_8
    (66) numeric_literal -> . HEX_9
    (67) numeric_literal -> . HEX_A
    (68) numeric_literal -> . HEX_B
    (69) numeric_literal -> . HEX_C
    (70) numeric_literal -> . HEX_D
    (71) numeric_literal -> . HEX_E
    (72) numeric_literal -> . HEX_F
    (73) string_literal -> . STRING
    (74) boolean_literal -> . TRUE
    (75) boolean_literal -> . FALSE
    (76) null_literal -> . NULL

    RBRACE_SPEC     shift and go to state 79
    SEMICOLON_SPEC  shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    RETURN          shift and go to state 21
    BREAK           shift and go to state 22
    LBRACE_SPEC     shift and go to state 23
    SWITCH          shift and go to state 24
    ENTERO          shift and go to state 25
    FLOTANTE        shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    ARRAY           shift and go to state 29
    IDENTIFIER      shift and go to state 14
    PLUS_OP         shift and go to state 34
    MINUS_OP        shift and go to state 35
    LPAREN_SPEC     shift and go to state 18
    HEX_0           shift and go to state 41
    HEX_1           shift and go to state 42
    HEX_2           shift and go to state 43
    HEX_3           shift and go to state 44
    HEX_4           shift and go to state 45
    HEX_5           shift and go to state 46
    HEX_6           shift and go to state 47
    HEX_7           shift and go to state 48
    HEX_8           shift and go to state 49
    HEX_9           shift and go to state 50
    HEX_A           shift and go to state 51
    HEX_B           shift and go to state 52
    HEX_C           shift and go to state 53
    HEX_D           shift and go to state 54
    HEX_E           shift and go to state 55
    HEX_F           shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NULL            shift and go to state 59

    statement_list                 shift and go to state 78
    statement                      shift and go to state 3
    declaration_statement          shift and go to state 4
    expression_statement           shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8
    return_statement               shift and go to state 9
    break_statement                shift and go to state 10
    block_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    type                           shift and go to state 13
    expression                     shift and go to state 16
    assignment_expression          shift and go to state 30
    binary_expression              shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 33
    literal                        shift and go to state 36
    numeric_literal                shift and go to state 37
    string_literal                 shift and go to state 38
    boolean_literal                shift and go to state 39
    null_literal                   shift and go to state 40

state 24

    (31) switch_statement -> SWITCH . LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC
    (32) switch_statement -> SWITCH . LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC

    LPAREN_SPEC     shift and go to state 80


state 25

    (15) type -> ENTERO .

    IDENTIFIER      reduce using rule 15 (type -> ENTERO .)


state 26

    (16) type -> FLOTANTE .

    IDENTIFIER      reduce using rule 16 (type -> FLOTANTE .)


state 27

    (17) type -> STRING .
    (73) string_literal -> STRING .

    IDENTIFIER      reduce using rule 17 (type -> STRING .)
    SEMICOLON_SPEC  reduce using rule 73 (string_literal -> STRING .)
    PLUS_OP         reduce using rule 73 (string_literal -> STRING .)
    MINUS_OP        reduce using rule 73 (string_literal -> STRING .)
    MULT_OP         reduce using rule 73 (string_literal -> STRING .)
    DIV_OP          reduce using rule 73 (string_literal -> STRING .)
    EQ_OP           reduce using rule 73 (string_literal -> STRING .)
    NE_OP           reduce using rule 73 (string_literal -> STRING .)


state 28

    (18) type -> CHAR .

    IDENTIFIER      reduce using rule 18 (type -> CHAR .)


state 29

    (19) type -> ARRAY .

    IDENTIFIER      reduce using rule 19 (type -> ARRAY .)


state 30

    (37) expression -> assignment_expression .

    SEMICOLON_SPEC  reduce using rule 37 (expression -> assignment_expression .)
    PLUS_OP         reduce using rule 37 (expression -> assignment_expression .)
    MINUS_OP        reduce using rule 37 (expression -> assignment_expression .)
    MULT_OP         reduce using rule 37 (expression -> assignment_expression .)
    DIV_OP          reduce using rule 37 (expression -> assignment_expression .)
    EQ_OP           reduce using rule 37 (expression -> assignment_expression .)
    NE_OP           reduce using rule 37 (expression -> assignment_expression .)
    RPAREN_SPEC     reduce using rule 37 (expression -> assignment_expression .)
    COLON           reduce using rule 37 (expression -> assignment_expression .)


state 31

    (38) expression -> binary_expression .

    SEMICOLON_SPEC  reduce using rule 38 (expression -> binary_expression .)
    PLUS_OP         reduce using rule 38 (expression -> binary_expression .)
    MINUS_OP        reduce using rule 38 (expression -> binary_expression .)
    MULT_OP         reduce using rule 38 (expression -> binary_expression .)
    DIV_OP          reduce using rule 38 (expression -> binary_expression .)
    EQ_OP           reduce using rule 38 (expression -> binary_expression .)
    NE_OP           reduce using rule 38 (expression -> binary_expression .)
    RPAREN_SPEC     reduce using rule 38 (expression -> binary_expression .)
    COLON           reduce using rule 38 (expression -> binary_expression .)


state 32

    (39) expression -> unary_expression .

    SEMICOLON_SPEC  reduce using rule 39 (expression -> unary_expression .)
    PLUS_OP         reduce using rule 39 (expression -> unary_expression .)
    MINUS_OP        reduce using rule 39 (expression -> unary_expression .)
    MULT_OP         reduce using rule 39 (expression -> unary_expression .)
    DIV_OP          reduce using rule 39 (expression -> unary_expression .)
    EQ_OP           reduce using rule 39 (expression -> unary_expression .)
    NE_OP           reduce using rule 39 (expression -> unary_expression .)
    RPAREN_SPEC     reduce using rule 39 (expression -> unary_expression .)
    COLON           reduce using rule 39 (expression -> unary_expression .)


state 33

    (40) expression -> primary_expression .

    SEMICOLON_SPEC  reduce using rule 40 (expression -> primary_expression .)
    PLUS_OP         reduce using rule 40 (expression -> primary_expression .)
    MINUS_OP        reduce using rule 40 (expression -> primary_expression .)
    MULT_OP         reduce using rule 40 (expression -> primary_expression .)
    DIV_OP          reduce using rule 40 (expression -> primary_expression .)
    EQ_OP           reduce using rule 40 (expression -> primary_expression .)
    NE_OP           reduce using rule 40 (expression -> primary_expression .)
    RPAREN_SPEC     reduce using rule 40 (expression -> primary_expression .)
    COLON           reduce using rule 40 (expression -> primary_expression .)


state 34

    (48) unary_expression -> PLUS_OP . expression
    (37) expression -> . assignment_expression
    (38) expression -> . binary_expression
    (39) expression -> . unary_expression
    (40) expression -> . primary_expression
    (41) assignment_expression -> . IDENTIFIER ASSIGN_OP expression
    (42) binary_expression -> . expression PLUS_OP expression
    (43) binary_expression -> . expression MINUS_OP expression
    (44) binary_expression -> . expression MULT_OP expression
    (45) binary_expression -> . expression DIV_OP expression
    (46) binary_expression -> . expression EQ_OP expression
    (47) binary_expression -> . expression NE_OP expression
    (48) unary_expression -> . PLUS_OP expression
    (49) unary_expression -> . MINUS_OP expression
    (50) primary_expression -> . literal
    (51) primary_expression -> . IDENTIFIER
    (52) primary_expression -> . LPAREN_SPEC expression RPAREN_SPEC
    (53) literal -> . numeric_literal
    (54) literal -> . string_literal
    (55) literal -> . boolean_literal
    (56) literal -> . null_literal
    (57) numeric_literal -> . HEX_0
    (58) numeric_literal -> . HEX_1
    (59) numeric_literal -> . HEX_2
    (60) numeric_literal -> . HEX_3
    (61) numeric_literal -> . HEX_4
    (62) numeric_literal -> . HEX_5
    (63) numeric_literal -> . HEX_6
    (64) numeric_literal -> . HEX_7
    (65) numeric_literal -> . HEX_8
    (66) numeric_literal -> . HEX_9
    (67) numeric_literal -> . HEX_A
    (68) numeric_literal -> . HEX_B
    (69) numeric_literal -> . HEX_C
    (70) numeric_literal -> . HEX_D
    (71) numeric_literal -> . HEX_E
    (72) numeric_literal -> . HEX_F
    (73) string_literal -> . STRING
    (74) boolean_literal -> . TRUE
    (75) boolean_literal -> . FALSE
    (76) null_literal -> . NULL

    IDENTIFIER      shift and go to state 14
    PLUS_OP         shift and go to state 34
    MINUS_OP        shift and go to state 35
    LPAREN_SPEC     shift and go to state 18
    HEX_0           shift and go to state 41
    HEX_1           shift and go to state 42
    HEX_2           shift and go to state 43
    HEX_3           shift and go to state 44
    HEX_4           shift and go to state 45
    HEX_5           shift and go to state 46
    HEX_6           shift and go to state 47
    HEX_7           shift and go to state 48
    HEX_8           shift and go to state 49
    HEX_9           shift and go to state 50
    HEX_A           shift and go to state 51
    HEX_B           shift and go to state 52
    HEX_C           shift and go to state 53
    HEX_D           shift and go to state 54
    HEX_E           shift and go to state 55
    HEX_F           shift and go to state 56
    STRING          shift and go to state 72
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NULL            shift and go to state 59

    expression                     shift and go to state 81
    assignment_expression          shift and go to state 30
    binary_expression              shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 33
    literal                        shift and go to state 36
    numeric_literal                shift and go to state 37
    string_literal                 shift and go to state 38
    boolean_literal                shift and go to state 39
    null_literal                   shift and go to state 40

state 35

    (49) unary_expression -> MINUS_OP . expression
    (37) expression -> . assignment_expression
    (38) expression -> . binary_expression
    (39) expression -> . unary_expression
    (40) expression -> . primary_expression
    (41) assignment_expression -> . IDENTIFIER ASSIGN_OP expression
    (42) binary_expression -> . expression PLUS_OP expression
    (43) binary_expression -> . expression MINUS_OP expression
    (44) binary_expression -> . expression MULT_OP expression
    (45) binary_expression -> . expression DIV_OP expression
    (46) binary_expression -> . expression EQ_OP expression
    (47) binary_expression -> . expression NE_OP expression
    (48) unary_expression -> . PLUS_OP expression
    (49) unary_expression -> . MINUS_OP expression
    (50) primary_expression -> . literal
    (51) primary_expression -> . IDENTIFIER
    (52) primary_expression -> . LPAREN_SPEC expression RPAREN_SPEC
    (53) literal -> . numeric_literal
    (54) literal -> . string_literal
    (55) literal -> . boolean_literal
    (56) literal -> . null_literal
    (57) numeric_literal -> . HEX_0
    (58) numeric_literal -> . HEX_1
    (59) numeric_literal -> . HEX_2
    (60) numeric_literal -> . HEX_3
    (61) numeric_literal -> . HEX_4
    (62) numeric_literal -> . HEX_5
    (63) numeric_literal -> . HEX_6
    (64) numeric_literal -> . HEX_7
    (65) numeric_literal -> . HEX_8
    (66) numeric_literal -> . HEX_9
    (67) numeric_literal -> . HEX_A
    (68) numeric_literal -> . HEX_B
    (69) numeric_literal -> . HEX_C
    (70) numeric_literal -> . HEX_D
    (71) numeric_literal -> . HEX_E
    (72) numeric_literal -> . HEX_F
    (73) string_literal -> . STRING
    (74) boolean_literal -> . TRUE
    (75) boolean_literal -> . FALSE
    (76) null_literal -> . NULL

    IDENTIFIER      shift and go to state 14
    PLUS_OP         shift and go to state 34
    MINUS_OP        shift and go to state 35
    LPAREN_SPEC     shift and go to state 18
    HEX_0           shift and go to state 41
    HEX_1           shift and go to state 42
    HEX_2           shift and go to state 43
    HEX_3           shift and go to state 44
    HEX_4           shift and go to state 45
    HEX_5           shift and go to state 46
    HEX_6           shift and go to state 47
    HEX_7           shift and go to state 48
    HEX_8           shift and go to state 49
    HEX_9           shift and go to state 50
    HEX_A           shift and go to state 51
    HEX_B           shift and go to state 52
    HEX_C           shift and go to state 53
    HEX_D           shift and go to state 54
    HEX_E           shift and go to state 55
    HEX_F           shift and go to state 56
    STRING          shift and go to state 72
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NULL            shift and go to state 59

    expression                     shift and go to state 82
    assignment_expression          shift and go to state 30
    binary_expression              shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 33
    literal                        shift and go to state 36
    numeric_literal                shift and go to state 37
    string_literal                 shift and go to state 38
    boolean_literal                shift and go to state 39
    null_literal                   shift and go to state 40

state 36

    (50) primary_expression -> literal .

    SEMICOLON_SPEC  reduce using rule 50 (primary_expression -> literal .)
    PLUS_OP         reduce using rule 50 (primary_expression -> literal .)
    MINUS_OP        reduce using rule 50 (primary_expression -> literal .)
    MULT_OP         reduce using rule 50 (primary_expression -> literal .)
    DIV_OP          reduce using rule 50 (primary_expression -> literal .)
    EQ_OP           reduce using rule 50 (primary_expression -> literal .)
    NE_OP           reduce using rule 50 (primary_expression -> literal .)
    RPAREN_SPEC     reduce using rule 50 (primary_expression -> literal .)
    COLON           reduce using rule 50 (primary_expression -> literal .)


state 37

    (53) literal -> numeric_literal .

    SEMICOLON_SPEC  reduce using rule 53 (literal -> numeric_literal .)
    PLUS_OP         reduce using rule 53 (literal -> numeric_literal .)
    MINUS_OP        reduce using rule 53 (literal -> numeric_literal .)
    MULT_OP         reduce using rule 53 (literal -> numeric_literal .)
    DIV_OP          reduce using rule 53 (literal -> numeric_literal .)
    EQ_OP           reduce using rule 53 (literal -> numeric_literal .)
    NE_OP           reduce using rule 53 (literal -> numeric_literal .)
    RPAREN_SPEC     reduce using rule 53 (literal -> numeric_literal .)
    COLON           reduce using rule 53 (literal -> numeric_literal .)


state 38

    (54) literal -> string_literal .

    SEMICOLON_SPEC  reduce using rule 54 (literal -> string_literal .)
    PLUS_OP         reduce using rule 54 (literal -> string_literal .)
    MINUS_OP        reduce using rule 54 (literal -> string_literal .)
    MULT_OP         reduce using rule 54 (literal -> string_literal .)
    DIV_OP          reduce using rule 54 (literal -> string_literal .)
    EQ_OP           reduce using rule 54 (literal -> string_literal .)
    NE_OP           reduce using rule 54 (literal -> string_literal .)
    RPAREN_SPEC     reduce using rule 54 (literal -> string_literal .)
    COLON           reduce using rule 54 (literal -> string_literal .)


state 39

    (55) literal -> boolean_literal .

    SEMICOLON_SPEC  reduce using rule 55 (literal -> boolean_literal .)
    PLUS_OP         reduce using rule 55 (literal -> boolean_literal .)
    MINUS_OP        reduce using rule 55 (literal -> boolean_literal .)
    MULT_OP         reduce using rule 55 (literal -> boolean_literal .)
    DIV_OP          reduce using rule 55 (literal -> boolean_literal .)
    EQ_OP           reduce using rule 55 (literal -> boolean_literal .)
    NE_OP           reduce using rule 55 (literal -> boolean_literal .)
    RPAREN_SPEC     reduce using rule 55 (literal -> boolean_literal .)
    COLON           reduce using rule 55 (literal -> boolean_literal .)


state 40

    (56) literal -> null_literal .

    SEMICOLON_SPEC  reduce using rule 56 (literal -> null_literal .)
    PLUS_OP         reduce using rule 56 (literal -> null_literal .)
    MINUS_OP        reduce using rule 56 (literal -> null_literal .)
    MULT_OP         reduce using rule 56 (literal -> null_literal .)
    DIV_OP          reduce using rule 56 (literal -> null_literal .)
    EQ_OP           reduce using rule 56 (literal -> null_literal .)
    NE_OP           reduce using rule 56 (literal -> null_literal .)
    RPAREN_SPEC     reduce using rule 56 (literal -> null_literal .)
    COLON           reduce using rule 56 (literal -> null_literal .)


state 41

    (57) numeric_literal -> HEX_0 .

    SEMICOLON_SPEC  reduce using rule 57 (numeric_literal -> HEX_0 .)
    PLUS_OP         reduce using rule 57 (numeric_literal -> HEX_0 .)
    MINUS_OP        reduce using rule 57 (numeric_literal -> HEX_0 .)
    MULT_OP         reduce using rule 57 (numeric_literal -> HEX_0 .)
    DIV_OP          reduce using rule 57 (numeric_literal -> HEX_0 .)
    EQ_OP           reduce using rule 57 (numeric_literal -> HEX_0 .)
    NE_OP           reduce using rule 57 (numeric_literal -> HEX_0 .)
    RPAREN_SPEC     reduce using rule 57 (numeric_literal -> HEX_0 .)
    COLON           reduce using rule 57 (numeric_literal -> HEX_0 .)


state 42

    (58) numeric_literal -> HEX_1 .

    SEMICOLON_SPEC  reduce using rule 58 (numeric_literal -> HEX_1 .)
    PLUS_OP         reduce using rule 58 (numeric_literal -> HEX_1 .)
    MINUS_OP        reduce using rule 58 (numeric_literal -> HEX_1 .)
    MULT_OP         reduce using rule 58 (numeric_literal -> HEX_1 .)
    DIV_OP          reduce using rule 58 (numeric_literal -> HEX_1 .)
    EQ_OP           reduce using rule 58 (numeric_literal -> HEX_1 .)
    NE_OP           reduce using rule 58 (numeric_literal -> HEX_1 .)
    RPAREN_SPEC     reduce using rule 58 (numeric_literal -> HEX_1 .)
    COLON           reduce using rule 58 (numeric_literal -> HEX_1 .)


state 43

    (59) numeric_literal -> HEX_2 .

    SEMICOLON_SPEC  reduce using rule 59 (numeric_literal -> HEX_2 .)
    PLUS_OP         reduce using rule 59 (numeric_literal -> HEX_2 .)
    MINUS_OP        reduce using rule 59 (numeric_literal -> HEX_2 .)
    MULT_OP         reduce using rule 59 (numeric_literal -> HEX_2 .)
    DIV_OP          reduce using rule 59 (numeric_literal -> HEX_2 .)
    EQ_OP           reduce using rule 59 (numeric_literal -> HEX_2 .)
    NE_OP           reduce using rule 59 (numeric_literal -> HEX_2 .)
    RPAREN_SPEC     reduce using rule 59 (numeric_literal -> HEX_2 .)
    COLON           reduce using rule 59 (numeric_literal -> HEX_2 .)


state 44

    (60) numeric_literal -> HEX_3 .

    SEMICOLON_SPEC  reduce using rule 60 (numeric_literal -> HEX_3 .)
    PLUS_OP         reduce using rule 60 (numeric_literal -> HEX_3 .)
    MINUS_OP        reduce using rule 60 (numeric_literal -> HEX_3 .)
    MULT_OP         reduce using rule 60 (numeric_literal -> HEX_3 .)
    DIV_OP          reduce using rule 60 (numeric_literal -> HEX_3 .)
    EQ_OP           reduce using rule 60 (numeric_literal -> HEX_3 .)
    NE_OP           reduce using rule 60 (numeric_literal -> HEX_3 .)
    RPAREN_SPEC     reduce using rule 60 (numeric_literal -> HEX_3 .)
    COLON           reduce using rule 60 (numeric_literal -> HEX_3 .)


state 45

    (61) numeric_literal -> HEX_4 .

    SEMICOLON_SPEC  reduce using rule 61 (numeric_literal -> HEX_4 .)
    PLUS_OP         reduce using rule 61 (numeric_literal -> HEX_4 .)
    MINUS_OP        reduce using rule 61 (numeric_literal -> HEX_4 .)
    MULT_OP         reduce using rule 61 (numeric_literal -> HEX_4 .)
    DIV_OP          reduce using rule 61 (numeric_literal -> HEX_4 .)
    EQ_OP           reduce using rule 61 (numeric_literal -> HEX_4 .)
    NE_OP           reduce using rule 61 (numeric_literal -> HEX_4 .)
    RPAREN_SPEC     reduce using rule 61 (numeric_literal -> HEX_4 .)
    COLON           reduce using rule 61 (numeric_literal -> HEX_4 .)


state 46

    (62) numeric_literal -> HEX_5 .

    SEMICOLON_SPEC  reduce using rule 62 (numeric_literal -> HEX_5 .)
    PLUS_OP         reduce using rule 62 (numeric_literal -> HEX_5 .)
    MINUS_OP        reduce using rule 62 (numeric_literal -> HEX_5 .)
    MULT_OP         reduce using rule 62 (numeric_literal -> HEX_5 .)
    DIV_OP          reduce using rule 62 (numeric_literal -> HEX_5 .)
    EQ_OP           reduce using rule 62 (numeric_literal -> HEX_5 .)
    NE_OP           reduce using rule 62 (numeric_literal -> HEX_5 .)
    RPAREN_SPEC     reduce using rule 62 (numeric_literal -> HEX_5 .)
    COLON           reduce using rule 62 (numeric_literal -> HEX_5 .)


state 47

    (63) numeric_literal -> HEX_6 .

    SEMICOLON_SPEC  reduce using rule 63 (numeric_literal -> HEX_6 .)
    PLUS_OP         reduce using rule 63 (numeric_literal -> HEX_6 .)
    MINUS_OP        reduce using rule 63 (numeric_literal -> HEX_6 .)
    MULT_OP         reduce using rule 63 (numeric_literal -> HEX_6 .)
    DIV_OP          reduce using rule 63 (numeric_literal -> HEX_6 .)
    EQ_OP           reduce using rule 63 (numeric_literal -> HEX_6 .)
    NE_OP           reduce using rule 63 (numeric_literal -> HEX_6 .)
    RPAREN_SPEC     reduce using rule 63 (numeric_literal -> HEX_6 .)
    COLON           reduce using rule 63 (numeric_literal -> HEX_6 .)


state 48

    (64) numeric_literal -> HEX_7 .

    SEMICOLON_SPEC  reduce using rule 64 (numeric_literal -> HEX_7 .)
    PLUS_OP         reduce using rule 64 (numeric_literal -> HEX_7 .)
    MINUS_OP        reduce using rule 64 (numeric_literal -> HEX_7 .)
    MULT_OP         reduce using rule 64 (numeric_literal -> HEX_7 .)
    DIV_OP          reduce using rule 64 (numeric_literal -> HEX_7 .)
    EQ_OP           reduce using rule 64 (numeric_literal -> HEX_7 .)
    NE_OP           reduce using rule 64 (numeric_literal -> HEX_7 .)
    RPAREN_SPEC     reduce using rule 64 (numeric_literal -> HEX_7 .)
    COLON           reduce using rule 64 (numeric_literal -> HEX_7 .)


state 49

    (65) numeric_literal -> HEX_8 .

    SEMICOLON_SPEC  reduce using rule 65 (numeric_literal -> HEX_8 .)
    PLUS_OP         reduce using rule 65 (numeric_literal -> HEX_8 .)
    MINUS_OP        reduce using rule 65 (numeric_literal -> HEX_8 .)
    MULT_OP         reduce using rule 65 (numeric_literal -> HEX_8 .)
    DIV_OP          reduce using rule 65 (numeric_literal -> HEX_8 .)
    EQ_OP           reduce using rule 65 (numeric_literal -> HEX_8 .)
    NE_OP           reduce using rule 65 (numeric_literal -> HEX_8 .)
    RPAREN_SPEC     reduce using rule 65 (numeric_literal -> HEX_8 .)
    COLON           reduce using rule 65 (numeric_literal -> HEX_8 .)


state 50

    (66) numeric_literal -> HEX_9 .

    SEMICOLON_SPEC  reduce using rule 66 (numeric_literal -> HEX_9 .)
    PLUS_OP         reduce using rule 66 (numeric_literal -> HEX_9 .)
    MINUS_OP        reduce using rule 66 (numeric_literal -> HEX_9 .)
    MULT_OP         reduce using rule 66 (numeric_literal -> HEX_9 .)
    DIV_OP          reduce using rule 66 (numeric_literal -> HEX_9 .)
    EQ_OP           reduce using rule 66 (numeric_literal -> HEX_9 .)
    NE_OP           reduce using rule 66 (numeric_literal -> HEX_9 .)
    RPAREN_SPEC     reduce using rule 66 (numeric_literal -> HEX_9 .)
    COLON           reduce using rule 66 (numeric_literal -> HEX_9 .)


state 51

    (67) numeric_literal -> HEX_A .

    SEMICOLON_SPEC  reduce using rule 67 (numeric_literal -> HEX_A .)
    PLUS_OP         reduce using rule 67 (numeric_literal -> HEX_A .)
    MINUS_OP        reduce using rule 67 (numeric_literal -> HEX_A .)
    MULT_OP         reduce using rule 67 (numeric_literal -> HEX_A .)
    DIV_OP          reduce using rule 67 (numeric_literal -> HEX_A .)
    EQ_OP           reduce using rule 67 (numeric_literal -> HEX_A .)
    NE_OP           reduce using rule 67 (numeric_literal -> HEX_A .)
    RPAREN_SPEC     reduce using rule 67 (numeric_literal -> HEX_A .)
    COLON           reduce using rule 67 (numeric_literal -> HEX_A .)


state 52

    (68) numeric_literal -> HEX_B .

    SEMICOLON_SPEC  reduce using rule 68 (numeric_literal -> HEX_B .)
    PLUS_OP         reduce using rule 68 (numeric_literal -> HEX_B .)
    MINUS_OP        reduce using rule 68 (numeric_literal -> HEX_B .)
    MULT_OP         reduce using rule 68 (numeric_literal -> HEX_B .)
    DIV_OP          reduce using rule 68 (numeric_literal -> HEX_B .)
    EQ_OP           reduce using rule 68 (numeric_literal -> HEX_B .)
    NE_OP           reduce using rule 68 (numeric_literal -> HEX_B .)
    RPAREN_SPEC     reduce using rule 68 (numeric_literal -> HEX_B .)
    COLON           reduce using rule 68 (numeric_literal -> HEX_B .)


state 53

    (69) numeric_literal -> HEX_C .

    SEMICOLON_SPEC  reduce using rule 69 (numeric_literal -> HEX_C .)
    PLUS_OP         reduce using rule 69 (numeric_literal -> HEX_C .)
    MINUS_OP        reduce using rule 69 (numeric_literal -> HEX_C .)
    MULT_OP         reduce using rule 69 (numeric_literal -> HEX_C .)
    DIV_OP          reduce using rule 69 (numeric_literal -> HEX_C .)
    EQ_OP           reduce using rule 69 (numeric_literal -> HEX_C .)
    NE_OP           reduce using rule 69 (numeric_literal -> HEX_C .)
    RPAREN_SPEC     reduce using rule 69 (numeric_literal -> HEX_C .)
    COLON           reduce using rule 69 (numeric_literal -> HEX_C .)


state 54

    (70) numeric_literal -> HEX_D .

    SEMICOLON_SPEC  reduce using rule 70 (numeric_literal -> HEX_D .)
    PLUS_OP         reduce using rule 70 (numeric_literal -> HEX_D .)
    MINUS_OP        reduce using rule 70 (numeric_literal -> HEX_D .)
    MULT_OP         reduce using rule 70 (numeric_literal -> HEX_D .)
    DIV_OP          reduce using rule 70 (numeric_literal -> HEX_D .)
    EQ_OP           reduce using rule 70 (numeric_literal -> HEX_D .)
    NE_OP           reduce using rule 70 (numeric_literal -> HEX_D .)
    RPAREN_SPEC     reduce using rule 70 (numeric_literal -> HEX_D .)
    COLON           reduce using rule 70 (numeric_literal -> HEX_D .)


state 55

    (71) numeric_literal -> HEX_E .

    SEMICOLON_SPEC  reduce using rule 71 (numeric_literal -> HEX_E .)
    PLUS_OP         reduce using rule 71 (numeric_literal -> HEX_E .)
    MINUS_OP        reduce using rule 71 (numeric_literal -> HEX_E .)
    MULT_OP         reduce using rule 71 (numeric_literal -> HEX_E .)
    DIV_OP          reduce using rule 71 (numeric_literal -> HEX_E .)
    EQ_OP           reduce using rule 71 (numeric_literal -> HEX_E .)
    NE_OP           reduce using rule 71 (numeric_literal -> HEX_E .)
    RPAREN_SPEC     reduce using rule 71 (numeric_literal -> HEX_E .)
    COLON           reduce using rule 71 (numeric_literal -> HEX_E .)


state 56

    (72) numeric_literal -> HEX_F .

    SEMICOLON_SPEC  reduce using rule 72 (numeric_literal -> HEX_F .)
    PLUS_OP         reduce using rule 72 (numeric_literal -> HEX_F .)
    MINUS_OP        reduce using rule 72 (numeric_literal -> HEX_F .)
    MULT_OP         reduce using rule 72 (numeric_literal -> HEX_F .)
    DIV_OP          reduce using rule 72 (numeric_literal -> HEX_F .)
    EQ_OP           reduce using rule 72 (numeric_literal -> HEX_F .)
    NE_OP           reduce using rule 72 (numeric_literal -> HEX_F .)
    RPAREN_SPEC     reduce using rule 72 (numeric_literal -> HEX_F .)
    COLON           reduce using rule 72 (numeric_literal -> HEX_F .)


state 57

    (74) boolean_literal -> TRUE .

    SEMICOLON_SPEC  reduce using rule 74 (boolean_literal -> TRUE .)
    PLUS_OP         reduce using rule 74 (boolean_literal -> TRUE .)
    MINUS_OP        reduce using rule 74 (boolean_literal -> TRUE .)
    MULT_OP         reduce using rule 74 (boolean_literal -> TRUE .)
    DIV_OP          reduce using rule 74 (boolean_literal -> TRUE .)
    EQ_OP           reduce using rule 74 (boolean_literal -> TRUE .)
    NE_OP           reduce using rule 74 (boolean_literal -> TRUE .)
    RPAREN_SPEC     reduce using rule 74 (boolean_literal -> TRUE .)
    COLON           reduce using rule 74 (boolean_literal -> TRUE .)


state 58

    (75) boolean_literal -> FALSE .

    SEMICOLON_SPEC  reduce using rule 75 (boolean_literal -> FALSE .)
    PLUS_OP         reduce using rule 75 (boolean_literal -> FALSE .)
    MINUS_OP        reduce using rule 75 (boolean_literal -> FALSE .)
    MULT_OP         reduce using rule 75 (boolean_literal -> FALSE .)
    DIV_OP          reduce using rule 75 (boolean_literal -> FALSE .)
    EQ_OP           reduce using rule 75 (boolean_literal -> FALSE .)
    NE_OP           reduce using rule 75 (boolean_literal -> FALSE .)
    RPAREN_SPEC     reduce using rule 75 (boolean_literal -> FALSE .)
    COLON           reduce using rule 75 (boolean_literal -> FALSE .)


state 59

    (76) null_literal -> NULL .

    SEMICOLON_SPEC  reduce using rule 76 (null_literal -> NULL .)
    PLUS_OP         reduce using rule 76 (null_literal -> NULL .)
    MINUS_OP        reduce using rule 76 (null_literal -> NULL .)
    MULT_OP         reduce using rule 76 (null_literal -> NULL .)
    DIV_OP          reduce using rule 76 (null_literal -> NULL .)
    EQ_OP           reduce using rule 76 (null_literal -> NULL .)
    NE_OP           reduce using rule 76 (null_literal -> NULL .)
    RPAREN_SPEC     reduce using rule 76 (null_literal -> NULL .)
    COLON           reduce using rule 76 (null_literal -> NULL .)


state 60

    (3) statement_list -> statement_list statement .

    SEMICOLON_SPEC  reduce using rule 3 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 3 (statement_list -> statement_list statement .)
    IF              reduce using rule 3 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 3 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 3 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 3 (statement_list -> statement_list statement .)
    LBRACE_SPEC     reduce using rule 3 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 3 (statement_list -> statement_list statement .)
    ENTERO          reduce using rule 3 (statement_list -> statement_list statement .)
    FLOTANTE        reduce using rule 3 (statement_list -> statement_list statement .)
    STRING          reduce using rule 3 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 3 (statement_list -> statement_list statement .)
    ARRAY           reduce using rule 3 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 3 (statement_list -> statement_list statement .)
    PLUS_OP         reduce using rule 3 (statement_list -> statement_list statement .)
    MINUS_OP        reduce using rule 3 (statement_list -> statement_list statement .)
    LPAREN_SPEC     reduce using rule 3 (statement_list -> statement_list statement .)
    HEX_0           reduce using rule 3 (statement_list -> statement_list statement .)
    HEX_1           reduce using rule 3 (statement_list -> statement_list statement .)
    HEX_2           reduce using rule 3 (statement_list -> statement_list statement .)
    HEX_3           reduce using rule 3 (statement_list -> statement_list statement .)
    HEX_4           reduce using rule 3 (statement_list -> statement_list statement .)
    HEX_5           reduce using rule 3 (statement_list -> statement_list statement .)
    HEX_6           reduce using rule 3 (statement_list -> statement_list statement .)
    HEX_7           reduce using rule 3 (statement_list -> statement_list statement .)
    HEX_8           reduce using rule 3 (statement_list -> statement_list statement .)
    HEX_9           reduce using rule 3 (statement_list -> statement_list statement .)
    HEX_A           reduce using rule 3 (statement_list -> statement_list statement .)
    HEX_B           reduce using rule 3 (statement_list -> statement_list statement .)
    HEX_C           reduce using rule 3 (statement_list -> statement_list statement .)
    HEX_D           reduce using rule 3 (statement_list -> statement_list statement .)
    HEX_E           reduce using rule 3 (statement_list -> statement_list statement .)
    HEX_F           reduce using rule 3 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 3 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 3 (statement_list -> statement_list statement .)
    NULL            reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)
    RBRACE_SPEC     reduce using rule 3 (statement_list -> statement_list statement .)
    CASE            reduce using rule 3 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 3 (statement_list -> statement_list statement .)


state 61

    (13) declaration_statement -> type IDENTIFIER . SEMICOLON_SPEC
    (14) declaration_statement -> type IDENTIFIER . ASSIGN_OP expression SEMICOLON_SPEC

    SEMICOLON_SPEC  shift and go to state 83
    ASSIGN_OP       shift and go to state 84


state 62

    (41) assignment_expression -> IDENTIFIER ASSIGN_OP . expression
    (37) expression -> . assignment_expression
    (38) expression -> . binary_expression
    (39) expression -> . unary_expression
    (40) expression -> . primary_expression
    (41) assignment_expression -> . IDENTIFIER ASSIGN_OP expression
    (42) binary_expression -> . expression PLUS_OP expression
    (43) binary_expression -> . expression MINUS_OP expression
    (44) binary_expression -> . expression MULT_OP expression
    (45) binary_expression -> . expression DIV_OP expression
    (46) binary_expression -> . expression EQ_OP expression
    (47) binary_expression -> . expression NE_OP expression
    (48) unary_expression -> . PLUS_OP expression
    (49) unary_expression -> . MINUS_OP expression
    (50) primary_expression -> . literal
    (51) primary_expression -> . IDENTIFIER
    (52) primary_expression -> . LPAREN_SPEC expression RPAREN_SPEC
    (53) literal -> . numeric_literal
    (54) literal -> . string_literal
    (55) literal -> . boolean_literal
    (56) literal -> . null_literal
    (57) numeric_literal -> . HEX_0
    (58) numeric_literal -> . HEX_1
    (59) numeric_literal -> . HEX_2
    (60) numeric_literal -> . HEX_3
    (61) numeric_literal -> . HEX_4
    (62) numeric_literal -> . HEX_5
    (63) numeric_literal -> . HEX_6
    (64) numeric_literal -> . HEX_7
    (65) numeric_literal -> . HEX_8
    (66) numeric_literal -> . HEX_9
    (67) numeric_literal -> . HEX_A
    (68) numeric_literal -> . HEX_B
    (69) numeric_literal -> . HEX_C
    (70) numeric_literal -> . HEX_D
    (71) numeric_literal -> . HEX_E
    (72) numeric_literal -> . HEX_F
    (73) string_literal -> . STRING
    (74) boolean_literal -> . TRUE
    (75) boolean_literal -> . FALSE
    (76) null_literal -> . NULL

    IDENTIFIER      shift and go to state 14
    PLUS_OP         shift and go to state 34
    MINUS_OP        shift and go to state 35
    LPAREN_SPEC     shift and go to state 18
    HEX_0           shift and go to state 41
    HEX_1           shift and go to state 42
    HEX_2           shift and go to state 43
    HEX_3           shift and go to state 44
    HEX_4           shift and go to state 45
    HEX_5           shift and go to state 46
    HEX_6           shift and go to state 47
    HEX_7           shift and go to state 48
    HEX_8           shift and go to state 49
    HEX_9           shift and go to state 50
    HEX_A           shift and go to state 51
    HEX_B           shift and go to state 52
    HEX_C           shift and go to state 53
    HEX_D           shift and go to state 54
    HEX_E           shift and go to state 55
    HEX_F           shift and go to state 56
    STRING          shift and go to state 72
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NULL            shift and go to state 59

    expression                     shift and go to state 85
    assignment_expression          shift and go to state 30
    binary_expression              shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 33
    literal                        shift and go to state 36
    numeric_literal                shift and go to state 37
    string_literal                 shift and go to state 38
    boolean_literal                shift and go to state 39
    null_literal                   shift and go to state 40

state 63

    (20) expression_statement -> expression SEMICOLON_SPEC .

    SEMICOLON_SPEC  reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    PRINT           reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    IF              reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    WHILE           reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    RETURN          reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    BREAK           reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    LBRACE_SPEC     reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    SWITCH          reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    ENTERO          reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    FLOTANTE        reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    STRING          reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    CHAR            reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    ARRAY           reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    IDENTIFIER      reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    PLUS_OP         reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    MINUS_OP        reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    LPAREN_SPEC     reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    HEX_0           reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    HEX_1           reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    HEX_2           reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    HEX_3           reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    HEX_4           reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    HEX_5           reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    HEX_6           reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    HEX_7           reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    HEX_8           reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    HEX_9           reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    HEX_A           reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    HEX_B           reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    HEX_C           reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    HEX_D           reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    HEX_E           reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    HEX_F           reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    TRUE            reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    FALSE           reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    NULL            reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    $end            reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    RBRACE_SPEC     reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    ELSE            reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    CASE            reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)
    DEFAULT         reduce using rule 20 (expression_statement -> expression SEMICOLON_SPEC .)


state 64

    (42) binary_expression -> expression PLUS_OP . expression
    (37) expression -> . assignment_expression
    (38) expression -> . binary_expression
    (39) expression -> . unary_expression
    (40) expression -> . primary_expression
    (41) assignment_expression -> . IDENTIFIER ASSIGN_OP expression
    (42) binary_expression -> . expression PLUS_OP expression
    (43) binary_expression -> . expression MINUS_OP expression
    (44) binary_expression -> . expression MULT_OP expression
    (45) binary_expression -> . expression DIV_OP expression
    (46) binary_expression -> . expression EQ_OP expression
    (47) binary_expression -> . expression NE_OP expression
    (48) unary_expression -> . PLUS_OP expression
    (49) unary_expression -> . MINUS_OP expression
    (50) primary_expression -> . literal
    (51) primary_expression -> . IDENTIFIER
    (52) primary_expression -> . LPAREN_SPEC expression RPAREN_SPEC
    (53) literal -> . numeric_literal
    (54) literal -> . string_literal
    (55) literal -> . boolean_literal
    (56) literal -> . null_literal
    (57) numeric_literal -> . HEX_0
    (58) numeric_literal -> . HEX_1
    (59) numeric_literal -> . HEX_2
    (60) numeric_literal -> . HEX_3
    (61) numeric_literal -> . HEX_4
    (62) numeric_literal -> . HEX_5
    (63) numeric_literal -> . HEX_6
    (64) numeric_literal -> . HEX_7
    (65) numeric_literal -> . HEX_8
    (66) numeric_literal -> . HEX_9
    (67) numeric_literal -> . HEX_A
    (68) numeric_literal -> . HEX_B
    (69) numeric_literal -> . HEX_C
    (70) numeric_literal -> . HEX_D
    (71) numeric_literal -> . HEX_E
    (72) numeric_literal -> . HEX_F
    (73) string_literal -> . STRING
    (74) boolean_literal -> . TRUE
    (75) boolean_literal -> . FALSE
    (76) null_literal -> . NULL

    IDENTIFIER      shift and go to state 14
    PLUS_OP         shift and go to state 34
    MINUS_OP        shift and go to state 35
    LPAREN_SPEC     shift and go to state 18
    HEX_0           shift and go to state 41
    HEX_1           shift and go to state 42
    HEX_2           shift and go to state 43
    HEX_3           shift and go to state 44
    HEX_4           shift and go to state 45
    HEX_5           shift and go to state 46
    HEX_6           shift and go to state 47
    HEX_7           shift and go to state 48
    HEX_8           shift and go to state 49
    HEX_9           shift and go to state 50
    HEX_A           shift and go to state 51
    HEX_B           shift and go to state 52
    HEX_C           shift and go to state 53
    HEX_D           shift and go to state 54
    HEX_E           shift and go to state 55
    HEX_F           shift and go to state 56
    STRING          shift and go to state 72
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NULL            shift and go to state 59

    expression                     shift and go to state 86
    assignment_expression          shift and go to state 30
    binary_expression              shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 33
    literal                        shift and go to state 36
    numeric_literal                shift and go to state 37
    string_literal                 shift and go to state 38
    boolean_literal                shift and go to state 39
    null_literal                   shift and go to state 40

state 65

    (43) binary_expression -> expression MINUS_OP . expression
    (37) expression -> . assignment_expression
    (38) expression -> . binary_expression
    (39) expression -> . unary_expression
    (40) expression -> . primary_expression
    (41) assignment_expression -> . IDENTIFIER ASSIGN_OP expression
    (42) binary_expression -> . expression PLUS_OP expression
    (43) binary_expression -> . expression MINUS_OP expression
    (44) binary_expression -> . expression MULT_OP expression
    (45) binary_expression -> . expression DIV_OP expression
    (46) binary_expression -> . expression EQ_OP expression
    (47) binary_expression -> . expression NE_OP expression
    (48) unary_expression -> . PLUS_OP expression
    (49) unary_expression -> . MINUS_OP expression
    (50) primary_expression -> . literal
    (51) primary_expression -> . IDENTIFIER
    (52) primary_expression -> . LPAREN_SPEC expression RPAREN_SPEC
    (53) literal -> . numeric_literal
    (54) literal -> . string_literal
    (55) literal -> . boolean_literal
    (56) literal -> . null_literal
    (57) numeric_literal -> . HEX_0
    (58) numeric_literal -> . HEX_1
    (59) numeric_literal -> . HEX_2
    (60) numeric_literal -> . HEX_3
    (61) numeric_literal -> . HEX_4
    (62) numeric_literal -> . HEX_5
    (63) numeric_literal -> . HEX_6
    (64) numeric_literal -> . HEX_7
    (65) numeric_literal -> . HEX_8
    (66) numeric_literal -> . HEX_9
    (67) numeric_literal -> . HEX_A
    (68) numeric_literal -> . HEX_B
    (69) numeric_literal -> . HEX_C
    (70) numeric_literal -> . HEX_D
    (71) numeric_literal -> . HEX_E
    (72) numeric_literal -> . HEX_F
    (73) string_literal -> . STRING
    (74) boolean_literal -> . TRUE
    (75) boolean_literal -> . FALSE
    (76) null_literal -> . NULL

    IDENTIFIER      shift and go to state 14
    PLUS_OP         shift and go to state 34
    MINUS_OP        shift and go to state 35
    LPAREN_SPEC     shift and go to state 18
    HEX_0           shift and go to state 41
    HEX_1           shift and go to state 42
    HEX_2           shift and go to state 43
    HEX_3           shift and go to state 44
    HEX_4           shift and go to state 45
    HEX_5           shift and go to state 46
    HEX_6           shift and go to state 47
    HEX_7           shift and go to state 48
    HEX_8           shift and go to state 49
    HEX_9           shift and go to state 50
    HEX_A           shift and go to state 51
    HEX_B           shift and go to state 52
    HEX_C           shift and go to state 53
    HEX_D           shift and go to state 54
    HEX_E           shift and go to state 55
    HEX_F           shift and go to state 56
    STRING          shift and go to state 72
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NULL            shift and go to state 59

    expression                     shift and go to state 87
    assignment_expression          shift and go to state 30
    binary_expression              shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 33
    literal                        shift and go to state 36
    numeric_literal                shift and go to state 37
    string_literal                 shift and go to state 38
    boolean_literal                shift and go to state 39
    null_literal                   shift and go to state 40

state 66

    (44) binary_expression -> expression MULT_OP . expression
    (37) expression -> . assignment_expression
    (38) expression -> . binary_expression
    (39) expression -> . unary_expression
    (40) expression -> . primary_expression
    (41) assignment_expression -> . IDENTIFIER ASSIGN_OP expression
    (42) binary_expression -> . expression PLUS_OP expression
    (43) binary_expression -> . expression MINUS_OP expression
    (44) binary_expression -> . expression MULT_OP expression
    (45) binary_expression -> . expression DIV_OP expression
    (46) binary_expression -> . expression EQ_OP expression
    (47) binary_expression -> . expression NE_OP expression
    (48) unary_expression -> . PLUS_OP expression
    (49) unary_expression -> . MINUS_OP expression
    (50) primary_expression -> . literal
    (51) primary_expression -> . IDENTIFIER
    (52) primary_expression -> . LPAREN_SPEC expression RPAREN_SPEC
    (53) literal -> . numeric_literal
    (54) literal -> . string_literal
    (55) literal -> . boolean_literal
    (56) literal -> . null_literal
    (57) numeric_literal -> . HEX_0
    (58) numeric_literal -> . HEX_1
    (59) numeric_literal -> . HEX_2
    (60) numeric_literal -> . HEX_3
    (61) numeric_literal -> . HEX_4
    (62) numeric_literal -> . HEX_5
    (63) numeric_literal -> . HEX_6
    (64) numeric_literal -> . HEX_7
    (65) numeric_literal -> . HEX_8
    (66) numeric_literal -> . HEX_9
    (67) numeric_literal -> . HEX_A
    (68) numeric_literal -> . HEX_B
    (69) numeric_literal -> . HEX_C
    (70) numeric_literal -> . HEX_D
    (71) numeric_literal -> . HEX_E
    (72) numeric_literal -> . HEX_F
    (73) string_literal -> . STRING
    (74) boolean_literal -> . TRUE
    (75) boolean_literal -> . FALSE
    (76) null_literal -> . NULL

    IDENTIFIER      shift and go to state 14
    PLUS_OP         shift and go to state 34
    MINUS_OP        shift and go to state 35
    LPAREN_SPEC     shift and go to state 18
    HEX_0           shift and go to state 41
    HEX_1           shift and go to state 42
    HEX_2           shift and go to state 43
    HEX_3           shift and go to state 44
    HEX_4           shift and go to state 45
    HEX_5           shift and go to state 46
    HEX_6           shift and go to state 47
    HEX_7           shift and go to state 48
    HEX_8           shift and go to state 49
    HEX_9           shift and go to state 50
    HEX_A           shift and go to state 51
    HEX_B           shift and go to state 52
    HEX_C           shift and go to state 53
    HEX_D           shift and go to state 54
    HEX_E           shift and go to state 55
    HEX_F           shift and go to state 56
    STRING          shift and go to state 72
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NULL            shift and go to state 59

    expression                     shift and go to state 88
    assignment_expression          shift and go to state 30
    binary_expression              shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 33
    literal                        shift and go to state 36
    numeric_literal                shift and go to state 37
    string_literal                 shift and go to state 38
    boolean_literal                shift and go to state 39
    null_literal                   shift and go to state 40

state 67

    (45) binary_expression -> expression DIV_OP . expression
    (37) expression -> . assignment_expression
    (38) expression -> . binary_expression
    (39) expression -> . unary_expression
    (40) expression -> . primary_expression
    (41) assignment_expression -> . IDENTIFIER ASSIGN_OP expression
    (42) binary_expression -> . expression PLUS_OP expression
    (43) binary_expression -> . expression MINUS_OP expression
    (44) binary_expression -> . expression MULT_OP expression
    (45) binary_expression -> . expression DIV_OP expression
    (46) binary_expression -> . expression EQ_OP expression
    (47) binary_expression -> . expression NE_OP expression
    (48) unary_expression -> . PLUS_OP expression
    (49) unary_expression -> . MINUS_OP expression
    (50) primary_expression -> . literal
    (51) primary_expression -> . IDENTIFIER
    (52) primary_expression -> . LPAREN_SPEC expression RPAREN_SPEC
    (53) literal -> . numeric_literal
    (54) literal -> . string_literal
    (55) literal -> . boolean_literal
    (56) literal -> . null_literal
    (57) numeric_literal -> . HEX_0
    (58) numeric_literal -> . HEX_1
    (59) numeric_literal -> . HEX_2
    (60) numeric_literal -> . HEX_3
    (61) numeric_literal -> . HEX_4
    (62) numeric_literal -> . HEX_5
    (63) numeric_literal -> . HEX_6
    (64) numeric_literal -> . HEX_7
    (65) numeric_literal -> . HEX_8
    (66) numeric_literal -> . HEX_9
    (67) numeric_literal -> . HEX_A
    (68) numeric_literal -> . HEX_B
    (69) numeric_literal -> . HEX_C
    (70) numeric_literal -> . HEX_D
    (71) numeric_literal -> . HEX_E
    (72) numeric_literal -> . HEX_F
    (73) string_literal -> . STRING
    (74) boolean_literal -> . TRUE
    (75) boolean_literal -> . FALSE
    (76) null_literal -> . NULL

    IDENTIFIER      shift and go to state 14
    PLUS_OP         shift and go to state 34
    MINUS_OP        shift and go to state 35
    LPAREN_SPEC     shift and go to state 18
    HEX_0           shift and go to state 41
    HEX_1           shift and go to state 42
    HEX_2           shift and go to state 43
    HEX_3           shift and go to state 44
    HEX_4           shift and go to state 45
    HEX_5           shift and go to state 46
    HEX_6           shift and go to state 47
    HEX_7           shift and go to state 48
    HEX_8           shift and go to state 49
    HEX_9           shift and go to state 50
    HEX_A           shift and go to state 51
    HEX_B           shift and go to state 52
    HEX_C           shift and go to state 53
    HEX_D           shift and go to state 54
    HEX_E           shift and go to state 55
    HEX_F           shift and go to state 56
    STRING          shift and go to state 72
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NULL            shift and go to state 59

    expression                     shift and go to state 89
    assignment_expression          shift and go to state 30
    binary_expression              shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 33
    literal                        shift and go to state 36
    numeric_literal                shift and go to state 37
    string_literal                 shift and go to state 38
    boolean_literal                shift and go to state 39
    null_literal                   shift and go to state 40

state 68

    (46) binary_expression -> expression EQ_OP . expression
    (37) expression -> . assignment_expression
    (38) expression -> . binary_expression
    (39) expression -> . unary_expression
    (40) expression -> . primary_expression
    (41) assignment_expression -> . IDENTIFIER ASSIGN_OP expression
    (42) binary_expression -> . expression PLUS_OP expression
    (43) binary_expression -> . expression MINUS_OP expression
    (44) binary_expression -> . expression MULT_OP expression
    (45) binary_expression -> . expression DIV_OP expression
    (46) binary_expression -> . expression EQ_OP expression
    (47) binary_expression -> . expression NE_OP expression
    (48) unary_expression -> . PLUS_OP expression
    (49) unary_expression -> . MINUS_OP expression
    (50) primary_expression -> . literal
    (51) primary_expression -> . IDENTIFIER
    (52) primary_expression -> . LPAREN_SPEC expression RPAREN_SPEC
    (53) literal -> . numeric_literal
    (54) literal -> . string_literal
    (55) literal -> . boolean_literal
    (56) literal -> . null_literal
    (57) numeric_literal -> . HEX_0
    (58) numeric_literal -> . HEX_1
    (59) numeric_literal -> . HEX_2
    (60) numeric_literal -> . HEX_3
    (61) numeric_literal -> . HEX_4
    (62) numeric_literal -> . HEX_5
    (63) numeric_literal -> . HEX_6
    (64) numeric_literal -> . HEX_7
    (65) numeric_literal -> . HEX_8
    (66) numeric_literal -> . HEX_9
    (67) numeric_literal -> . HEX_A
    (68) numeric_literal -> . HEX_B
    (69) numeric_literal -> . HEX_C
    (70) numeric_literal -> . HEX_D
    (71) numeric_literal -> . HEX_E
    (72) numeric_literal -> . HEX_F
    (73) string_literal -> . STRING
    (74) boolean_literal -> . TRUE
    (75) boolean_literal -> . FALSE
    (76) null_literal -> . NULL

    IDENTIFIER      shift and go to state 14
    PLUS_OP         shift and go to state 34
    MINUS_OP        shift and go to state 35
    LPAREN_SPEC     shift and go to state 18
    HEX_0           shift and go to state 41
    HEX_1           shift and go to state 42
    HEX_2           shift and go to state 43
    HEX_3           shift and go to state 44
    HEX_4           shift and go to state 45
    HEX_5           shift and go to state 46
    HEX_6           shift and go to state 47
    HEX_7           shift and go to state 48
    HEX_8           shift and go to state 49
    HEX_9           shift and go to state 50
    HEX_A           shift and go to state 51
    HEX_B           shift and go to state 52
    HEX_C           shift and go to state 53
    HEX_D           shift and go to state 54
    HEX_E           shift and go to state 55
    HEX_F           shift and go to state 56
    STRING          shift and go to state 72
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NULL            shift and go to state 59

    expression                     shift and go to state 90
    assignment_expression          shift and go to state 30
    binary_expression              shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 33
    literal                        shift and go to state 36
    numeric_literal                shift and go to state 37
    string_literal                 shift and go to state 38
    boolean_literal                shift and go to state 39
    null_literal                   shift and go to state 40

state 69

    (47) binary_expression -> expression NE_OP . expression
    (37) expression -> . assignment_expression
    (38) expression -> . binary_expression
    (39) expression -> . unary_expression
    (40) expression -> . primary_expression
    (41) assignment_expression -> . IDENTIFIER ASSIGN_OP expression
    (42) binary_expression -> . expression PLUS_OP expression
    (43) binary_expression -> . expression MINUS_OP expression
    (44) binary_expression -> . expression MULT_OP expression
    (45) binary_expression -> . expression DIV_OP expression
    (46) binary_expression -> . expression EQ_OP expression
    (47) binary_expression -> . expression NE_OP expression
    (48) unary_expression -> . PLUS_OP expression
    (49) unary_expression -> . MINUS_OP expression
    (50) primary_expression -> . literal
    (51) primary_expression -> . IDENTIFIER
    (52) primary_expression -> . LPAREN_SPEC expression RPAREN_SPEC
    (53) literal -> . numeric_literal
    (54) literal -> . string_literal
    (55) literal -> . boolean_literal
    (56) literal -> . null_literal
    (57) numeric_literal -> . HEX_0
    (58) numeric_literal -> . HEX_1
    (59) numeric_literal -> . HEX_2
    (60) numeric_literal -> . HEX_3
    (61) numeric_literal -> . HEX_4
    (62) numeric_literal -> . HEX_5
    (63) numeric_literal -> . HEX_6
    (64) numeric_literal -> . HEX_7
    (65) numeric_literal -> . HEX_8
    (66) numeric_literal -> . HEX_9
    (67) numeric_literal -> . HEX_A
    (68) numeric_literal -> . HEX_B
    (69) numeric_literal -> . HEX_C
    (70) numeric_literal -> . HEX_D
    (71) numeric_literal -> . HEX_E
    (72) numeric_literal -> . HEX_F
    (73) string_literal -> . STRING
    (74) boolean_literal -> . TRUE
    (75) boolean_literal -> . FALSE
    (76) null_literal -> . NULL

    IDENTIFIER      shift and go to state 14
    PLUS_OP         shift and go to state 34
    MINUS_OP        shift and go to state 35
    LPAREN_SPEC     shift and go to state 18
    HEX_0           shift and go to state 41
    HEX_1           shift and go to state 42
    HEX_2           shift and go to state 43
    HEX_3           shift and go to state 44
    HEX_4           shift and go to state 45
    HEX_5           shift and go to state 46
    HEX_6           shift and go to state 47
    HEX_7           shift and go to state 48
    HEX_8           shift and go to state 49
    HEX_9           shift and go to state 50
    HEX_A           shift and go to state 51
    HEX_B           shift and go to state 52
    HEX_C           shift and go to state 53
    HEX_D           shift and go to state 54
    HEX_E           shift and go to state 55
    HEX_F           shift and go to state 56
    STRING          shift and go to state 72
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NULL            shift and go to state 59

    expression                     shift and go to state 91
    assignment_expression          shift and go to state 30
    binary_expression              shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 33
    literal                        shift and go to state 36
    numeric_literal                shift and go to state 37
    string_literal                 shift and go to state 38
    boolean_literal                shift and go to state 39
    null_literal                   shift and go to state 40

state 70

    (22) print_statement -> PRINT LPAREN_SPEC . expression RPAREN_SPEC SEMICOLON_SPEC
    (37) expression -> . assignment_expression
    (38) expression -> . binary_expression
    (39) expression -> . unary_expression
    (40) expression -> . primary_expression
    (41) assignment_expression -> . IDENTIFIER ASSIGN_OP expression
    (42) binary_expression -> . expression PLUS_OP expression
    (43) binary_expression -> . expression MINUS_OP expression
    (44) binary_expression -> . expression MULT_OP expression
    (45) binary_expression -> . expression DIV_OP expression
    (46) binary_expression -> . expression EQ_OP expression
    (47) binary_expression -> . expression NE_OP expression
    (48) unary_expression -> . PLUS_OP expression
    (49) unary_expression -> . MINUS_OP expression
    (50) primary_expression -> . literal
    (51) primary_expression -> . IDENTIFIER
    (52) primary_expression -> . LPAREN_SPEC expression RPAREN_SPEC
    (53) literal -> . numeric_literal
    (54) literal -> . string_literal
    (55) literal -> . boolean_literal
    (56) literal -> . null_literal
    (57) numeric_literal -> . HEX_0
    (58) numeric_literal -> . HEX_1
    (59) numeric_literal -> . HEX_2
    (60) numeric_literal -> . HEX_3
    (61) numeric_literal -> . HEX_4
    (62) numeric_literal -> . HEX_5
    (63) numeric_literal -> . HEX_6
    (64) numeric_literal -> . HEX_7
    (65) numeric_literal -> . HEX_8
    (66) numeric_literal -> . HEX_9
    (67) numeric_literal -> . HEX_A
    (68) numeric_literal -> . HEX_B
    (69) numeric_literal -> . HEX_C
    (70) numeric_literal -> . HEX_D
    (71) numeric_literal -> . HEX_E
    (72) numeric_literal -> . HEX_F
    (73) string_literal -> . STRING
    (74) boolean_literal -> . TRUE
    (75) boolean_literal -> . FALSE
    (76) null_literal -> . NULL

    IDENTIFIER      shift and go to state 14
    PLUS_OP         shift and go to state 34
    MINUS_OP        shift and go to state 35
    LPAREN_SPEC     shift and go to state 18
    HEX_0           shift and go to state 41
    HEX_1           shift and go to state 42
    HEX_2           shift and go to state 43
    HEX_3           shift and go to state 44
    HEX_4           shift and go to state 45
    HEX_5           shift and go to state 46
    HEX_6           shift and go to state 47
    HEX_7           shift and go to state 48
    HEX_8           shift and go to state 49
    HEX_9           shift and go to state 50
    HEX_A           shift and go to state 51
    HEX_B           shift and go to state 52
    HEX_C           shift and go to state 53
    HEX_D           shift and go to state 54
    HEX_E           shift and go to state 55
    HEX_F           shift and go to state 56
    STRING          shift and go to state 72
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NULL            shift and go to state 59

    expression                     shift and go to state 92
    assignment_expression          shift and go to state 30
    binary_expression              shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 33
    literal                        shift and go to state 36
    numeric_literal                shift and go to state 37
    string_literal                 shift and go to state 38
    boolean_literal                shift and go to state 39
    null_literal                   shift and go to state 40

state 71

    (52) primary_expression -> LPAREN_SPEC expression . RPAREN_SPEC
    (42) binary_expression -> expression . PLUS_OP expression
    (43) binary_expression -> expression . MINUS_OP expression
    (44) binary_expression -> expression . MULT_OP expression
    (45) binary_expression -> expression . DIV_OP expression
    (46) binary_expression -> expression . EQ_OP expression
    (47) binary_expression -> expression . NE_OP expression

    RPAREN_SPEC     shift and go to state 93
    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 65
    MULT_OP         shift and go to state 66
    DIV_OP          shift and go to state 67
    EQ_OP           shift and go to state 68
    NE_OP           shift and go to state 69


state 72

    (73) string_literal -> STRING .

    RPAREN_SPEC     reduce using rule 73 (string_literal -> STRING .)
    PLUS_OP         reduce using rule 73 (string_literal -> STRING .)
    MINUS_OP        reduce using rule 73 (string_literal -> STRING .)
    MULT_OP         reduce using rule 73 (string_literal -> STRING .)
    DIV_OP          reduce using rule 73 (string_literal -> STRING .)
    EQ_OP           reduce using rule 73 (string_literal -> STRING .)
    NE_OP           reduce using rule 73 (string_literal -> STRING .)
    SEMICOLON_SPEC  reduce using rule 73 (string_literal -> STRING .)
    COLON           reduce using rule 73 (string_literal -> STRING .)


state 73

    (23) if_statement -> IF LPAREN_SPEC . expression RPAREN_SPEC statement
    (24) if_statement -> IF LPAREN_SPEC . expression RPAREN_SPEC statement ELSE statement
    (37) expression -> . assignment_expression
    (38) expression -> . binary_expression
    (39) expression -> . unary_expression
    (40) expression -> . primary_expression
    (41) assignment_expression -> . IDENTIFIER ASSIGN_OP expression
    (42) binary_expression -> . expression PLUS_OP expression
    (43) binary_expression -> . expression MINUS_OP expression
    (44) binary_expression -> . expression MULT_OP expression
    (45) binary_expression -> . expression DIV_OP expression
    (46) binary_expression -> . expression EQ_OP expression
    (47) binary_expression -> . expression NE_OP expression
    (48) unary_expression -> . PLUS_OP expression
    (49) unary_expression -> . MINUS_OP expression
    (50) primary_expression -> . literal
    (51) primary_expression -> . IDENTIFIER
    (52) primary_expression -> . LPAREN_SPEC expression RPAREN_SPEC
    (53) literal -> . numeric_literal
    (54) literal -> . string_literal
    (55) literal -> . boolean_literal
    (56) literal -> . null_literal
    (57) numeric_literal -> . HEX_0
    (58) numeric_literal -> . HEX_1
    (59) numeric_literal -> . HEX_2
    (60) numeric_literal -> . HEX_3
    (61) numeric_literal -> . HEX_4
    (62) numeric_literal -> . HEX_5
    (63) numeric_literal -> . HEX_6
    (64) numeric_literal -> . HEX_7
    (65) numeric_literal -> . HEX_8
    (66) numeric_literal -> . HEX_9
    (67) numeric_literal -> . HEX_A
    (68) numeric_literal -> . HEX_B
    (69) numeric_literal -> . HEX_C
    (70) numeric_literal -> . HEX_D
    (71) numeric_literal -> . HEX_E
    (72) numeric_literal -> . HEX_F
    (73) string_literal -> . STRING
    (74) boolean_literal -> . TRUE
    (75) boolean_literal -> . FALSE
    (76) null_literal -> . NULL

    IDENTIFIER      shift and go to state 14
    PLUS_OP         shift and go to state 34
    MINUS_OP        shift and go to state 35
    LPAREN_SPEC     shift and go to state 18
    HEX_0           shift and go to state 41
    HEX_1           shift and go to state 42
    HEX_2           shift and go to state 43
    HEX_3           shift and go to state 44
    HEX_4           shift and go to state 45
    HEX_5           shift and go to state 46
    HEX_6           shift and go to state 47
    HEX_7           shift and go to state 48
    HEX_8           shift and go to state 49
    HEX_9           shift and go to state 50
    HEX_A           shift and go to state 51
    HEX_B           shift and go to state 52
    HEX_C           shift and go to state 53
    HEX_D           shift and go to state 54
    HEX_E           shift and go to state 55
    HEX_F           shift and go to state 56
    STRING          shift and go to state 72
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NULL            shift and go to state 59

    expression                     shift and go to state 94
    assignment_expression          shift and go to state 30
    binary_expression              shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 33
    literal                        shift and go to state 36
    numeric_literal                shift and go to state 37
    string_literal                 shift and go to state 38
    boolean_literal                shift and go to state 39
    null_literal                   shift and go to state 40

state 74

    (25) while_statement -> WHILE LPAREN_SPEC . expression RPAREN_SPEC statement
    (37) expression -> . assignment_expression
    (38) expression -> . binary_expression
    (39) expression -> . unary_expression
    (40) expression -> . primary_expression
    (41) assignment_expression -> . IDENTIFIER ASSIGN_OP expression
    (42) binary_expression -> . expression PLUS_OP expression
    (43) binary_expression -> . expression MINUS_OP expression
    (44) binary_expression -> . expression MULT_OP expression
    (45) binary_expression -> . expression DIV_OP expression
    (46) binary_expression -> . expression EQ_OP expression
    (47) binary_expression -> . expression NE_OP expression
    (48) unary_expression -> . PLUS_OP expression
    (49) unary_expression -> . MINUS_OP expression
    (50) primary_expression -> . literal
    (51) primary_expression -> . IDENTIFIER
    (52) primary_expression -> . LPAREN_SPEC expression RPAREN_SPEC
    (53) literal -> . numeric_literal
    (54) literal -> . string_literal
    (55) literal -> . boolean_literal
    (56) literal -> . null_literal
    (57) numeric_literal -> . HEX_0
    (58) numeric_literal -> . HEX_1
    (59) numeric_literal -> . HEX_2
    (60) numeric_literal -> . HEX_3
    (61) numeric_literal -> . HEX_4
    (62) numeric_literal -> . HEX_5
    (63) numeric_literal -> . HEX_6
    (64) numeric_literal -> . HEX_7
    (65) numeric_literal -> . HEX_8
    (66) numeric_literal -> . HEX_9
    (67) numeric_literal -> . HEX_A
    (68) numeric_literal -> . HEX_B
    (69) numeric_literal -> . HEX_C
    (70) numeric_literal -> . HEX_D
    (71) numeric_literal -> . HEX_E
    (72) numeric_literal -> . HEX_F
    (73) string_literal -> . STRING
    (74) boolean_literal -> . TRUE
    (75) boolean_literal -> . FALSE
    (76) null_literal -> . NULL

    IDENTIFIER      shift and go to state 14
    PLUS_OP         shift and go to state 34
    MINUS_OP        shift and go to state 35
    LPAREN_SPEC     shift and go to state 18
    HEX_0           shift and go to state 41
    HEX_1           shift and go to state 42
    HEX_2           shift and go to state 43
    HEX_3           shift and go to state 44
    HEX_4           shift and go to state 45
    HEX_5           shift and go to state 46
    HEX_6           shift and go to state 47
    HEX_7           shift and go to state 48
    HEX_8           shift and go to state 49
    HEX_9           shift and go to state 50
    HEX_A           shift and go to state 51
    HEX_B           shift and go to state 52
    HEX_C           shift and go to state 53
    HEX_D           shift and go to state 54
    HEX_E           shift and go to state 55
    HEX_F           shift and go to state 56
    STRING          shift and go to state 72
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NULL            shift and go to state 59

    expression                     shift and go to state 95
    assignment_expression          shift and go to state 30
    binary_expression              shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 33
    literal                        shift and go to state 36
    numeric_literal                shift and go to state 37
    string_literal                 shift and go to state 38
    boolean_literal                shift and go to state 39
    null_literal                   shift and go to state 40

state 75

    (26) return_statement -> RETURN expression . SEMICOLON_SPEC
    (42) binary_expression -> expression . PLUS_OP expression
    (43) binary_expression -> expression . MINUS_OP expression
    (44) binary_expression -> expression . MULT_OP expression
    (45) binary_expression -> expression . DIV_OP expression
    (46) binary_expression -> expression . EQ_OP expression
    (47) binary_expression -> expression . NE_OP expression

    SEMICOLON_SPEC  shift and go to state 96
    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 65
    MULT_OP         shift and go to state 66
    DIV_OP          shift and go to state 67
    EQ_OP           shift and go to state 68
    NE_OP           shift and go to state 69


state 76

    (27) return_statement -> RETURN SEMICOLON_SPEC .

    SEMICOLON_SPEC  reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    PRINT           reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    IF              reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    WHILE           reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    RETURN          reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    BREAK           reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    LBRACE_SPEC     reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    SWITCH          reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    ENTERO          reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    FLOTANTE        reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    STRING          reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    CHAR            reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    ARRAY           reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    IDENTIFIER      reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    PLUS_OP         reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    MINUS_OP        reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    LPAREN_SPEC     reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    HEX_0           reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    HEX_1           reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    HEX_2           reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    HEX_3           reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    HEX_4           reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    HEX_5           reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    HEX_6           reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    HEX_7           reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    HEX_8           reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    HEX_9           reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    HEX_A           reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    HEX_B           reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    HEX_C           reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    HEX_D           reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    HEX_E           reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    HEX_F           reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    TRUE            reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    FALSE           reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    NULL            reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    $end            reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    RBRACE_SPEC     reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    ELSE            reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    CASE            reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)
    DEFAULT         reduce using rule 27 (return_statement -> RETURN SEMICOLON_SPEC .)


state 77

    (28) break_statement -> BREAK SEMICOLON_SPEC .

    SEMICOLON_SPEC  reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    PRINT           reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    IF              reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    WHILE           reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    RETURN          reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    BREAK           reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    LBRACE_SPEC     reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    SWITCH          reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    ENTERO          reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    FLOTANTE        reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    STRING          reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    CHAR            reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    ARRAY           reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    IDENTIFIER      reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    PLUS_OP         reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    MINUS_OP        reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    LPAREN_SPEC     reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    HEX_0           reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    HEX_1           reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    HEX_2           reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    HEX_3           reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    HEX_4           reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    HEX_5           reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    HEX_6           reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    HEX_7           reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    HEX_8           reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    HEX_9           reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    HEX_A           reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    HEX_B           reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    HEX_C           reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    HEX_D           reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    HEX_E           reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    HEX_F           reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    TRUE            reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    FALSE           reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    NULL            reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    $end            reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    RBRACE_SPEC     reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    ELSE            reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    CASE            reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)
    DEFAULT         reduce using rule 28 (break_statement -> BREAK SEMICOLON_SPEC .)


state 78

    (29) block_statement -> LBRACE_SPEC statement_list . RBRACE_SPEC
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . expression_statement
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . while_statement
    (9) statement -> . return_statement
    (10) statement -> . break_statement
    (11) statement -> . block_statement
    (12) statement -> . switch_statement
    (13) declaration_statement -> . type IDENTIFIER SEMICOLON_SPEC
    (14) declaration_statement -> . type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC
    (20) expression_statement -> . expression SEMICOLON_SPEC
    (21) expression_statement -> . SEMICOLON_SPEC
    (22) print_statement -> . PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC
    (23) if_statement -> . IF LPAREN_SPEC expression RPAREN_SPEC statement
    (24) if_statement -> . IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement
    (25) while_statement -> . WHILE LPAREN_SPEC expression RPAREN_SPEC statement
    (26) return_statement -> . RETURN expression SEMICOLON_SPEC
    (27) return_statement -> . RETURN SEMICOLON_SPEC
    (28) break_statement -> . BREAK SEMICOLON_SPEC
    (29) block_statement -> . LBRACE_SPEC statement_list RBRACE_SPEC
    (30) block_statement -> . LBRACE_SPEC RBRACE_SPEC
    (31) switch_statement -> . SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC
    (32) switch_statement -> . SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC
    (15) type -> . ENTERO
    (16) type -> . FLOTANTE
    (17) type -> . STRING
    (18) type -> . CHAR
    (19) type -> . ARRAY
    (37) expression -> . assignment_expression
    (38) expression -> . binary_expression
    (39) expression -> . unary_expression
    (40) expression -> . primary_expression
    (41) assignment_expression -> . IDENTIFIER ASSIGN_OP expression
    (42) binary_expression -> . expression PLUS_OP expression
    (43) binary_expression -> . expression MINUS_OP expression
    (44) binary_expression -> . expression MULT_OP expression
    (45) binary_expression -> . expression DIV_OP expression
    (46) binary_expression -> . expression EQ_OP expression
    (47) binary_expression -> . expression NE_OP expression
    (48) unary_expression -> . PLUS_OP expression
    (49) unary_expression -> . MINUS_OP expression
    (50) primary_expression -> . literal
    (51) primary_expression -> . IDENTIFIER
    (52) primary_expression -> . LPAREN_SPEC expression RPAREN_SPEC
    (53) literal -> . numeric_literal
    (54) literal -> . string_literal
    (55) literal -> . boolean_literal
    (56) literal -> . null_literal
    (57) numeric_literal -> . HEX_0
    (58) numeric_literal -> . HEX_1
    (59) numeric_literal -> . HEX_2
    (60) numeric_literal -> . HEX_3
    (61) numeric_literal -> . HEX_4
    (62) numeric_literal -> . HEX_5
    (63) numeric_literal -> . HEX_6
    (64) numeric_literal -> . HEX_7
    (65) numeric_literal -> . HEX_8
    (66) numeric_literal -> . HEX_9
    (67) numeric_literal -> . HEX_A
    (68) numeric_literal -> . HEX_B
    (69) numeric_literal -> . HEX_C
    (70) numeric_literal -> . HEX_D
    (71) numeric_literal -> . HEX_E
    (72) numeric_literal -> . HEX_F
    (73) string_literal -> . STRING
    (74) boolean_literal -> . TRUE
    (75) boolean_literal -> . FALSE
    (76) null_literal -> . NULL

    RBRACE_SPEC     shift and go to state 97
    SEMICOLON_SPEC  shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    RETURN          shift and go to state 21
    BREAK           shift and go to state 22
    LBRACE_SPEC     shift and go to state 23
    SWITCH          shift and go to state 24
    ENTERO          shift and go to state 25
    FLOTANTE        shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    ARRAY           shift and go to state 29
    IDENTIFIER      shift and go to state 14
    PLUS_OP         shift and go to state 34
    MINUS_OP        shift and go to state 35
    LPAREN_SPEC     shift and go to state 18
    HEX_0           shift and go to state 41
    HEX_1           shift and go to state 42
    HEX_2           shift and go to state 43
    HEX_3           shift and go to state 44
    HEX_4           shift and go to state 45
    HEX_5           shift and go to state 46
    HEX_6           shift and go to state 47
    HEX_7           shift and go to state 48
    HEX_8           shift and go to state 49
    HEX_9           shift and go to state 50
    HEX_A           shift and go to state 51
    HEX_B           shift and go to state 52
    HEX_C           shift and go to state 53
    HEX_D           shift and go to state 54
    HEX_E           shift and go to state 55
    HEX_F           shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NULL            shift and go to state 59

    statement                      shift and go to state 60
    declaration_statement          shift and go to state 4
    expression_statement           shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8
    return_statement               shift and go to state 9
    break_statement                shift and go to state 10
    block_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    type                           shift and go to state 13
    expression                     shift and go to state 16
    assignment_expression          shift and go to state 30
    binary_expression              shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 33
    literal                        shift and go to state 36
    numeric_literal                shift and go to state 37
    string_literal                 shift and go to state 38
    boolean_literal                shift and go to state 39
    null_literal                   shift and go to state 40

state 79

    (30) block_statement -> LBRACE_SPEC RBRACE_SPEC .

    SEMICOLON_SPEC  reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    PRINT           reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    IF              reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    WHILE           reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    RETURN          reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    BREAK           reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    LBRACE_SPEC     reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    SWITCH          reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    ENTERO          reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    FLOTANTE        reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    STRING          reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    CHAR            reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    ARRAY           reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    IDENTIFIER      reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    PLUS_OP         reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    MINUS_OP        reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    LPAREN_SPEC     reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    HEX_0           reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    HEX_1           reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    HEX_2           reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    HEX_3           reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    HEX_4           reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    HEX_5           reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    HEX_6           reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    HEX_7           reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    HEX_8           reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    HEX_9           reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    HEX_A           reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    HEX_B           reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    HEX_C           reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    HEX_D           reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    HEX_E           reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    HEX_F           reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    TRUE            reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    FALSE           reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    NULL            reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    $end            reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    RBRACE_SPEC     reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    ELSE            reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    CASE            reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)
    DEFAULT         reduce using rule 30 (block_statement -> LBRACE_SPEC RBRACE_SPEC .)


state 80

    (31) switch_statement -> SWITCH LPAREN_SPEC . expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC
    (32) switch_statement -> SWITCH LPAREN_SPEC . expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC
    (37) expression -> . assignment_expression
    (38) expression -> . binary_expression
    (39) expression -> . unary_expression
    (40) expression -> . primary_expression
    (41) assignment_expression -> . IDENTIFIER ASSIGN_OP expression
    (42) binary_expression -> . expression PLUS_OP expression
    (43) binary_expression -> . expression MINUS_OP expression
    (44) binary_expression -> . expression MULT_OP expression
    (45) binary_expression -> . expression DIV_OP expression
    (46) binary_expression -> . expression EQ_OP expression
    (47) binary_expression -> . expression NE_OP expression
    (48) unary_expression -> . PLUS_OP expression
    (49) unary_expression -> . MINUS_OP expression
    (50) primary_expression -> . literal
    (51) primary_expression -> . IDENTIFIER
    (52) primary_expression -> . LPAREN_SPEC expression RPAREN_SPEC
    (53) literal -> . numeric_literal
    (54) literal -> . string_literal
    (55) literal -> . boolean_literal
    (56) literal -> . null_literal
    (57) numeric_literal -> . HEX_0
    (58) numeric_literal -> . HEX_1
    (59) numeric_literal -> . HEX_2
    (60) numeric_literal -> . HEX_3
    (61) numeric_literal -> . HEX_4
    (62) numeric_literal -> . HEX_5
    (63) numeric_literal -> . HEX_6
    (64) numeric_literal -> . HEX_7
    (65) numeric_literal -> . HEX_8
    (66) numeric_literal -> . HEX_9
    (67) numeric_literal -> . HEX_A
    (68) numeric_literal -> . HEX_B
    (69) numeric_literal -> . HEX_C
    (70) numeric_literal -> . HEX_D
    (71) numeric_literal -> . HEX_E
    (72) numeric_literal -> . HEX_F
    (73) string_literal -> . STRING
    (74) boolean_literal -> . TRUE
    (75) boolean_literal -> . FALSE
    (76) null_literal -> . NULL

    IDENTIFIER      shift and go to state 14
    PLUS_OP         shift and go to state 34
    MINUS_OP        shift and go to state 35
    LPAREN_SPEC     shift and go to state 18
    HEX_0           shift and go to state 41
    HEX_1           shift and go to state 42
    HEX_2           shift and go to state 43
    HEX_3           shift and go to state 44
    HEX_4           shift and go to state 45
    HEX_5           shift and go to state 46
    HEX_6           shift and go to state 47
    HEX_7           shift and go to state 48
    HEX_8           shift and go to state 49
    HEX_9           shift and go to state 50
    HEX_A           shift and go to state 51
    HEX_B           shift and go to state 52
    HEX_C           shift and go to state 53
    HEX_D           shift and go to state 54
    HEX_E           shift and go to state 55
    HEX_F           shift and go to state 56
    STRING          shift and go to state 72
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NULL            shift and go to state 59

    expression                     shift and go to state 98
    assignment_expression          shift and go to state 30
    binary_expression              shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 33
    literal                        shift and go to state 36
    numeric_literal                shift and go to state 37
    string_literal                 shift and go to state 38
    boolean_literal                shift and go to state 39
    null_literal                   shift and go to state 40

state 81

    (48) unary_expression -> PLUS_OP expression .
    (42) binary_expression -> expression . PLUS_OP expression
    (43) binary_expression -> expression . MINUS_OP expression
    (44) binary_expression -> expression . MULT_OP expression
    (45) binary_expression -> expression . DIV_OP expression
    (46) binary_expression -> expression . EQ_OP expression
    (47) binary_expression -> expression . NE_OP expression

    SEMICOLON_SPEC  reduce using rule 48 (unary_expression -> PLUS_OP expression .)
    PLUS_OP         reduce using rule 48 (unary_expression -> PLUS_OP expression .)
    MINUS_OP        reduce using rule 48 (unary_expression -> PLUS_OP expression .)
    EQ_OP           reduce using rule 48 (unary_expression -> PLUS_OP expression .)
    NE_OP           reduce using rule 48 (unary_expression -> PLUS_OP expression .)
    RPAREN_SPEC     reduce using rule 48 (unary_expression -> PLUS_OP expression .)
    COLON           reduce using rule 48 (unary_expression -> PLUS_OP expression .)
    MULT_OP         shift and go to state 66
    DIV_OP          shift and go to state 67

  ! MULT_OP         [ reduce using rule 48 (unary_expression -> PLUS_OP expression .) ]
  ! DIV_OP          [ reduce using rule 48 (unary_expression -> PLUS_OP expression .) ]
  ! PLUS_OP         [ shift and go to state 64 ]
  ! MINUS_OP        [ shift and go to state 65 ]
  ! EQ_OP           [ shift and go to state 68 ]
  ! NE_OP           [ shift and go to state 69 ]


state 82

    (49) unary_expression -> MINUS_OP expression .
    (42) binary_expression -> expression . PLUS_OP expression
    (43) binary_expression -> expression . MINUS_OP expression
    (44) binary_expression -> expression . MULT_OP expression
    (45) binary_expression -> expression . DIV_OP expression
    (46) binary_expression -> expression . EQ_OP expression
    (47) binary_expression -> expression . NE_OP expression

    SEMICOLON_SPEC  reduce using rule 49 (unary_expression -> MINUS_OP expression .)
    PLUS_OP         reduce using rule 49 (unary_expression -> MINUS_OP expression .)
    MINUS_OP        reduce using rule 49 (unary_expression -> MINUS_OP expression .)
    EQ_OP           reduce using rule 49 (unary_expression -> MINUS_OP expression .)
    NE_OP           reduce using rule 49 (unary_expression -> MINUS_OP expression .)
    RPAREN_SPEC     reduce using rule 49 (unary_expression -> MINUS_OP expression .)
    COLON           reduce using rule 49 (unary_expression -> MINUS_OP expression .)
    MULT_OP         shift and go to state 66
    DIV_OP          shift and go to state 67

  ! MULT_OP         [ reduce using rule 49 (unary_expression -> MINUS_OP expression .) ]
  ! DIV_OP          [ reduce using rule 49 (unary_expression -> MINUS_OP expression .) ]
  ! PLUS_OP         [ shift and go to state 64 ]
  ! MINUS_OP        [ shift and go to state 65 ]
  ! EQ_OP           [ shift and go to state 68 ]
  ! NE_OP           [ shift and go to state 69 ]


state 83

    (13) declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .

    SEMICOLON_SPEC  reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    PRINT           reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    IF              reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    WHILE           reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    RETURN          reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    BREAK           reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    LBRACE_SPEC     reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    SWITCH          reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    ENTERO          reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    FLOTANTE        reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    STRING          reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    CHAR            reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    ARRAY           reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    IDENTIFIER      reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    PLUS_OP         reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    MINUS_OP        reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    LPAREN_SPEC     reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    HEX_0           reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    HEX_1           reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    HEX_2           reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    HEX_3           reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    HEX_4           reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    HEX_5           reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    HEX_6           reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    HEX_7           reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    HEX_8           reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    HEX_9           reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    HEX_A           reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    HEX_B           reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    HEX_C           reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    HEX_D           reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    HEX_E           reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    HEX_F           reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    TRUE            reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    FALSE           reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    NULL            reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    $end            reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    RBRACE_SPEC     reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    ELSE            reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    CASE            reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)
    DEFAULT         reduce using rule 13 (declaration_statement -> type IDENTIFIER SEMICOLON_SPEC .)


state 84

    (14) declaration_statement -> type IDENTIFIER ASSIGN_OP . expression SEMICOLON_SPEC
    (37) expression -> . assignment_expression
    (38) expression -> . binary_expression
    (39) expression -> . unary_expression
    (40) expression -> . primary_expression
    (41) assignment_expression -> . IDENTIFIER ASSIGN_OP expression
    (42) binary_expression -> . expression PLUS_OP expression
    (43) binary_expression -> . expression MINUS_OP expression
    (44) binary_expression -> . expression MULT_OP expression
    (45) binary_expression -> . expression DIV_OP expression
    (46) binary_expression -> . expression EQ_OP expression
    (47) binary_expression -> . expression NE_OP expression
    (48) unary_expression -> . PLUS_OP expression
    (49) unary_expression -> . MINUS_OP expression
    (50) primary_expression -> . literal
    (51) primary_expression -> . IDENTIFIER
    (52) primary_expression -> . LPAREN_SPEC expression RPAREN_SPEC
    (53) literal -> . numeric_literal
    (54) literal -> . string_literal
    (55) literal -> . boolean_literal
    (56) literal -> . null_literal
    (57) numeric_literal -> . HEX_0
    (58) numeric_literal -> . HEX_1
    (59) numeric_literal -> . HEX_2
    (60) numeric_literal -> . HEX_3
    (61) numeric_literal -> . HEX_4
    (62) numeric_literal -> . HEX_5
    (63) numeric_literal -> . HEX_6
    (64) numeric_literal -> . HEX_7
    (65) numeric_literal -> . HEX_8
    (66) numeric_literal -> . HEX_9
    (67) numeric_literal -> . HEX_A
    (68) numeric_literal -> . HEX_B
    (69) numeric_literal -> . HEX_C
    (70) numeric_literal -> . HEX_D
    (71) numeric_literal -> . HEX_E
    (72) numeric_literal -> . HEX_F
    (73) string_literal -> . STRING
    (74) boolean_literal -> . TRUE
    (75) boolean_literal -> . FALSE
    (76) null_literal -> . NULL

    IDENTIFIER      shift and go to state 14
    PLUS_OP         shift and go to state 34
    MINUS_OP        shift and go to state 35
    LPAREN_SPEC     shift and go to state 18
    HEX_0           shift and go to state 41
    HEX_1           shift and go to state 42
    HEX_2           shift and go to state 43
    HEX_3           shift and go to state 44
    HEX_4           shift and go to state 45
    HEX_5           shift and go to state 46
    HEX_6           shift and go to state 47
    HEX_7           shift and go to state 48
    HEX_8           shift and go to state 49
    HEX_9           shift and go to state 50
    HEX_A           shift and go to state 51
    HEX_B           shift and go to state 52
    HEX_C           shift and go to state 53
    HEX_D           shift and go to state 54
    HEX_E           shift and go to state 55
    HEX_F           shift and go to state 56
    STRING          shift and go to state 72
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NULL            shift and go to state 59

    expression                     shift and go to state 99
    assignment_expression          shift and go to state 30
    binary_expression              shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 33
    literal                        shift and go to state 36
    numeric_literal                shift and go to state 37
    string_literal                 shift and go to state 38
    boolean_literal                shift and go to state 39
    null_literal                   shift and go to state 40

state 85

    (41) assignment_expression -> IDENTIFIER ASSIGN_OP expression .
    (42) binary_expression -> expression . PLUS_OP expression
    (43) binary_expression -> expression . MINUS_OP expression
    (44) binary_expression -> expression . MULT_OP expression
    (45) binary_expression -> expression . DIV_OP expression
    (46) binary_expression -> expression . EQ_OP expression
    (47) binary_expression -> expression . NE_OP expression

  ! shift/reduce conflict for PLUS_OP resolved as shift
  ! shift/reduce conflict for MINUS_OP resolved as shift
  ! shift/reduce conflict for MULT_OP resolved as shift
  ! shift/reduce conflict for DIV_OP resolved as shift
  ! shift/reduce conflict for EQ_OP resolved as shift
  ! shift/reduce conflict for NE_OP resolved as shift
    SEMICOLON_SPEC  reduce using rule 41 (assignment_expression -> IDENTIFIER ASSIGN_OP expression .)
    RPAREN_SPEC     reduce using rule 41 (assignment_expression -> IDENTIFIER ASSIGN_OP expression .)
    COLON           reduce using rule 41 (assignment_expression -> IDENTIFIER ASSIGN_OP expression .)
    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 65
    MULT_OP         shift and go to state 66
    DIV_OP          shift and go to state 67
    EQ_OP           shift and go to state 68
    NE_OP           shift and go to state 69

  ! PLUS_OP         [ reduce using rule 41 (assignment_expression -> IDENTIFIER ASSIGN_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 41 (assignment_expression -> IDENTIFIER ASSIGN_OP expression .) ]
  ! MULT_OP         [ reduce using rule 41 (assignment_expression -> IDENTIFIER ASSIGN_OP expression .) ]
  ! DIV_OP          [ reduce using rule 41 (assignment_expression -> IDENTIFIER ASSIGN_OP expression .) ]
  ! EQ_OP           [ reduce using rule 41 (assignment_expression -> IDENTIFIER ASSIGN_OP expression .) ]
  ! NE_OP           [ reduce using rule 41 (assignment_expression -> IDENTIFIER ASSIGN_OP expression .) ]


state 86

    (42) binary_expression -> expression PLUS_OP expression .
    (42) binary_expression -> expression . PLUS_OP expression
    (43) binary_expression -> expression . MINUS_OP expression
    (44) binary_expression -> expression . MULT_OP expression
    (45) binary_expression -> expression . DIV_OP expression
    (46) binary_expression -> expression . EQ_OP expression
    (47) binary_expression -> expression . NE_OP expression

    SEMICOLON_SPEC  reduce using rule 42 (binary_expression -> expression PLUS_OP expression .)
    PLUS_OP         reduce using rule 42 (binary_expression -> expression PLUS_OP expression .)
    MINUS_OP        reduce using rule 42 (binary_expression -> expression PLUS_OP expression .)
    EQ_OP           reduce using rule 42 (binary_expression -> expression PLUS_OP expression .)
    NE_OP           reduce using rule 42 (binary_expression -> expression PLUS_OP expression .)
    RPAREN_SPEC     reduce using rule 42 (binary_expression -> expression PLUS_OP expression .)
    COLON           reduce using rule 42 (binary_expression -> expression PLUS_OP expression .)
    MULT_OP         shift and go to state 66
    DIV_OP          shift and go to state 67

  ! MULT_OP         [ reduce using rule 42 (binary_expression -> expression PLUS_OP expression .) ]
  ! DIV_OP          [ reduce using rule 42 (binary_expression -> expression PLUS_OP expression .) ]
  ! PLUS_OP         [ shift and go to state 64 ]
  ! MINUS_OP        [ shift and go to state 65 ]
  ! EQ_OP           [ shift and go to state 68 ]
  ! NE_OP           [ shift and go to state 69 ]


state 87

    (43) binary_expression -> expression MINUS_OP expression .
    (42) binary_expression -> expression . PLUS_OP expression
    (43) binary_expression -> expression . MINUS_OP expression
    (44) binary_expression -> expression . MULT_OP expression
    (45) binary_expression -> expression . DIV_OP expression
    (46) binary_expression -> expression . EQ_OP expression
    (47) binary_expression -> expression . NE_OP expression

    SEMICOLON_SPEC  reduce using rule 43 (binary_expression -> expression MINUS_OP expression .)
    PLUS_OP         reduce using rule 43 (binary_expression -> expression MINUS_OP expression .)
    MINUS_OP        reduce using rule 43 (binary_expression -> expression MINUS_OP expression .)
    EQ_OP           reduce using rule 43 (binary_expression -> expression MINUS_OP expression .)
    NE_OP           reduce using rule 43 (binary_expression -> expression MINUS_OP expression .)
    RPAREN_SPEC     reduce using rule 43 (binary_expression -> expression MINUS_OP expression .)
    COLON           reduce using rule 43 (binary_expression -> expression MINUS_OP expression .)
    MULT_OP         shift and go to state 66
    DIV_OP          shift and go to state 67

  ! MULT_OP         [ reduce using rule 43 (binary_expression -> expression MINUS_OP expression .) ]
  ! DIV_OP          [ reduce using rule 43 (binary_expression -> expression MINUS_OP expression .) ]
  ! PLUS_OP         [ shift and go to state 64 ]
  ! MINUS_OP        [ shift and go to state 65 ]
  ! EQ_OP           [ shift and go to state 68 ]
  ! NE_OP           [ shift and go to state 69 ]


state 88

    (44) binary_expression -> expression MULT_OP expression .
    (42) binary_expression -> expression . PLUS_OP expression
    (43) binary_expression -> expression . MINUS_OP expression
    (44) binary_expression -> expression . MULT_OP expression
    (45) binary_expression -> expression . DIV_OP expression
    (46) binary_expression -> expression . EQ_OP expression
    (47) binary_expression -> expression . NE_OP expression

    SEMICOLON_SPEC  reduce using rule 44 (binary_expression -> expression MULT_OP expression .)
    PLUS_OP         reduce using rule 44 (binary_expression -> expression MULT_OP expression .)
    MINUS_OP        reduce using rule 44 (binary_expression -> expression MULT_OP expression .)
    MULT_OP         reduce using rule 44 (binary_expression -> expression MULT_OP expression .)
    DIV_OP          reduce using rule 44 (binary_expression -> expression MULT_OP expression .)
    EQ_OP           reduce using rule 44 (binary_expression -> expression MULT_OP expression .)
    NE_OP           reduce using rule 44 (binary_expression -> expression MULT_OP expression .)
    RPAREN_SPEC     reduce using rule 44 (binary_expression -> expression MULT_OP expression .)
    COLON           reduce using rule 44 (binary_expression -> expression MULT_OP expression .)

  ! PLUS_OP         [ shift and go to state 64 ]
  ! MINUS_OP        [ shift and go to state 65 ]
  ! MULT_OP         [ shift and go to state 66 ]
  ! DIV_OP          [ shift and go to state 67 ]
  ! EQ_OP           [ shift and go to state 68 ]
  ! NE_OP           [ shift and go to state 69 ]


state 89

    (45) binary_expression -> expression DIV_OP expression .
    (42) binary_expression -> expression . PLUS_OP expression
    (43) binary_expression -> expression . MINUS_OP expression
    (44) binary_expression -> expression . MULT_OP expression
    (45) binary_expression -> expression . DIV_OP expression
    (46) binary_expression -> expression . EQ_OP expression
    (47) binary_expression -> expression . NE_OP expression

    SEMICOLON_SPEC  reduce using rule 45 (binary_expression -> expression DIV_OP expression .)
    PLUS_OP         reduce using rule 45 (binary_expression -> expression DIV_OP expression .)
    MINUS_OP        reduce using rule 45 (binary_expression -> expression DIV_OP expression .)
    MULT_OP         reduce using rule 45 (binary_expression -> expression DIV_OP expression .)
    DIV_OP          reduce using rule 45 (binary_expression -> expression DIV_OP expression .)
    EQ_OP           reduce using rule 45 (binary_expression -> expression DIV_OP expression .)
    NE_OP           reduce using rule 45 (binary_expression -> expression DIV_OP expression .)
    RPAREN_SPEC     reduce using rule 45 (binary_expression -> expression DIV_OP expression .)
    COLON           reduce using rule 45 (binary_expression -> expression DIV_OP expression .)

  ! PLUS_OP         [ shift and go to state 64 ]
  ! MINUS_OP        [ shift and go to state 65 ]
  ! MULT_OP         [ shift and go to state 66 ]
  ! DIV_OP          [ shift and go to state 67 ]
  ! EQ_OP           [ shift and go to state 68 ]
  ! NE_OP           [ shift and go to state 69 ]


state 90

    (46) binary_expression -> expression EQ_OP expression .
    (42) binary_expression -> expression . PLUS_OP expression
    (43) binary_expression -> expression . MINUS_OP expression
    (44) binary_expression -> expression . MULT_OP expression
    (45) binary_expression -> expression . DIV_OP expression
    (46) binary_expression -> expression . EQ_OP expression
    (47) binary_expression -> expression . NE_OP expression

    SEMICOLON_SPEC  reduce using rule 46 (binary_expression -> expression EQ_OP expression .)
    EQ_OP           reduce using rule 46 (binary_expression -> expression EQ_OP expression .)
    NE_OP           reduce using rule 46 (binary_expression -> expression EQ_OP expression .)
    RPAREN_SPEC     reduce using rule 46 (binary_expression -> expression EQ_OP expression .)
    COLON           reduce using rule 46 (binary_expression -> expression EQ_OP expression .)
    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 65
    MULT_OP         shift and go to state 66
    DIV_OP          shift and go to state 67

  ! PLUS_OP         [ reduce using rule 46 (binary_expression -> expression EQ_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 46 (binary_expression -> expression EQ_OP expression .) ]
  ! MULT_OP         [ reduce using rule 46 (binary_expression -> expression EQ_OP expression .) ]
  ! DIV_OP          [ reduce using rule 46 (binary_expression -> expression EQ_OP expression .) ]
  ! EQ_OP           [ shift and go to state 68 ]
  ! NE_OP           [ shift and go to state 69 ]


state 91

    (47) binary_expression -> expression NE_OP expression .
    (42) binary_expression -> expression . PLUS_OP expression
    (43) binary_expression -> expression . MINUS_OP expression
    (44) binary_expression -> expression . MULT_OP expression
    (45) binary_expression -> expression . DIV_OP expression
    (46) binary_expression -> expression . EQ_OP expression
    (47) binary_expression -> expression . NE_OP expression

    SEMICOLON_SPEC  reduce using rule 47 (binary_expression -> expression NE_OP expression .)
    EQ_OP           reduce using rule 47 (binary_expression -> expression NE_OP expression .)
    NE_OP           reduce using rule 47 (binary_expression -> expression NE_OP expression .)
    RPAREN_SPEC     reduce using rule 47 (binary_expression -> expression NE_OP expression .)
    COLON           reduce using rule 47 (binary_expression -> expression NE_OP expression .)
    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 65
    MULT_OP         shift and go to state 66
    DIV_OP          shift and go to state 67

  ! PLUS_OP         [ reduce using rule 47 (binary_expression -> expression NE_OP expression .) ]
  ! MINUS_OP        [ reduce using rule 47 (binary_expression -> expression NE_OP expression .) ]
  ! MULT_OP         [ reduce using rule 47 (binary_expression -> expression NE_OP expression .) ]
  ! DIV_OP          [ reduce using rule 47 (binary_expression -> expression NE_OP expression .) ]
  ! EQ_OP           [ shift and go to state 68 ]
  ! NE_OP           [ shift and go to state 69 ]


state 92

    (22) print_statement -> PRINT LPAREN_SPEC expression . RPAREN_SPEC SEMICOLON_SPEC
    (42) binary_expression -> expression . PLUS_OP expression
    (43) binary_expression -> expression . MINUS_OP expression
    (44) binary_expression -> expression . MULT_OP expression
    (45) binary_expression -> expression . DIV_OP expression
    (46) binary_expression -> expression . EQ_OP expression
    (47) binary_expression -> expression . NE_OP expression

    RPAREN_SPEC     shift and go to state 100
    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 65
    MULT_OP         shift and go to state 66
    DIV_OP          shift and go to state 67
    EQ_OP           shift and go to state 68
    NE_OP           shift and go to state 69


state 93

    (52) primary_expression -> LPAREN_SPEC expression RPAREN_SPEC .

    SEMICOLON_SPEC  reduce using rule 52 (primary_expression -> LPAREN_SPEC expression RPAREN_SPEC .)
    PLUS_OP         reduce using rule 52 (primary_expression -> LPAREN_SPEC expression RPAREN_SPEC .)
    MINUS_OP        reduce using rule 52 (primary_expression -> LPAREN_SPEC expression RPAREN_SPEC .)
    MULT_OP         reduce using rule 52 (primary_expression -> LPAREN_SPEC expression RPAREN_SPEC .)
    DIV_OP          reduce using rule 52 (primary_expression -> LPAREN_SPEC expression RPAREN_SPEC .)
    EQ_OP           reduce using rule 52 (primary_expression -> LPAREN_SPEC expression RPAREN_SPEC .)
    NE_OP           reduce using rule 52 (primary_expression -> LPAREN_SPEC expression RPAREN_SPEC .)
    RPAREN_SPEC     reduce using rule 52 (primary_expression -> LPAREN_SPEC expression RPAREN_SPEC .)
    COLON           reduce using rule 52 (primary_expression -> LPAREN_SPEC expression RPAREN_SPEC .)


state 94

    (23) if_statement -> IF LPAREN_SPEC expression . RPAREN_SPEC statement
    (24) if_statement -> IF LPAREN_SPEC expression . RPAREN_SPEC statement ELSE statement
    (42) binary_expression -> expression . PLUS_OP expression
    (43) binary_expression -> expression . MINUS_OP expression
    (44) binary_expression -> expression . MULT_OP expression
    (45) binary_expression -> expression . DIV_OP expression
    (46) binary_expression -> expression . EQ_OP expression
    (47) binary_expression -> expression . NE_OP expression

    RPAREN_SPEC     shift and go to state 101
    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 65
    MULT_OP         shift and go to state 66
    DIV_OP          shift and go to state 67
    EQ_OP           shift and go to state 68
    NE_OP           shift and go to state 69


state 95

    (25) while_statement -> WHILE LPAREN_SPEC expression . RPAREN_SPEC statement
    (42) binary_expression -> expression . PLUS_OP expression
    (43) binary_expression -> expression . MINUS_OP expression
    (44) binary_expression -> expression . MULT_OP expression
    (45) binary_expression -> expression . DIV_OP expression
    (46) binary_expression -> expression . EQ_OP expression
    (47) binary_expression -> expression . NE_OP expression

    RPAREN_SPEC     shift and go to state 102
    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 65
    MULT_OP         shift and go to state 66
    DIV_OP          shift and go to state 67
    EQ_OP           shift and go to state 68
    NE_OP           shift and go to state 69


state 96

    (26) return_statement -> RETURN expression SEMICOLON_SPEC .

    SEMICOLON_SPEC  reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    PRINT           reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    IF              reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    WHILE           reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    RETURN          reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    BREAK           reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    LBRACE_SPEC     reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    SWITCH          reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    ENTERO          reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    FLOTANTE        reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    STRING          reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    CHAR            reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    ARRAY           reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    IDENTIFIER      reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    PLUS_OP         reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    MINUS_OP        reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    LPAREN_SPEC     reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    HEX_0           reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    HEX_1           reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    HEX_2           reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    HEX_3           reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    HEX_4           reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    HEX_5           reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    HEX_6           reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    HEX_7           reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    HEX_8           reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    HEX_9           reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    HEX_A           reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    HEX_B           reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    HEX_C           reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    HEX_D           reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    HEX_E           reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    HEX_F           reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    TRUE            reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    FALSE           reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    NULL            reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    $end            reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    RBRACE_SPEC     reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    ELSE            reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    CASE            reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)
    DEFAULT         reduce using rule 26 (return_statement -> RETURN expression SEMICOLON_SPEC .)


state 97

    (29) block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .

    SEMICOLON_SPEC  reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    PRINT           reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    IF              reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    WHILE           reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    RETURN          reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    BREAK           reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    LBRACE_SPEC     reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    SWITCH          reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    ENTERO          reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    FLOTANTE        reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    STRING          reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    CHAR            reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    ARRAY           reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    IDENTIFIER      reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    PLUS_OP         reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    MINUS_OP        reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    LPAREN_SPEC     reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    HEX_0           reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    HEX_1           reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    HEX_2           reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    HEX_3           reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    HEX_4           reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    HEX_5           reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    HEX_6           reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    HEX_7           reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    HEX_8           reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    HEX_9           reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    HEX_A           reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    HEX_B           reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    HEX_C           reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    HEX_D           reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    HEX_E           reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    HEX_F           reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    TRUE            reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    FALSE           reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    NULL            reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    $end            reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    RBRACE_SPEC     reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    ELSE            reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    CASE            reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)
    DEFAULT         reduce using rule 29 (block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC .)


state 98

    (31) switch_statement -> SWITCH LPAREN_SPEC expression . RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC
    (32) switch_statement -> SWITCH LPAREN_SPEC expression . RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC
    (42) binary_expression -> expression . PLUS_OP expression
    (43) binary_expression -> expression . MINUS_OP expression
    (44) binary_expression -> expression . MULT_OP expression
    (45) binary_expression -> expression . DIV_OP expression
    (46) binary_expression -> expression . EQ_OP expression
    (47) binary_expression -> expression . NE_OP expression

    RPAREN_SPEC     shift and go to state 103
    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 65
    MULT_OP         shift and go to state 66
    DIV_OP          shift and go to state 67
    EQ_OP           shift and go to state 68
    NE_OP           shift and go to state 69


state 99

    (14) declaration_statement -> type IDENTIFIER ASSIGN_OP expression . SEMICOLON_SPEC
    (42) binary_expression -> expression . PLUS_OP expression
    (43) binary_expression -> expression . MINUS_OP expression
    (44) binary_expression -> expression . MULT_OP expression
    (45) binary_expression -> expression . DIV_OP expression
    (46) binary_expression -> expression . EQ_OP expression
    (47) binary_expression -> expression . NE_OP expression

    SEMICOLON_SPEC  shift and go to state 104
    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 65
    MULT_OP         shift and go to state 66
    DIV_OP          shift and go to state 67
    EQ_OP           shift and go to state 68
    NE_OP           shift and go to state 69


state 100

    (22) print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC . SEMICOLON_SPEC

    SEMICOLON_SPEC  shift and go to state 105


state 101

    (23) if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC . statement
    (24) if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC . statement ELSE statement
    (4) statement -> . declaration_statement
    (5) statement -> . expression_statement
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . while_statement
    (9) statement -> . return_statement
    (10) statement -> . break_statement
    (11) statement -> . block_statement
    (12) statement -> . switch_statement
    (13) declaration_statement -> . type IDENTIFIER SEMICOLON_SPEC
    (14) declaration_statement -> . type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC
    (20) expression_statement -> . expression SEMICOLON_SPEC
    (21) expression_statement -> . SEMICOLON_SPEC
    (22) print_statement -> . PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC
    (23) if_statement -> . IF LPAREN_SPEC expression RPAREN_SPEC statement
    (24) if_statement -> . IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement
    (25) while_statement -> . WHILE LPAREN_SPEC expression RPAREN_SPEC statement
    (26) return_statement -> . RETURN expression SEMICOLON_SPEC
    (27) return_statement -> . RETURN SEMICOLON_SPEC
    (28) break_statement -> . BREAK SEMICOLON_SPEC
    (29) block_statement -> . LBRACE_SPEC statement_list RBRACE_SPEC
    (30) block_statement -> . LBRACE_SPEC RBRACE_SPEC
    (31) switch_statement -> . SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC
    (32) switch_statement -> . SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC
    (15) type -> . ENTERO
    (16) type -> . FLOTANTE
    (17) type -> . STRING
    (18) type -> . CHAR
    (19) type -> . ARRAY
    (37) expression -> . assignment_expression
    (38) expression -> . binary_expression
    (39) expression -> . unary_expression
    (40) expression -> . primary_expression
    (41) assignment_expression -> . IDENTIFIER ASSIGN_OP expression
    (42) binary_expression -> . expression PLUS_OP expression
    (43) binary_expression -> . expression MINUS_OP expression
    (44) binary_expression -> . expression MULT_OP expression
    (45) binary_expression -> . expression DIV_OP expression
    (46) binary_expression -> . expression EQ_OP expression
    (47) binary_expression -> . expression NE_OP expression
    (48) unary_expression -> . PLUS_OP expression
    (49) unary_expression -> . MINUS_OP expression
    (50) primary_expression -> . literal
    (51) primary_expression -> . IDENTIFIER
    (52) primary_expression -> . LPAREN_SPEC expression RPAREN_SPEC
    (53) literal -> . numeric_literal
    (54) literal -> . string_literal
    (55) literal -> . boolean_literal
    (56) literal -> . null_literal
    (57) numeric_literal -> . HEX_0
    (58) numeric_literal -> . HEX_1
    (59) numeric_literal -> . HEX_2
    (60) numeric_literal -> . HEX_3
    (61) numeric_literal -> . HEX_4
    (62) numeric_literal -> . HEX_5
    (63) numeric_literal -> . HEX_6
    (64) numeric_literal -> . HEX_7
    (65) numeric_literal -> . HEX_8
    (66) numeric_literal -> . HEX_9
    (67) numeric_literal -> . HEX_A
    (68) numeric_literal -> . HEX_B
    (69) numeric_literal -> . HEX_C
    (70) numeric_literal -> . HEX_D
    (71) numeric_literal -> . HEX_E
    (72) numeric_literal -> . HEX_F
    (73) string_literal -> . STRING
    (74) boolean_literal -> . TRUE
    (75) boolean_literal -> . FALSE
    (76) null_literal -> . NULL

    SEMICOLON_SPEC  shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    RETURN          shift and go to state 21
    BREAK           shift and go to state 22
    LBRACE_SPEC     shift and go to state 23
    SWITCH          shift and go to state 24
    ENTERO          shift and go to state 25
    FLOTANTE        shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    ARRAY           shift and go to state 29
    IDENTIFIER      shift and go to state 14
    PLUS_OP         shift and go to state 34
    MINUS_OP        shift and go to state 35
    LPAREN_SPEC     shift and go to state 18
    HEX_0           shift and go to state 41
    HEX_1           shift and go to state 42
    HEX_2           shift and go to state 43
    HEX_3           shift and go to state 44
    HEX_4           shift and go to state 45
    HEX_5           shift and go to state 46
    HEX_6           shift and go to state 47
    HEX_7           shift and go to state 48
    HEX_8           shift and go to state 49
    HEX_9           shift and go to state 50
    HEX_A           shift and go to state 51
    HEX_B           shift and go to state 52
    HEX_C           shift and go to state 53
    HEX_D           shift and go to state 54
    HEX_E           shift and go to state 55
    HEX_F           shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NULL            shift and go to state 59

    expression                     shift and go to state 16
    statement                      shift and go to state 106
    declaration_statement          shift and go to state 4
    expression_statement           shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8
    return_statement               shift and go to state 9
    break_statement                shift and go to state 10
    block_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    type                           shift and go to state 13
    assignment_expression          shift and go to state 30
    binary_expression              shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 33
    literal                        shift and go to state 36
    numeric_literal                shift and go to state 37
    string_literal                 shift and go to state 38
    boolean_literal                shift and go to state 39
    null_literal                   shift and go to state 40

state 102

    (25) while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC . statement
    (4) statement -> . declaration_statement
    (5) statement -> . expression_statement
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . while_statement
    (9) statement -> . return_statement
    (10) statement -> . break_statement
    (11) statement -> . block_statement
    (12) statement -> . switch_statement
    (13) declaration_statement -> . type IDENTIFIER SEMICOLON_SPEC
    (14) declaration_statement -> . type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC
    (20) expression_statement -> . expression SEMICOLON_SPEC
    (21) expression_statement -> . SEMICOLON_SPEC
    (22) print_statement -> . PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC
    (23) if_statement -> . IF LPAREN_SPEC expression RPAREN_SPEC statement
    (24) if_statement -> . IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement
    (25) while_statement -> . WHILE LPAREN_SPEC expression RPAREN_SPEC statement
    (26) return_statement -> . RETURN expression SEMICOLON_SPEC
    (27) return_statement -> . RETURN SEMICOLON_SPEC
    (28) break_statement -> . BREAK SEMICOLON_SPEC
    (29) block_statement -> . LBRACE_SPEC statement_list RBRACE_SPEC
    (30) block_statement -> . LBRACE_SPEC RBRACE_SPEC
    (31) switch_statement -> . SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC
    (32) switch_statement -> . SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC
    (15) type -> . ENTERO
    (16) type -> . FLOTANTE
    (17) type -> . STRING
    (18) type -> . CHAR
    (19) type -> . ARRAY
    (37) expression -> . assignment_expression
    (38) expression -> . binary_expression
    (39) expression -> . unary_expression
    (40) expression -> . primary_expression
    (41) assignment_expression -> . IDENTIFIER ASSIGN_OP expression
    (42) binary_expression -> . expression PLUS_OP expression
    (43) binary_expression -> . expression MINUS_OP expression
    (44) binary_expression -> . expression MULT_OP expression
    (45) binary_expression -> . expression DIV_OP expression
    (46) binary_expression -> . expression EQ_OP expression
    (47) binary_expression -> . expression NE_OP expression
    (48) unary_expression -> . PLUS_OP expression
    (49) unary_expression -> . MINUS_OP expression
    (50) primary_expression -> . literal
    (51) primary_expression -> . IDENTIFIER
    (52) primary_expression -> . LPAREN_SPEC expression RPAREN_SPEC
    (53) literal -> . numeric_literal
    (54) literal -> . string_literal
    (55) literal -> . boolean_literal
    (56) literal -> . null_literal
    (57) numeric_literal -> . HEX_0
    (58) numeric_literal -> . HEX_1
    (59) numeric_literal -> . HEX_2
    (60) numeric_literal -> . HEX_3
    (61) numeric_literal -> . HEX_4
    (62) numeric_literal -> . HEX_5
    (63) numeric_literal -> . HEX_6
    (64) numeric_literal -> . HEX_7
    (65) numeric_literal -> . HEX_8
    (66) numeric_literal -> . HEX_9
    (67) numeric_literal -> . HEX_A
    (68) numeric_literal -> . HEX_B
    (69) numeric_literal -> . HEX_C
    (70) numeric_literal -> . HEX_D
    (71) numeric_literal -> . HEX_E
    (72) numeric_literal -> . HEX_F
    (73) string_literal -> . STRING
    (74) boolean_literal -> . TRUE
    (75) boolean_literal -> . FALSE
    (76) null_literal -> . NULL

    SEMICOLON_SPEC  shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    RETURN          shift and go to state 21
    BREAK           shift and go to state 22
    LBRACE_SPEC     shift and go to state 23
    SWITCH          shift and go to state 24
    ENTERO          shift and go to state 25
    FLOTANTE        shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    ARRAY           shift and go to state 29
    IDENTIFIER      shift and go to state 14
    PLUS_OP         shift and go to state 34
    MINUS_OP        shift and go to state 35
    LPAREN_SPEC     shift and go to state 18
    HEX_0           shift and go to state 41
    HEX_1           shift and go to state 42
    HEX_2           shift and go to state 43
    HEX_3           shift and go to state 44
    HEX_4           shift and go to state 45
    HEX_5           shift and go to state 46
    HEX_6           shift and go to state 47
    HEX_7           shift and go to state 48
    HEX_8           shift and go to state 49
    HEX_9           shift and go to state 50
    HEX_A           shift and go to state 51
    HEX_B           shift and go to state 52
    HEX_C           shift and go to state 53
    HEX_D           shift and go to state 54
    HEX_E           shift and go to state 55
    HEX_F           shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NULL            shift and go to state 59

    expression                     shift and go to state 16
    statement                      shift and go to state 107
    declaration_statement          shift and go to state 4
    expression_statement           shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8
    return_statement               shift and go to state 9
    break_statement                shift and go to state 10
    block_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    type                           shift and go to state 13
    assignment_expression          shift and go to state 30
    binary_expression              shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 33
    literal                        shift and go to state 36
    numeric_literal                shift and go to state 37
    string_literal                 shift and go to state 38
    boolean_literal                shift and go to state 39
    null_literal                   shift and go to state 40

state 103

    (31) switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC . LBRACE_SPEC case_list RBRACE_SPEC
    (32) switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC . LBRACE_SPEC RBRACE_SPEC

    LBRACE_SPEC     shift and go to state 108


state 104

    (14) declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .

    SEMICOLON_SPEC  reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    PRINT           reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    IF              reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    WHILE           reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    RETURN          reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    BREAK           reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    LBRACE_SPEC     reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    SWITCH          reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    ENTERO          reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    FLOTANTE        reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    STRING          reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    CHAR            reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    ARRAY           reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    IDENTIFIER      reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    PLUS_OP         reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    MINUS_OP        reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    LPAREN_SPEC     reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    HEX_0           reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    HEX_1           reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    HEX_2           reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    HEX_3           reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    HEX_4           reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    HEX_5           reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    HEX_6           reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    HEX_7           reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    HEX_8           reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    HEX_9           reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    HEX_A           reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    HEX_B           reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    HEX_C           reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    HEX_D           reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    HEX_E           reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    HEX_F           reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    TRUE            reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    FALSE           reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    NULL            reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    $end            reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    RBRACE_SPEC     reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    ELSE            reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    CASE            reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)
    DEFAULT         reduce using rule 14 (declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC .)


state 105

    (22) print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .

    SEMICOLON_SPEC  reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    PRINT           reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    IF              reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    WHILE           reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    RETURN          reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    BREAK           reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    LBRACE_SPEC     reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    SWITCH          reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    ENTERO          reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    FLOTANTE        reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    STRING          reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    CHAR            reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    ARRAY           reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    IDENTIFIER      reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    PLUS_OP         reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    MINUS_OP        reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    LPAREN_SPEC     reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    HEX_0           reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    HEX_1           reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    HEX_2           reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    HEX_3           reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    HEX_4           reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    HEX_5           reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    HEX_6           reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    HEX_7           reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    HEX_8           reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    HEX_9           reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    HEX_A           reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    HEX_B           reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    HEX_C           reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    HEX_D           reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    HEX_E           reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    HEX_F           reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    TRUE            reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    FALSE           reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    NULL            reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    $end            reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    RBRACE_SPEC     reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    ELSE            reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    CASE            reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)
    DEFAULT         reduce using rule 22 (print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC .)


state 106

    (23) if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .
    (24) if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    SEMICOLON_SPEC  reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    PRINT           reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    IF              reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    WHILE           reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    RETURN          reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    BREAK           reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    LBRACE_SPEC     reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    SWITCH          reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    ENTERO          reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    FLOTANTE        reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    STRING          reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    CHAR            reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    ARRAY           reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    IDENTIFIER      reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    PLUS_OP         reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    MINUS_OP        reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    LPAREN_SPEC     reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_0           reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_1           reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_2           reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_3           reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_4           reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_5           reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_6           reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_7           reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_8           reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_9           reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_A           reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_B           reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_C           reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_D           reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_E           reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_F           reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    TRUE            reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    FALSE           reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    NULL            reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    $end            reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    RBRACE_SPEC     reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    CASE            reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    DEFAULT         reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .)
    ELSE            shift and go to state 109

  ! ELSE            [ reduce using rule 23 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement .) ]


state 107

    (25) while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .

    SEMICOLON_SPEC  reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    PRINT           reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    IF              reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    WHILE           reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    RETURN          reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    BREAK           reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    LBRACE_SPEC     reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    SWITCH          reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    ENTERO          reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    FLOTANTE        reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    STRING          reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    CHAR            reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    ARRAY           reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    IDENTIFIER      reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    PLUS_OP         reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    MINUS_OP        reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    LPAREN_SPEC     reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_0           reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_1           reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_2           reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_3           reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_4           reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_5           reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_6           reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_7           reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_8           reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_9           reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_A           reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_B           reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_C           reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_D           reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_E           reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    HEX_F           reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    TRUE            reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    FALSE           reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    NULL            reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    $end            reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    RBRACE_SPEC     reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    ELSE            reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    CASE            reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)
    DEFAULT         reduce using rule 25 (while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement .)


state 108

    (31) switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC . case_list RBRACE_SPEC
    (32) switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC . RBRACE_SPEC
    (33) case_list -> . case
    (34) case_list -> . case_list case
    (35) case -> . CASE expression COLON statement_list
    (36) case -> . DEFAULT COLON statement_list

    RBRACE_SPEC     shift and go to state 111
    CASE            shift and go to state 113
    DEFAULT         shift and go to state 114

    case_list                      shift and go to state 110
    case                           shift and go to state 112

state 109

    (24) if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE . statement
    (4) statement -> . declaration_statement
    (5) statement -> . expression_statement
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . while_statement
    (9) statement -> . return_statement
    (10) statement -> . break_statement
    (11) statement -> . block_statement
    (12) statement -> . switch_statement
    (13) declaration_statement -> . type IDENTIFIER SEMICOLON_SPEC
    (14) declaration_statement -> . type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC
    (20) expression_statement -> . expression SEMICOLON_SPEC
    (21) expression_statement -> . SEMICOLON_SPEC
    (22) print_statement -> . PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC
    (23) if_statement -> . IF LPAREN_SPEC expression RPAREN_SPEC statement
    (24) if_statement -> . IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement
    (25) while_statement -> . WHILE LPAREN_SPEC expression RPAREN_SPEC statement
    (26) return_statement -> . RETURN expression SEMICOLON_SPEC
    (27) return_statement -> . RETURN SEMICOLON_SPEC
    (28) break_statement -> . BREAK SEMICOLON_SPEC
    (29) block_statement -> . LBRACE_SPEC statement_list RBRACE_SPEC
    (30) block_statement -> . LBRACE_SPEC RBRACE_SPEC
    (31) switch_statement -> . SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC
    (32) switch_statement -> . SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC
    (15) type -> . ENTERO
    (16) type -> . FLOTANTE
    (17) type -> . STRING
    (18) type -> . CHAR
    (19) type -> . ARRAY
    (37) expression -> . assignment_expression
    (38) expression -> . binary_expression
    (39) expression -> . unary_expression
    (40) expression -> . primary_expression
    (41) assignment_expression -> . IDENTIFIER ASSIGN_OP expression
    (42) binary_expression -> . expression PLUS_OP expression
    (43) binary_expression -> . expression MINUS_OP expression
    (44) binary_expression -> . expression MULT_OP expression
    (45) binary_expression -> . expression DIV_OP expression
    (46) binary_expression -> . expression EQ_OP expression
    (47) binary_expression -> . expression NE_OP expression
    (48) unary_expression -> . PLUS_OP expression
    (49) unary_expression -> . MINUS_OP expression
    (50) primary_expression -> . literal
    (51) primary_expression -> . IDENTIFIER
    (52) primary_expression -> . LPAREN_SPEC expression RPAREN_SPEC
    (53) literal -> . numeric_literal
    (54) literal -> . string_literal
    (55) literal -> . boolean_literal
    (56) literal -> . null_literal
    (57) numeric_literal -> . HEX_0
    (58) numeric_literal -> . HEX_1
    (59) numeric_literal -> . HEX_2
    (60) numeric_literal -> . HEX_3
    (61) numeric_literal -> . HEX_4
    (62) numeric_literal -> . HEX_5
    (63) numeric_literal -> . HEX_6
    (64) numeric_literal -> . HEX_7
    (65) numeric_literal -> . HEX_8
    (66) numeric_literal -> . HEX_9
    (67) numeric_literal -> . HEX_A
    (68) numeric_literal -> . HEX_B
    (69) numeric_literal -> . HEX_C
    (70) numeric_literal -> . HEX_D
    (71) numeric_literal -> . HEX_E
    (72) numeric_literal -> . HEX_F
    (73) string_literal -> . STRING
    (74) boolean_literal -> . TRUE
    (75) boolean_literal -> . FALSE
    (76) null_literal -> . NULL

    SEMICOLON_SPEC  shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    RETURN          shift and go to state 21
    BREAK           shift and go to state 22
    LBRACE_SPEC     shift and go to state 23
    SWITCH          shift and go to state 24
    ENTERO          shift and go to state 25
    FLOTANTE        shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    ARRAY           shift and go to state 29
    IDENTIFIER      shift and go to state 14
    PLUS_OP         shift and go to state 34
    MINUS_OP        shift and go to state 35
    LPAREN_SPEC     shift and go to state 18
    HEX_0           shift and go to state 41
    HEX_1           shift and go to state 42
    HEX_2           shift and go to state 43
    HEX_3           shift and go to state 44
    HEX_4           shift and go to state 45
    HEX_5           shift and go to state 46
    HEX_6           shift and go to state 47
    HEX_7           shift and go to state 48
    HEX_8           shift and go to state 49
    HEX_9           shift and go to state 50
    HEX_A           shift and go to state 51
    HEX_B           shift and go to state 52
    HEX_C           shift and go to state 53
    HEX_D           shift and go to state 54
    HEX_E           shift and go to state 55
    HEX_F           shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NULL            shift and go to state 59

    expression                     shift and go to state 16
    statement                      shift and go to state 115
    declaration_statement          shift and go to state 4
    expression_statement           shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8
    return_statement               shift and go to state 9
    break_statement                shift and go to state 10
    block_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    type                           shift and go to state 13
    assignment_expression          shift and go to state 30
    binary_expression              shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 33
    literal                        shift and go to state 36
    numeric_literal                shift and go to state 37
    string_literal                 shift and go to state 38
    boolean_literal                shift and go to state 39
    null_literal                   shift and go to state 40

state 110

    (31) switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list . RBRACE_SPEC
    (34) case_list -> case_list . case
    (35) case -> . CASE expression COLON statement_list
    (36) case -> . DEFAULT COLON statement_list

    RBRACE_SPEC     shift and go to state 116
    CASE            shift and go to state 113
    DEFAULT         shift and go to state 114

    case                           shift and go to state 117

state 111

    (32) switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .

    SEMICOLON_SPEC  reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    PRINT           reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    IF              reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    WHILE           reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    RETURN          reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    BREAK           reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    LBRACE_SPEC     reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    SWITCH          reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    ENTERO          reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    FLOTANTE        reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    STRING          reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    CHAR            reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    ARRAY           reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    IDENTIFIER      reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    PLUS_OP         reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    MINUS_OP        reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    LPAREN_SPEC     reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    HEX_0           reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    HEX_1           reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    HEX_2           reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    HEX_3           reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    HEX_4           reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    HEX_5           reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    HEX_6           reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    HEX_7           reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    HEX_8           reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    HEX_9           reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    HEX_A           reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    HEX_B           reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    HEX_C           reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    HEX_D           reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    HEX_E           reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    HEX_F           reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    TRUE            reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    FALSE           reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    NULL            reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    $end            reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    RBRACE_SPEC     reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    ELSE            reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    CASE            reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)
    DEFAULT         reduce using rule 32 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC .)


state 112

    (33) case_list -> case .

    RBRACE_SPEC     reduce using rule 33 (case_list -> case .)
    CASE            reduce using rule 33 (case_list -> case .)
    DEFAULT         reduce using rule 33 (case_list -> case .)


state 113

    (35) case -> CASE . expression COLON statement_list
    (37) expression -> . assignment_expression
    (38) expression -> . binary_expression
    (39) expression -> . unary_expression
    (40) expression -> . primary_expression
    (41) assignment_expression -> . IDENTIFIER ASSIGN_OP expression
    (42) binary_expression -> . expression PLUS_OP expression
    (43) binary_expression -> . expression MINUS_OP expression
    (44) binary_expression -> . expression MULT_OP expression
    (45) binary_expression -> . expression DIV_OP expression
    (46) binary_expression -> . expression EQ_OP expression
    (47) binary_expression -> . expression NE_OP expression
    (48) unary_expression -> . PLUS_OP expression
    (49) unary_expression -> . MINUS_OP expression
    (50) primary_expression -> . literal
    (51) primary_expression -> . IDENTIFIER
    (52) primary_expression -> . LPAREN_SPEC expression RPAREN_SPEC
    (53) literal -> . numeric_literal
    (54) literal -> . string_literal
    (55) literal -> . boolean_literal
    (56) literal -> . null_literal
    (57) numeric_literal -> . HEX_0
    (58) numeric_literal -> . HEX_1
    (59) numeric_literal -> . HEX_2
    (60) numeric_literal -> . HEX_3
    (61) numeric_literal -> . HEX_4
    (62) numeric_literal -> . HEX_5
    (63) numeric_literal -> . HEX_6
    (64) numeric_literal -> . HEX_7
    (65) numeric_literal -> . HEX_8
    (66) numeric_literal -> . HEX_9
    (67) numeric_literal -> . HEX_A
    (68) numeric_literal -> . HEX_B
    (69) numeric_literal -> . HEX_C
    (70) numeric_literal -> . HEX_D
    (71) numeric_literal -> . HEX_E
    (72) numeric_literal -> . HEX_F
    (73) string_literal -> . STRING
    (74) boolean_literal -> . TRUE
    (75) boolean_literal -> . FALSE
    (76) null_literal -> . NULL

    IDENTIFIER      shift and go to state 14
    PLUS_OP         shift and go to state 34
    MINUS_OP        shift and go to state 35
    LPAREN_SPEC     shift and go to state 18
    HEX_0           shift and go to state 41
    HEX_1           shift and go to state 42
    HEX_2           shift and go to state 43
    HEX_3           shift and go to state 44
    HEX_4           shift and go to state 45
    HEX_5           shift and go to state 46
    HEX_6           shift and go to state 47
    HEX_7           shift and go to state 48
    HEX_8           shift and go to state 49
    HEX_9           shift and go to state 50
    HEX_A           shift and go to state 51
    HEX_B           shift and go to state 52
    HEX_C           shift and go to state 53
    HEX_D           shift and go to state 54
    HEX_E           shift and go to state 55
    HEX_F           shift and go to state 56
    STRING          shift and go to state 72
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NULL            shift and go to state 59

    expression                     shift and go to state 118
    assignment_expression          shift and go to state 30
    binary_expression              shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 33
    literal                        shift and go to state 36
    numeric_literal                shift and go to state 37
    string_literal                 shift and go to state 38
    boolean_literal                shift and go to state 39
    null_literal                   shift and go to state 40

state 114

    (36) case -> DEFAULT . COLON statement_list

    COLON           shift and go to state 119


state 115

    (24) if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .

    SEMICOLON_SPEC  reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    PRINT           reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    IF              reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    WHILE           reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    RETURN          reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    BREAK           reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    LBRACE_SPEC     reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    SWITCH          reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    ENTERO          reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    FLOTANTE        reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    STRING          reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    CHAR            reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    ARRAY           reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    IDENTIFIER      reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    PLUS_OP         reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    MINUS_OP        reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    LPAREN_SPEC     reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    HEX_0           reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    HEX_1           reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    HEX_2           reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    HEX_3           reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    HEX_4           reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    HEX_5           reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    HEX_6           reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    HEX_7           reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    HEX_8           reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    HEX_9           reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    HEX_A           reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    HEX_B           reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    HEX_C           reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    HEX_D           reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    HEX_E           reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    HEX_F           reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    TRUE            reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    FALSE           reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    NULL            reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    $end            reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    RBRACE_SPEC     reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    ELSE            reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    CASE            reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)
    DEFAULT         reduce using rule 24 (if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement .)


state 116

    (31) switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .

    SEMICOLON_SPEC  reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    PRINT           reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    IF              reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    WHILE           reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    RETURN          reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    BREAK           reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    LBRACE_SPEC     reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    SWITCH          reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    ENTERO          reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    FLOTANTE        reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    STRING          reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    CHAR            reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    ARRAY           reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    IDENTIFIER      reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    PLUS_OP         reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    MINUS_OP        reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    LPAREN_SPEC     reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    HEX_0           reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    HEX_1           reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    HEX_2           reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    HEX_3           reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    HEX_4           reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    HEX_5           reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    HEX_6           reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    HEX_7           reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    HEX_8           reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    HEX_9           reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    HEX_A           reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    HEX_B           reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    HEX_C           reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    HEX_D           reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    HEX_E           reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    HEX_F           reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    TRUE            reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    FALSE           reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    NULL            reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    $end            reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    RBRACE_SPEC     reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    ELSE            reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    CASE            reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)
    DEFAULT         reduce using rule 31 (switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC .)


state 117

    (34) case_list -> case_list case .

    RBRACE_SPEC     reduce using rule 34 (case_list -> case_list case .)
    CASE            reduce using rule 34 (case_list -> case_list case .)
    DEFAULT         reduce using rule 34 (case_list -> case_list case .)


state 118

    (35) case -> CASE expression . COLON statement_list
    (42) binary_expression -> expression . PLUS_OP expression
    (43) binary_expression -> expression . MINUS_OP expression
    (44) binary_expression -> expression . MULT_OP expression
    (45) binary_expression -> expression . DIV_OP expression
    (46) binary_expression -> expression . EQ_OP expression
    (47) binary_expression -> expression . NE_OP expression

    COLON           shift and go to state 120
    PLUS_OP         shift and go to state 64
    MINUS_OP        shift and go to state 65
    MULT_OP         shift and go to state 66
    DIV_OP          shift and go to state 67
    EQ_OP           shift and go to state 68
    NE_OP           shift and go to state 69


state 119

    (36) case -> DEFAULT COLON . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration_statement
    (5) statement -> . expression_statement
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . while_statement
    (9) statement -> . return_statement
    (10) statement -> . break_statement
    (11) statement -> . block_statement
    (12) statement -> . switch_statement
    (13) declaration_statement -> . type IDENTIFIER SEMICOLON_SPEC
    (14) declaration_statement -> . type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC
    (20) expression_statement -> . expression SEMICOLON_SPEC
    (21) expression_statement -> . SEMICOLON_SPEC
    (22) print_statement -> . PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC
    (23) if_statement -> . IF LPAREN_SPEC expression RPAREN_SPEC statement
    (24) if_statement -> . IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement
    (25) while_statement -> . WHILE LPAREN_SPEC expression RPAREN_SPEC statement
    (26) return_statement -> . RETURN expression SEMICOLON_SPEC
    (27) return_statement -> . RETURN SEMICOLON_SPEC
    (28) break_statement -> . BREAK SEMICOLON_SPEC
    (29) block_statement -> . LBRACE_SPEC statement_list RBRACE_SPEC
    (30) block_statement -> . LBRACE_SPEC RBRACE_SPEC
    (31) switch_statement -> . SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC
    (32) switch_statement -> . SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC
    (15) type -> . ENTERO
    (16) type -> . FLOTANTE
    (17) type -> . STRING
    (18) type -> . CHAR
    (19) type -> . ARRAY
    (37) expression -> . assignment_expression
    (38) expression -> . binary_expression
    (39) expression -> . unary_expression
    (40) expression -> . primary_expression
    (41) assignment_expression -> . IDENTIFIER ASSIGN_OP expression
    (42) binary_expression -> . expression PLUS_OP expression
    (43) binary_expression -> . expression MINUS_OP expression
    (44) binary_expression -> . expression MULT_OP expression
    (45) binary_expression -> . expression DIV_OP expression
    (46) binary_expression -> . expression EQ_OP expression
    (47) binary_expression -> . expression NE_OP expression
    (48) unary_expression -> . PLUS_OP expression
    (49) unary_expression -> . MINUS_OP expression
    (50) primary_expression -> . literal
    (51) primary_expression -> . IDENTIFIER
    (52) primary_expression -> . LPAREN_SPEC expression RPAREN_SPEC
    (53) literal -> . numeric_literal
    (54) literal -> . string_literal
    (55) literal -> . boolean_literal
    (56) literal -> . null_literal
    (57) numeric_literal -> . HEX_0
    (58) numeric_literal -> . HEX_1
    (59) numeric_literal -> . HEX_2
    (60) numeric_literal -> . HEX_3
    (61) numeric_literal -> . HEX_4
    (62) numeric_literal -> . HEX_5
    (63) numeric_literal -> . HEX_6
    (64) numeric_literal -> . HEX_7
    (65) numeric_literal -> . HEX_8
    (66) numeric_literal -> . HEX_9
    (67) numeric_literal -> . HEX_A
    (68) numeric_literal -> . HEX_B
    (69) numeric_literal -> . HEX_C
    (70) numeric_literal -> . HEX_D
    (71) numeric_literal -> . HEX_E
    (72) numeric_literal -> . HEX_F
    (73) string_literal -> . STRING
    (74) boolean_literal -> . TRUE
    (75) boolean_literal -> . FALSE
    (76) null_literal -> . NULL

    SEMICOLON_SPEC  shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    RETURN          shift and go to state 21
    BREAK           shift and go to state 22
    LBRACE_SPEC     shift and go to state 23
    SWITCH          shift and go to state 24
    ENTERO          shift and go to state 25
    FLOTANTE        shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    ARRAY           shift and go to state 29
    IDENTIFIER      shift and go to state 14
    PLUS_OP         shift and go to state 34
    MINUS_OP        shift and go to state 35
    LPAREN_SPEC     shift and go to state 18
    HEX_0           shift and go to state 41
    HEX_1           shift and go to state 42
    HEX_2           shift and go to state 43
    HEX_3           shift and go to state 44
    HEX_4           shift and go to state 45
    HEX_5           shift and go to state 46
    HEX_6           shift and go to state 47
    HEX_7           shift and go to state 48
    HEX_8           shift and go to state 49
    HEX_9           shift and go to state 50
    HEX_A           shift and go to state 51
    HEX_B           shift and go to state 52
    HEX_C           shift and go to state 53
    HEX_D           shift and go to state 54
    HEX_E           shift and go to state 55
    HEX_F           shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NULL            shift and go to state 59

    statement_list                 shift and go to state 121
    statement                      shift and go to state 3
    declaration_statement          shift and go to state 4
    expression_statement           shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8
    return_statement               shift and go to state 9
    break_statement                shift and go to state 10
    block_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    type                           shift and go to state 13
    expression                     shift and go to state 16
    assignment_expression          shift and go to state 30
    binary_expression              shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 33
    literal                        shift and go to state 36
    numeric_literal                shift and go to state 37
    string_literal                 shift and go to state 38
    boolean_literal                shift and go to state 39
    null_literal                   shift and go to state 40

state 120

    (35) case -> CASE expression COLON . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration_statement
    (5) statement -> . expression_statement
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . while_statement
    (9) statement -> . return_statement
    (10) statement -> . break_statement
    (11) statement -> . block_statement
    (12) statement -> . switch_statement
    (13) declaration_statement -> . type IDENTIFIER SEMICOLON_SPEC
    (14) declaration_statement -> . type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC
    (20) expression_statement -> . expression SEMICOLON_SPEC
    (21) expression_statement -> . SEMICOLON_SPEC
    (22) print_statement -> . PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC
    (23) if_statement -> . IF LPAREN_SPEC expression RPAREN_SPEC statement
    (24) if_statement -> . IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement
    (25) while_statement -> . WHILE LPAREN_SPEC expression RPAREN_SPEC statement
    (26) return_statement -> . RETURN expression SEMICOLON_SPEC
    (27) return_statement -> . RETURN SEMICOLON_SPEC
    (28) break_statement -> . BREAK SEMICOLON_SPEC
    (29) block_statement -> . LBRACE_SPEC statement_list RBRACE_SPEC
    (30) block_statement -> . LBRACE_SPEC RBRACE_SPEC
    (31) switch_statement -> . SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC
    (32) switch_statement -> . SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC
    (15) type -> . ENTERO
    (16) type -> . FLOTANTE
    (17) type -> . STRING
    (18) type -> . CHAR
    (19) type -> . ARRAY
    (37) expression -> . assignment_expression
    (38) expression -> . binary_expression
    (39) expression -> . unary_expression
    (40) expression -> . primary_expression
    (41) assignment_expression -> . IDENTIFIER ASSIGN_OP expression
    (42) binary_expression -> . expression PLUS_OP expression
    (43) binary_expression -> . expression MINUS_OP expression
    (44) binary_expression -> . expression MULT_OP expression
    (45) binary_expression -> . expression DIV_OP expression
    (46) binary_expression -> . expression EQ_OP expression
    (47) binary_expression -> . expression NE_OP expression
    (48) unary_expression -> . PLUS_OP expression
    (49) unary_expression -> . MINUS_OP expression
    (50) primary_expression -> . literal
    (51) primary_expression -> . IDENTIFIER
    (52) primary_expression -> . LPAREN_SPEC expression RPAREN_SPEC
    (53) literal -> . numeric_literal
    (54) literal -> . string_literal
    (55) literal -> . boolean_literal
    (56) literal -> . null_literal
    (57) numeric_literal -> . HEX_0
    (58) numeric_literal -> . HEX_1
    (59) numeric_literal -> . HEX_2
    (60) numeric_literal -> . HEX_3
    (61) numeric_literal -> . HEX_4
    (62) numeric_literal -> . HEX_5
    (63) numeric_literal -> . HEX_6
    (64) numeric_literal -> . HEX_7
    (65) numeric_literal -> . HEX_8
    (66) numeric_literal -> . HEX_9
    (67) numeric_literal -> . HEX_A
    (68) numeric_literal -> . HEX_B
    (69) numeric_literal -> . HEX_C
    (70) numeric_literal -> . HEX_D
    (71) numeric_literal -> . HEX_E
    (72) numeric_literal -> . HEX_F
    (73) string_literal -> . STRING
    (74) boolean_literal -> . TRUE
    (75) boolean_literal -> . FALSE
    (76) null_literal -> . NULL

    SEMICOLON_SPEC  shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    RETURN          shift and go to state 21
    BREAK           shift and go to state 22
    LBRACE_SPEC     shift and go to state 23
    SWITCH          shift and go to state 24
    ENTERO          shift and go to state 25
    FLOTANTE        shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    ARRAY           shift and go to state 29
    IDENTIFIER      shift and go to state 14
    PLUS_OP         shift and go to state 34
    MINUS_OP        shift and go to state 35
    LPAREN_SPEC     shift and go to state 18
    HEX_0           shift and go to state 41
    HEX_1           shift and go to state 42
    HEX_2           shift and go to state 43
    HEX_3           shift and go to state 44
    HEX_4           shift and go to state 45
    HEX_5           shift and go to state 46
    HEX_6           shift and go to state 47
    HEX_7           shift and go to state 48
    HEX_8           shift and go to state 49
    HEX_9           shift and go to state 50
    HEX_A           shift and go to state 51
    HEX_B           shift and go to state 52
    HEX_C           shift and go to state 53
    HEX_D           shift and go to state 54
    HEX_E           shift and go to state 55
    HEX_F           shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NULL            shift and go to state 59

    expression                     shift and go to state 16
    statement_list                 shift and go to state 122
    statement                      shift and go to state 3
    declaration_statement          shift and go to state 4
    expression_statement           shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8
    return_statement               shift and go to state 9
    break_statement                shift and go to state 10
    block_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    type                           shift and go to state 13
    assignment_expression          shift and go to state 30
    binary_expression              shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 33
    literal                        shift and go to state 36
    numeric_literal                shift and go to state 37
    string_literal                 shift and go to state 38
    boolean_literal                shift and go to state 39
    null_literal                   shift and go to state 40

state 121

    (36) case -> DEFAULT COLON statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . expression_statement
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . while_statement
    (9) statement -> . return_statement
    (10) statement -> . break_statement
    (11) statement -> . block_statement
    (12) statement -> . switch_statement
    (13) declaration_statement -> . type IDENTIFIER SEMICOLON_SPEC
    (14) declaration_statement -> . type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC
    (20) expression_statement -> . expression SEMICOLON_SPEC
    (21) expression_statement -> . SEMICOLON_SPEC
    (22) print_statement -> . PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC
    (23) if_statement -> . IF LPAREN_SPEC expression RPAREN_SPEC statement
    (24) if_statement -> . IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement
    (25) while_statement -> . WHILE LPAREN_SPEC expression RPAREN_SPEC statement
    (26) return_statement -> . RETURN expression SEMICOLON_SPEC
    (27) return_statement -> . RETURN SEMICOLON_SPEC
    (28) break_statement -> . BREAK SEMICOLON_SPEC
    (29) block_statement -> . LBRACE_SPEC statement_list RBRACE_SPEC
    (30) block_statement -> . LBRACE_SPEC RBRACE_SPEC
    (31) switch_statement -> . SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC
    (32) switch_statement -> . SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC
    (15) type -> . ENTERO
    (16) type -> . FLOTANTE
    (17) type -> . STRING
    (18) type -> . CHAR
    (19) type -> . ARRAY
    (37) expression -> . assignment_expression
    (38) expression -> . binary_expression
    (39) expression -> . unary_expression
    (40) expression -> . primary_expression
    (41) assignment_expression -> . IDENTIFIER ASSIGN_OP expression
    (42) binary_expression -> . expression PLUS_OP expression
    (43) binary_expression -> . expression MINUS_OP expression
    (44) binary_expression -> . expression MULT_OP expression
    (45) binary_expression -> . expression DIV_OP expression
    (46) binary_expression -> . expression EQ_OP expression
    (47) binary_expression -> . expression NE_OP expression
    (48) unary_expression -> . PLUS_OP expression
    (49) unary_expression -> . MINUS_OP expression
    (50) primary_expression -> . literal
    (51) primary_expression -> . IDENTIFIER
    (52) primary_expression -> . LPAREN_SPEC expression RPAREN_SPEC
    (53) literal -> . numeric_literal
    (54) literal -> . string_literal
    (55) literal -> . boolean_literal
    (56) literal -> . null_literal
    (57) numeric_literal -> . HEX_0
    (58) numeric_literal -> . HEX_1
    (59) numeric_literal -> . HEX_2
    (60) numeric_literal -> . HEX_3
    (61) numeric_literal -> . HEX_4
    (62) numeric_literal -> . HEX_5
    (63) numeric_literal -> . HEX_6
    (64) numeric_literal -> . HEX_7
    (65) numeric_literal -> . HEX_8
    (66) numeric_literal -> . HEX_9
    (67) numeric_literal -> . HEX_A
    (68) numeric_literal -> . HEX_B
    (69) numeric_literal -> . HEX_C
    (70) numeric_literal -> . HEX_D
    (71) numeric_literal -> . HEX_E
    (72) numeric_literal -> . HEX_F
    (73) string_literal -> . STRING
    (74) boolean_literal -> . TRUE
    (75) boolean_literal -> . FALSE
    (76) null_literal -> . NULL

    RBRACE_SPEC     reduce using rule 36 (case -> DEFAULT COLON statement_list .)
    CASE            reduce using rule 36 (case -> DEFAULT COLON statement_list .)
    DEFAULT         reduce using rule 36 (case -> DEFAULT COLON statement_list .)
    SEMICOLON_SPEC  shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    RETURN          shift and go to state 21
    BREAK           shift and go to state 22
    LBRACE_SPEC     shift and go to state 23
    SWITCH          shift and go to state 24
    ENTERO          shift and go to state 25
    FLOTANTE        shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    ARRAY           shift and go to state 29
    IDENTIFIER      shift and go to state 14
    PLUS_OP         shift and go to state 34
    MINUS_OP        shift and go to state 35
    LPAREN_SPEC     shift and go to state 18
    HEX_0           shift and go to state 41
    HEX_1           shift and go to state 42
    HEX_2           shift and go to state 43
    HEX_3           shift and go to state 44
    HEX_4           shift and go to state 45
    HEX_5           shift and go to state 46
    HEX_6           shift and go to state 47
    HEX_7           shift and go to state 48
    HEX_8           shift and go to state 49
    HEX_9           shift and go to state 50
    HEX_A           shift and go to state 51
    HEX_B           shift and go to state 52
    HEX_C           shift and go to state 53
    HEX_D           shift and go to state 54
    HEX_E           shift and go to state 55
    HEX_F           shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NULL            shift and go to state 59

    statement                      shift and go to state 60
    declaration_statement          shift and go to state 4
    expression_statement           shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8
    return_statement               shift and go to state 9
    break_statement                shift and go to state 10
    block_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    type                           shift and go to state 13
    expression                     shift and go to state 16
    assignment_expression          shift and go to state 30
    binary_expression              shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 33
    literal                        shift and go to state 36
    numeric_literal                shift and go to state 37
    string_literal                 shift and go to state 38
    boolean_literal                shift and go to state 39
    null_literal                   shift and go to state 40

state 122

    (35) case -> CASE expression COLON statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration_statement
    (5) statement -> . expression_statement
    (6) statement -> . print_statement
    (7) statement -> . if_statement
    (8) statement -> . while_statement
    (9) statement -> . return_statement
    (10) statement -> . break_statement
    (11) statement -> . block_statement
    (12) statement -> . switch_statement
    (13) declaration_statement -> . type IDENTIFIER SEMICOLON_SPEC
    (14) declaration_statement -> . type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC
    (20) expression_statement -> . expression SEMICOLON_SPEC
    (21) expression_statement -> . SEMICOLON_SPEC
    (22) print_statement -> . PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC
    (23) if_statement -> . IF LPAREN_SPEC expression RPAREN_SPEC statement
    (24) if_statement -> . IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement
    (25) while_statement -> . WHILE LPAREN_SPEC expression RPAREN_SPEC statement
    (26) return_statement -> . RETURN expression SEMICOLON_SPEC
    (27) return_statement -> . RETURN SEMICOLON_SPEC
    (28) break_statement -> . BREAK SEMICOLON_SPEC
    (29) block_statement -> . LBRACE_SPEC statement_list RBRACE_SPEC
    (30) block_statement -> . LBRACE_SPEC RBRACE_SPEC
    (31) switch_statement -> . SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC
    (32) switch_statement -> . SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC
    (15) type -> . ENTERO
    (16) type -> . FLOTANTE
    (17) type -> . STRING
    (18) type -> . CHAR
    (19) type -> . ARRAY
    (37) expression -> . assignment_expression
    (38) expression -> . binary_expression
    (39) expression -> . unary_expression
    (40) expression -> . primary_expression
    (41) assignment_expression -> . IDENTIFIER ASSIGN_OP expression
    (42) binary_expression -> . expression PLUS_OP expression
    (43) binary_expression -> . expression MINUS_OP expression
    (44) binary_expression -> . expression MULT_OP expression
    (45) binary_expression -> . expression DIV_OP expression
    (46) binary_expression -> . expression EQ_OP expression
    (47) binary_expression -> . expression NE_OP expression
    (48) unary_expression -> . PLUS_OP expression
    (49) unary_expression -> . MINUS_OP expression
    (50) primary_expression -> . literal
    (51) primary_expression -> . IDENTIFIER
    (52) primary_expression -> . LPAREN_SPEC expression RPAREN_SPEC
    (53) literal -> . numeric_literal
    (54) literal -> . string_literal
    (55) literal -> . boolean_literal
    (56) literal -> . null_literal
    (57) numeric_literal -> . HEX_0
    (58) numeric_literal -> . HEX_1
    (59) numeric_literal -> . HEX_2
    (60) numeric_literal -> . HEX_3
    (61) numeric_literal -> . HEX_4
    (62) numeric_literal -> . HEX_5
    (63) numeric_literal -> . HEX_6
    (64) numeric_literal -> . HEX_7
    (65) numeric_literal -> . HEX_8
    (66) numeric_literal -> . HEX_9
    (67) numeric_literal -> . HEX_A
    (68) numeric_literal -> . HEX_B
    (69) numeric_literal -> . HEX_C
    (70) numeric_literal -> . HEX_D
    (71) numeric_literal -> . HEX_E
    (72) numeric_literal -> . HEX_F
    (73) string_literal -> . STRING
    (74) boolean_literal -> . TRUE
    (75) boolean_literal -> . FALSE
    (76) null_literal -> . NULL

    RBRACE_SPEC     reduce using rule 35 (case -> CASE expression COLON statement_list .)
    CASE            reduce using rule 35 (case -> CASE expression COLON statement_list .)
    DEFAULT         reduce using rule 35 (case -> CASE expression COLON statement_list .)
    SEMICOLON_SPEC  shift and go to state 15
    PRINT           shift and go to state 17
    IF              shift and go to state 19
    WHILE           shift and go to state 20
    RETURN          shift and go to state 21
    BREAK           shift and go to state 22
    LBRACE_SPEC     shift and go to state 23
    SWITCH          shift and go to state 24
    ENTERO          shift and go to state 25
    FLOTANTE        shift and go to state 26
    STRING          shift and go to state 27
    CHAR            shift and go to state 28
    ARRAY           shift and go to state 29
    IDENTIFIER      shift and go to state 14
    PLUS_OP         shift and go to state 34
    MINUS_OP        shift and go to state 35
    LPAREN_SPEC     shift and go to state 18
    HEX_0           shift and go to state 41
    HEX_1           shift and go to state 42
    HEX_2           shift and go to state 43
    HEX_3           shift and go to state 44
    HEX_4           shift and go to state 45
    HEX_5           shift and go to state 46
    HEX_6           shift and go to state 47
    HEX_7           shift and go to state 48
    HEX_8           shift and go to state 49
    HEX_9           shift and go to state 50
    HEX_A           shift and go to state 51
    HEX_B           shift and go to state 52
    HEX_C           shift and go to state 53
    HEX_D           shift and go to state 54
    HEX_E           shift and go to state 55
    HEX_F           shift and go to state 56
    TRUE            shift and go to state 57
    FALSE           shift and go to state 58
    NULL            shift and go to state 59

    expression                     shift and go to state 16
    statement                      shift and go to state 60
    declaration_statement          shift and go to state 4
    expression_statement           shift and go to state 5
    print_statement                shift and go to state 6
    if_statement                   shift and go to state 7
    while_statement                shift and go to state 8
    return_statement               shift and go to state 9
    break_statement                shift and go to state 10
    block_statement                shift and go to state 11
    switch_statement               shift and go to state 12
    type                           shift and go to state 13
    assignment_expression          shift and go to state 30
    binary_expression              shift and go to state 31
    unary_expression               shift and go to state 32
    primary_expression             shift and go to state 33
    literal                        shift and go to state 36
    numeric_literal                shift and go to state 37
    string_literal                 shift and go to state 38
    boolean_literal                shift and go to state 39
    null_literal                   shift and go to state 40
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS_OP in state 85 resolved as shift
WARNING: shift/reduce conflict for MINUS_OP in state 85 resolved as shift
WARNING: shift/reduce conflict for MULT_OP in state 85 resolved as shift
WARNING: shift/reduce conflict for DIV_OP in state 85 resolved as shift
WARNING: shift/reduce conflict for EQ_OP in state 85 resolved as shift
WARNING: shift/reduce conflict for NE_OP in state 85 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 106 resolved as shift
