
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQ_OPNE_OPleftPLUS_OPMINUS_OPleftMULT_OPDIV_OPAMPERSAND ARRAY ASSIGN_OP ASTERISK AT BACKSLASH BREAK CARET CASE CHAR COLON COMMA DEFAULT DIV_OP DOLLAR DOT DOUBLE_QUOTE ELSE ENTERO EQUALS EQ_OP EXCLAMATION FALSE FLOTANTE GRAVE GREATER_THAN HASH HEX_0 HEX_1 HEX_2 HEX_3 HEX_4 HEX_5 HEX_6 HEX_7 HEX_8 HEX_9 HEX_A HEX_B HEX_C HEX_D HEX_E HEX_F HT IDENTIFIER IF LBRACE LBRACE_SPEC LBRACKET LBRACKET_SPEC LESS_THAN LPAREN LPAREN_SPEC MINUS MINUS_OP MULT_OP NE_OP NULL NULL_CHAR PERCENT PLUS PLUS_OP PRINT QUESTION RBRACE RBRACE_SPEC RBRACKET RBRACKET_SPEC RETURN RPAREN RPAREN_SPEC SEMICOLON SEMICOLON_SPEC SINGLE_QUOTE SLASH SPACE STRING SWITCH TILDE TRUE UNDERSCORE VERTICAL_BAR WHILEprogram : statement_liststatement_list : statement\n| statement_list statementstatement : declaration_statement\n| expression_statement\n| print_statement\n| if_statement\n| while_statement\n| return_statement\n| break_statement\n| block_statement\n| switch_statementdeclaration_statement : type IDENTIFIER SEMICOLON_SPEC\n| type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPECtype : ENTERO\n| FLOTANTE\n| STRING\n| CHAR\n| ARRAYexpression_statement : expression SEMICOLON_SPEC\n| SEMICOLON_SPECprint_statement : PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPECif_statement : IF LPAREN_SPEC expression RPAREN_SPEC statement\n| IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statementwhile_statement : WHILE LPAREN_SPEC expression RPAREN_SPEC statementreturn_statement : RETURN expression SEMICOLON_SPEC\n| RETURN SEMICOLON_SPECbreak_statement : BREAK SEMICOLON_SPECblock_statement : LBRACE_SPEC statement_list RBRACE_SPEC\n| LBRACE_SPEC RBRACE_SPECswitch_statement : SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC\n| SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPECcase_list : case\n| case_list casecase : CASE expression COLON statement_list\n| DEFAULT COLON statement_listexpression : assignment_expression\n| binary_expression\n| unary_expression\n| primary_expressionassignment_expression : IDENTIFIER ASSIGN_OP expressionbinary_expression : expression PLUS_OP expression\n| expression MINUS_OP expression\n| expression MULT_OP expression\n| expression DIV_OP expression\n| expression EQ_OP expression\n| expression NE_OP expressionunary_expression : PLUS_OP expression\n| MINUS_OP expressionprimary_expression : literal\n| IDENTIFIER\n| LPAREN_SPEC expression RPAREN_SPECliteral : numeric_literal\n| string_literal\n| boolean_literal\n| null_literalnumeric_literal : HEX_0\n| HEX_1\n| HEX_2\n| HEX_3\n| HEX_4\n| HEX_5\n| HEX_6\n| HEX_7\n| HEX_8\n| HEX_9\n| HEX_A\n| HEX_B\n| HEX_C\n| HEX_D\n| HEX_E\n| HEX_Fstring_literal : STRINGboolean_literal : TRUE\n| FALSEnull_literal : NULL'
    
_lr_action_items = {'SEMICOLON_SPEC':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,16,21,22,23,27,30,31,32,33,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,63,72,75,76,77,78,79,81,82,83,85,86,87,88,89,90,91,93,96,97,99,100,101,102,104,105,106,107,109,111,115,116,119,120,121,122,],[15,15,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-51,-21,63,76,77,15,-73,-37,-38,-39,-40,-50,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-74,-75,-76,-3,83,-20,-73,96,-27,-28,15,-30,-48,-49,-13,-41,-42,-43,-44,-45,-46,-47,-52,-26,-29,104,105,15,15,-14,-22,-23,-25,15,-32,-24,-31,15,15,15,15,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,15,23,60,63,76,77,78,79,83,96,97,101,102,104,105,106,107,109,111,115,116,119,120,121,122,],[17,17,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,17,-3,-20,-27,-28,17,-30,-13,-26,-29,17,17,-14,-22,-23,-25,17,-32,-24,-31,17,17,17,17,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,15,23,60,63,76,77,78,79,83,96,97,101,102,104,105,106,107,109,111,115,116,119,120,121,122,],[19,19,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,19,-3,-20,-27,-28,19,-30,-13,-26,-29,19,19,-14,-22,-23,-25,19,-32,-24,-31,19,19,19,19,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,15,23,60,63,76,77,78,79,83,96,97,101,102,104,105,106,107,109,111,115,116,119,120,121,122,],[20,20,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,20,-3,-20,-27,-28,20,-30,-13,-26,-29,20,20,-14,-22,-23,-25,20,-32,-24,-31,20,20,20,20,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,11,12,15,23,60,63,76,77,78,79,83,96,97,101,102,104,105,106,107,109,111,115,116,119,120,121,122,],[21,21,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,21,-3,-20,-27,-28,21,-30,-13,-26,-29,21,21,-14,-22,-23,-25,21,-32,-24,-31,21,21,21,21,]),'BREAK':([0,2,3,4,5,6,7,8,9,10,11,12,15,23,60,63,76,77,78,79,83,96,97,101,102,104,105,106,107,109,111,115,116,119,120,121,122,],[22,22,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,22,-3,-20,-27,-28,22,-30,-13,-26,-29,22,22,-14,-22,-23,-25,22,-32,-24,-31,22,22,22,22,]),'LBRACE_SPEC':([0,2,3,4,5,6,7,8,9,10,11,12,15,23,60,63,76,77,78,79,83,96,97,101,102,103,104,105,106,107,109,111,115,116,119,120,121,122,],[23,23,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,23,-3,-20,-27,-28,23,-30,-13,-26,-29,23,23,108,-14,-22,-23,-25,23,-32,-24,-31,23,23,23,23,]),'SWITCH':([0,2,3,4,5,6,7,8,9,10,11,12,15,23,60,63,76,77,78,79,83,96,97,101,102,104,105,106,107,109,111,115,116,119,120,121,122,],[24,24,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,24,-3,-20,-27,-28,24,-30,-13,-26,-29,24,24,-14,-22,-23,-25,24,-32,-24,-31,24,24,24,24,]),'ENTERO':([0,2,3,4,5,6,7,8,9,10,11,12,15,23,60,63,76,77,78,79,83,96,97,101,102,104,105,106,107,109,111,115,116,119,120,121,122,],[25,25,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,25,-3,-20,-27,-28,25,-30,-13,-26,-29,25,25,-14,-22,-23,-25,25,-32,-24,-31,25,25,25,25,]),'FLOTANTE':([0,2,3,4,5,6,7,8,9,10,11,12,15,23,60,63,76,77,78,79,83,96,97,101,102,104,105,106,107,109,111,115,116,119,120,121,122,],[26,26,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,26,-3,-20,-27,-28,26,-30,-13,-26,-29,26,26,-14,-22,-23,-25,26,-32,-24,-31,26,26,26,26,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,15,18,21,23,34,35,60,62,63,64,65,66,67,68,69,70,73,74,76,77,78,79,80,83,84,96,97,101,102,104,105,106,107,109,111,113,115,116,119,120,121,122,],[27,27,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,72,72,27,72,72,-3,72,-20,72,72,72,72,72,72,72,72,72,-27,-28,27,-30,72,-13,72,-26,-29,27,27,-14,-22,-23,-25,27,-32,72,-24,-31,27,27,27,27,]),'CHAR':([0,2,3,4,5,6,7,8,9,10,11,12,15,23,60,63,76,77,78,79,83,96,97,101,102,104,105,106,107,109,111,115,116,119,120,121,122,],[28,28,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,28,-3,-20,-27,-28,28,-30,-13,-26,-29,28,28,-14,-22,-23,-25,28,-32,-24,-31,28,28,28,28,]),'ARRAY':([0,2,3,4,5,6,7,8,9,10,11,12,15,23,60,63,76,77,78,79,83,96,97,101,102,104,105,106,107,109,111,115,116,119,120,121,122,],[29,29,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,29,-3,-20,-27,-28,29,-30,-13,-26,-29,29,29,-14,-22,-23,-25,29,-32,-24,-31,29,29,29,29,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,18,21,23,25,26,27,28,29,34,35,60,62,63,64,65,66,67,68,69,70,73,74,76,77,78,79,80,83,84,96,97,101,102,104,105,106,107,109,111,113,115,116,119,120,121,122,],[14,14,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,61,-21,14,14,14,-15,-16,-17,-18,-19,14,14,-3,14,-20,14,14,14,14,14,14,14,14,14,-27,-28,14,-30,14,-13,14,-26,-29,14,14,-14,-22,-23,-25,14,-32,14,-24,-31,14,14,14,14,]),'PLUS_OP':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,16,18,21,23,27,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,104,105,106,107,109,111,113,115,116,118,119,120,121,122,],[34,34,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-51,-21,64,34,34,34,-73,-37,-38,-39,-40,34,34,-50,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-74,-75,-76,-3,34,-20,34,34,34,34,34,34,34,64,-73,34,34,64,-27,-28,34,-30,34,-48,-49,-13,34,64,-42,-43,-44,-45,64,64,64,-52,64,64,-26,-29,64,64,34,34,-14,-22,-23,-25,34,-32,34,-24,-31,64,34,34,34,34,]),'MINUS_OP':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,16,18,21,23,27,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,104,105,106,107,109,111,113,115,116,118,119,120,121,122,],[35,35,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-51,-21,65,35,35,35,-73,-37,-38,-39,-40,35,35,-50,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-74,-75,-76,-3,35,-20,35,35,35,35,35,35,35,65,-73,35,35,65,-27,-28,35,-30,35,-48,-49,-13,35,65,-42,-43,-44,-45,65,65,65,-52,65,65,-26,-29,65,65,35,35,-14,-22,-23,-25,35,-32,35,-24,-31,65,35,35,35,35,]),'LPAREN_SPEC':([0,2,3,4,5,6,7,8,9,10,11,12,15,17,18,19,20,21,23,24,34,35,60,62,63,64,65,66,67,68,69,70,73,74,76,77,78,79,80,83,84,96,97,101,102,104,105,106,107,109,111,113,115,116,119,120,121,122,],[18,18,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,70,18,73,74,18,18,80,18,18,-3,18,-20,18,18,18,18,18,18,18,18,18,-27,-28,18,-30,18,-13,18,-26,-29,18,18,-14,-22,-23,-25,18,-32,18,-24,-31,18,18,18,18,]),'HEX_0':([0,2,3,4,5,6,7,8,9,10,11,12,15,18,21,23,34,35,60,62,63,64,65,66,67,68,69,70,73,74,76,77,78,79,80,83,84,96,97,101,102,104,105,106,107,109,111,113,115,116,119,120,121,122,],[41,41,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,41,41,41,41,41,-3,41,-20,41,41,41,41,41,41,41,41,41,-27,-28,41,-30,41,-13,41,-26,-29,41,41,-14,-22,-23,-25,41,-32,41,-24,-31,41,41,41,41,]),'HEX_1':([0,2,3,4,5,6,7,8,9,10,11,12,15,18,21,23,34,35,60,62,63,64,65,66,67,68,69,70,73,74,76,77,78,79,80,83,84,96,97,101,102,104,105,106,107,109,111,113,115,116,119,120,121,122,],[42,42,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,42,42,42,42,42,-3,42,-20,42,42,42,42,42,42,42,42,42,-27,-28,42,-30,42,-13,42,-26,-29,42,42,-14,-22,-23,-25,42,-32,42,-24,-31,42,42,42,42,]),'HEX_2':([0,2,3,4,5,6,7,8,9,10,11,12,15,18,21,23,34,35,60,62,63,64,65,66,67,68,69,70,73,74,76,77,78,79,80,83,84,96,97,101,102,104,105,106,107,109,111,113,115,116,119,120,121,122,],[43,43,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,43,43,43,43,43,-3,43,-20,43,43,43,43,43,43,43,43,43,-27,-28,43,-30,43,-13,43,-26,-29,43,43,-14,-22,-23,-25,43,-32,43,-24,-31,43,43,43,43,]),'HEX_3':([0,2,3,4,5,6,7,8,9,10,11,12,15,18,21,23,34,35,60,62,63,64,65,66,67,68,69,70,73,74,76,77,78,79,80,83,84,96,97,101,102,104,105,106,107,109,111,113,115,116,119,120,121,122,],[44,44,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,44,44,44,44,44,-3,44,-20,44,44,44,44,44,44,44,44,44,-27,-28,44,-30,44,-13,44,-26,-29,44,44,-14,-22,-23,-25,44,-32,44,-24,-31,44,44,44,44,]),'HEX_4':([0,2,3,4,5,6,7,8,9,10,11,12,15,18,21,23,34,35,60,62,63,64,65,66,67,68,69,70,73,74,76,77,78,79,80,83,84,96,97,101,102,104,105,106,107,109,111,113,115,116,119,120,121,122,],[45,45,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,45,45,45,45,45,-3,45,-20,45,45,45,45,45,45,45,45,45,-27,-28,45,-30,45,-13,45,-26,-29,45,45,-14,-22,-23,-25,45,-32,45,-24,-31,45,45,45,45,]),'HEX_5':([0,2,3,4,5,6,7,8,9,10,11,12,15,18,21,23,34,35,60,62,63,64,65,66,67,68,69,70,73,74,76,77,78,79,80,83,84,96,97,101,102,104,105,106,107,109,111,113,115,116,119,120,121,122,],[46,46,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,46,46,46,46,46,-3,46,-20,46,46,46,46,46,46,46,46,46,-27,-28,46,-30,46,-13,46,-26,-29,46,46,-14,-22,-23,-25,46,-32,46,-24,-31,46,46,46,46,]),'HEX_6':([0,2,3,4,5,6,7,8,9,10,11,12,15,18,21,23,34,35,60,62,63,64,65,66,67,68,69,70,73,74,76,77,78,79,80,83,84,96,97,101,102,104,105,106,107,109,111,113,115,116,119,120,121,122,],[47,47,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,47,47,47,47,47,-3,47,-20,47,47,47,47,47,47,47,47,47,-27,-28,47,-30,47,-13,47,-26,-29,47,47,-14,-22,-23,-25,47,-32,47,-24,-31,47,47,47,47,]),'HEX_7':([0,2,3,4,5,6,7,8,9,10,11,12,15,18,21,23,34,35,60,62,63,64,65,66,67,68,69,70,73,74,76,77,78,79,80,83,84,96,97,101,102,104,105,106,107,109,111,113,115,116,119,120,121,122,],[48,48,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,48,48,48,48,48,-3,48,-20,48,48,48,48,48,48,48,48,48,-27,-28,48,-30,48,-13,48,-26,-29,48,48,-14,-22,-23,-25,48,-32,48,-24,-31,48,48,48,48,]),'HEX_8':([0,2,3,4,5,6,7,8,9,10,11,12,15,18,21,23,34,35,60,62,63,64,65,66,67,68,69,70,73,74,76,77,78,79,80,83,84,96,97,101,102,104,105,106,107,109,111,113,115,116,119,120,121,122,],[49,49,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,49,49,49,49,49,-3,49,-20,49,49,49,49,49,49,49,49,49,-27,-28,49,-30,49,-13,49,-26,-29,49,49,-14,-22,-23,-25,49,-32,49,-24,-31,49,49,49,49,]),'HEX_9':([0,2,3,4,5,6,7,8,9,10,11,12,15,18,21,23,34,35,60,62,63,64,65,66,67,68,69,70,73,74,76,77,78,79,80,83,84,96,97,101,102,104,105,106,107,109,111,113,115,116,119,120,121,122,],[50,50,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,50,50,50,50,50,-3,50,-20,50,50,50,50,50,50,50,50,50,-27,-28,50,-30,50,-13,50,-26,-29,50,50,-14,-22,-23,-25,50,-32,50,-24,-31,50,50,50,50,]),'HEX_A':([0,2,3,4,5,6,7,8,9,10,11,12,15,18,21,23,34,35,60,62,63,64,65,66,67,68,69,70,73,74,76,77,78,79,80,83,84,96,97,101,102,104,105,106,107,109,111,113,115,116,119,120,121,122,],[51,51,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,51,51,51,51,51,-3,51,-20,51,51,51,51,51,51,51,51,51,-27,-28,51,-30,51,-13,51,-26,-29,51,51,-14,-22,-23,-25,51,-32,51,-24,-31,51,51,51,51,]),'HEX_B':([0,2,3,4,5,6,7,8,9,10,11,12,15,18,21,23,34,35,60,62,63,64,65,66,67,68,69,70,73,74,76,77,78,79,80,83,84,96,97,101,102,104,105,106,107,109,111,113,115,116,119,120,121,122,],[52,52,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,52,52,52,52,52,-3,52,-20,52,52,52,52,52,52,52,52,52,-27,-28,52,-30,52,-13,52,-26,-29,52,52,-14,-22,-23,-25,52,-32,52,-24,-31,52,52,52,52,]),'HEX_C':([0,2,3,4,5,6,7,8,9,10,11,12,15,18,21,23,34,35,60,62,63,64,65,66,67,68,69,70,73,74,76,77,78,79,80,83,84,96,97,101,102,104,105,106,107,109,111,113,115,116,119,120,121,122,],[53,53,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,53,53,53,53,53,-3,53,-20,53,53,53,53,53,53,53,53,53,-27,-28,53,-30,53,-13,53,-26,-29,53,53,-14,-22,-23,-25,53,-32,53,-24,-31,53,53,53,53,]),'HEX_D':([0,2,3,4,5,6,7,8,9,10,11,12,15,18,21,23,34,35,60,62,63,64,65,66,67,68,69,70,73,74,76,77,78,79,80,83,84,96,97,101,102,104,105,106,107,109,111,113,115,116,119,120,121,122,],[54,54,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,54,54,54,54,54,-3,54,-20,54,54,54,54,54,54,54,54,54,-27,-28,54,-30,54,-13,54,-26,-29,54,54,-14,-22,-23,-25,54,-32,54,-24,-31,54,54,54,54,]),'HEX_E':([0,2,3,4,5,6,7,8,9,10,11,12,15,18,21,23,34,35,60,62,63,64,65,66,67,68,69,70,73,74,76,77,78,79,80,83,84,96,97,101,102,104,105,106,107,109,111,113,115,116,119,120,121,122,],[55,55,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,55,55,55,55,55,-3,55,-20,55,55,55,55,55,55,55,55,55,-27,-28,55,-30,55,-13,55,-26,-29,55,55,-14,-22,-23,-25,55,-32,55,-24,-31,55,55,55,55,]),'HEX_F':([0,2,3,4,5,6,7,8,9,10,11,12,15,18,21,23,34,35,60,62,63,64,65,66,67,68,69,70,73,74,76,77,78,79,80,83,84,96,97,101,102,104,105,106,107,109,111,113,115,116,119,120,121,122,],[56,56,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,56,56,56,56,56,-3,56,-20,56,56,56,56,56,56,56,56,56,-27,-28,56,-30,56,-13,56,-26,-29,56,56,-14,-22,-23,-25,56,-32,56,-24,-31,56,56,56,56,]),'TRUE':([0,2,3,4,5,6,7,8,9,10,11,12,15,18,21,23,34,35,60,62,63,64,65,66,67,68,69,70,73,74,76,77,78,79,80,83,84,96,97,101,102,104,105,106,107,109,111,113,115,116,119,120,121,122,],[57,57,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,57,57,57,57,57,-3,57,-20,57,57,57,57,57,57,57,57,57,-27,-28,57,-30,57,-13,57,-26,-29,57,57,-14,-22,-23,-25,57,-32,57,-24,-31,57,57,57,57,]),'FALSE':([0,2,3,4,5,6,7,8,9,10,11,12,15,18,21,23,34,35,60,62,63,64,65,66,67,68,69,70,73,74,76,77,78,79,80,83,84,96,97,101,102,104,105,106,107,109,111,113,115,116,119,120,121,122,],[58,58,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,58,58,58,58,58,-3,58,-20,58,58,58,58,58,58,58,58,58,-27,-28,58,-30,58,-13,58,-26,-29,58,58,-14,-22,-23,-25,58,-32,58,-24,-31,58,58,58,58,]),'NULL':([0,2,3,4,5,6,7,8,9,10,11,12,15,18,21,23,34,35,60,62,63,64,65,66,67,68,69,70,73,74,76,77,78,79,80,83,84,96,97,101,102,104,105,106,107,109,111,113,115,116,119,120,121,122,],[59,59,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,59,59,59,59,59,-3,59,-20,59,59,59,59,59,59,59,59,59,-27,-28,59,-30,59,-13,59,-26,-29,59,59,-14,-22,-23,-25,59,-32,59,-24,-31,59,59,59,59,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,15,60,63,76,77,79,83,96,97,104,105,106,107,111,115,116,],[0,-1,-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,-3,-20,-27,-28,-30,-13,-26,-29,-14,-22,-23,-25,-32,-24,-31,]),'RBRACE_SPEC':([3,4,5,6,7,8,9,10,11,12,15,23,60,63,76,77,78,79,83,96,97,104,105,106,107,108,110,111,112,115,116,117,121,122,],[-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,79,-3,-20,-27,-28,97,-30,-13,-26,-29,-14,-22,-23,-25,111,116,-32,-33,-24,-31,-34,-36,-35,]),'CASE':([3,4,5,6,7,8,9,10,11,12,15,60,63,76,77,79,83,96,97,104,105,106,107,108,110,111,112,115,116,117,121,122,],[-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,-3,-20,-27,-28,-30,-13,-26,-29,-14,-22,-23,-25,113,113,-32,-33,-24,-31,-34,-36,-35,]),'DEFAULT':([3,4,5,6,7,8,9,10,11,12,15,60,63,76,77,79,83,96,97,104,105,106,107,108,110,111,112,115,116,117,121,122,],[-2,-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,-3,-20,-27,-28,-30,-13,-26,-29,-14,-22,-23,-25,114,114,-32,-33,-24,-31,-34,-36,-35,]),'ELSE':([4,5,6,7,8,9,10,11,12,15,63,76,77,79,83,96,97,104,105,106,107,111,115,116,],[-4,-5,-6,-7,-8,-9,-10,-11,-12,-21,-20,-27,-28,-30,-13,-26,-29,-14,-22,109,-25,-32,-24,-31,]),'ASSIGN_OP':([14,61,],[62,84,]),'MULT_OP':([14,16,27,30,31,32,33,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,71,72,75,81,82,85,86,87,88,89,90,91,92,93,94,95,98,99,118,],[-51,66,-73,-37,-38,-39,-40,-50,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-74,-75,-76,66,-73,66,66,66,66,66,66,-44,-45,66,66,66,-52,66,66,66,66,66,]),'DIV_OP':([14,16,27,30,31,32,33,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,71,72,75,81,82,85,86,87,88,89,90,91,92,93,94,95,98,99,118,],[-51,67,-73,-37,-38,-39,-40,-50,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-74,-75,-76,67,-73,67,67,67,67,67,67,-44,-45,67,67,67,-52,67,67,67,67,67,]),'EQ_OP':([14,16,27,30,31,32,33,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,71,72,75,81,82,85,86,87,88,89,90,91,92,93,94,95,98,99,118,],[-51,68,-73,-37,-38,-39,-40,-50,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-74,-75,-76,68,-73,68,-48,-49,68,-42,-43,-44,-45,-46,-47,68,-52,68,68,68,68,68,]),'NE_OP':([14,16,27,30,31,32,33,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,71,72,75,81,82,85,86,87,88,89,90,91,92,93,94,95,98,99,118,],[-51,69,-73,-37,-38,-39,-40,-50,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-74,-75,-76,69,-73,69,-48,-49,69,-42,-43,-44,-45,-46,-47,69,-52,69,69,69,69,69,]),'RPAREN_SPEC':([14,30,31,32,33,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,71,72,81,82,85,86,87,88,89,90,91,92,93,94,95,98,],[-51,-37,-38,-39,-40,-50,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-74,-75,-76,93,-73,-48,-49,-41,-42,-43,-44,-45,-46,-47,100,-52,101,102,103,]),'COLON':([14,30,31,32,33,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,72,81,82,85,86,87,88,89,90,91,93,114,118,],[-51,-37,-38,-39,-40,-50,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-74,-75,-76,-73,-48,-49,-41,-42,-43,-44,-45,-46,-47,-52,119,120,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,23,119,120,],[2,78,121,122,]),'statement':([0,2,23,78,101,102,109,119,120,121,122,],[3,60,3,60,106,107,115,3,3,60,60,]),'declaration_statement':([0,2,23,78,101,102,109,119,120,121,122,],[4,4,4,4,4,4,4,4,4,4,4,]),'expression_statement':([0,2,23,78,101,102,109,119,120,121,122,],[5,5,5,5,5,5,5,5,5,5,5,]),'print_statement':([0,2,23,78,101,102,109,119,120,121,122,],[6,6,6,6,6,6,6,6,6,6,6,]),'if_statement':([0,2,23,78,101,102,109,119,120,121,122,],[7,7,7,7,7,7,7,7,7,7,7,]),'while_statement':([0,2,23,78,101,102,109,119,120,121,122,],[8,8,8,8,8,8,8,8,8,8,8,]),'return_statement':([0,2,23,78,101,102,109,119,120,121,122,],[9,9,9,9,9,9,9,9,9,9,9,]),'break_statement':([0,2,23,78,101,102,109,119,120,121,122,],[10,10,10,10,10,10,10,10,10,10,10,]),'block_statement':([0,2,23,78,101,102,109,119,120,121,122,],[11,11,11,11,11,11,11,11,11,11,11,]),'switch_statement':([0,2,23,78,101,102,109,119,120,121,122,],[12,12,12,12,12,12,12,12,12,12,12,]),'type':([0,2,23,78,101,102,109,119,120,121,122,],[13,13,13,13,13,13,13,13,13,13,13,]),'expression':([0,2,18,21,23,34,35,62,64,65,66,67,68,69,70,73,74,78,80,84,101,102,109,113,119,120,121,122,],[16,16,71,75,16,81,82,85,86,87,88,89,90,91,92,94,95,16,98,99,16,16,16,118,16,16,16,16,]),'assignment_expression':([0,2,18,21,23,34,35,62,64,65,66,67,68,69,70,73,74,78,80,84,101,102,109,113,119,120,121,122,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'binary_expression':([0,2,18,21,23,34,35,62,64,65,66,67,68,69,70,73,74,78,80,84,101,102,109,113,119,120,121,122,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'unary_expression':([0,2,18,21,23,34,35,62,64,65,66,67,68,69,70,73,74,78,80,84,101,102,109,113,119,120,121,122,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'primary_expression':([0,2,18,21,23,34,35,62,64,65,66,67,68,69,70,73,74,78,80,84,101,102,109,113,119,120,121,122,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'literal':([0,2,18,21,23,34,35,62,64,65,66,67,68,69,70,73,74,78,80,84,101,102,109,113,119,120,121,122,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'numeric_literal':([0,2,18,21,23,34,35,62,64,65,66,67,68,69,70,73,74,78,80,84,101,102,109,113,119,120,121,122,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'string_literal':([0,2,18,21,23,34,35,62,64,65,66,67,68,69,70,73,74,78,80,84,101,102,109,113,119,120,121,122,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'boolean_literal':([0,2,18,21,23,34,35,62,64,65,66,67,68,69,70,73,74,78,80,84,101,102,109,113,119,120,121,122,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'null_literal':([0,2,18,21,23,34,35,62,64,65,66,67,68,69,70,73,74,78,80,84,101,102,109,113,119,120,121,122,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'case_list':([108,],[110,]),'case':([108,110,],[112,117,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','lexer.py',416),
  ('statement_list -> statement','statement_list',1,'p_statement_list','lexer.py',420),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','lexer.py',421),
  ('statement -> declaration_statement','statement',1,'p_statement','lexer.py',428),
  ('statement -> expression_statement','statement',1,'p_statement','lexer.py',429),
  ('statement -> print_statement','statement',1,'p_statement','lexer.py',430),
  ('statement -> if_statement','statement',1,'p_statement','lexer.py',431),
  ('statement -> while_statement','statement',1,'p_statement','lexer.py',432),
  ('statement -> return_statement','statement',1,'p_statement','lexer.py',433),
  ('statement -> break_statement','statement',1,'p_statement','lexer.py',434),
  ('statement -> block_statement','statement',1,'p_statement','lexer.py',435),
  ('statement -> switch_statement','statement',1,'p_statement','lexer.py',436),
  ('declaration_statement -> type IDENTIFIER SEMICOLON_SPEC','declaration_statement',3,'p_declaration_statement','lexer.py',440),
  ('declaration_statement -> type IDENTIFIER ASSIGN_OP expression SEMICOLON_SPEC','declaration_statement',5,'p_declaration_statement','lexer.py',441),
  ('type -> ENTERO','type',1,'p_type','lexer.py',448),
  ('type -> FLOTANTE','type',1,'p_type','lexer.py',449),
  ('type -> STRING','type',1,'p_type','lexer.py',450),
  ('type -> CHAR','type',1,'p_type','lexer.py',451),
  ('type -> ARRAY','type',1,'p_type','lexer.py',452),
  ('expression_statement -> expression SEMICOLON_SPEC','expression_statement',2,'p_expression_statement','lexer.py',456),
  ('expression_statement -> SEMICOLON_SPEC','expression_statement',1,'p_expression_statement','lexer.py',457),
  ('print_statement -> PRINT LPAREN_SPEC expression RPAREN_SPEC SEMICOLON_SPEC','print_statement',5,'p_print_statement','lexer.py',464),
  ('if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement','if_statement',5,'p_if_statement','lexer.py',468),
  ('if_statement -> IF LPAREN_SPEC expression RPAREN_SPEC statement ELSE statement','if_statement',7,'p_if_statement','lexer.py',469),
  ('while_statement -> WHILE LPAREN_SPEC expression RPAREN_SPEC statement','while_statement',5,'p_while_statement','lexer.py',476),
  ('return_statement -> RETURN expression SEMICOLON_SPEC','return_statement',3,'p_return_statement','lexer.py',480),
  ('return_statement -> RETURN SEMICOLON_SPEC','return_statement',2,'p_return_statement','lexer.py',481),
  ('break_statement -> BREAK SEMICOLON_SPEC','break_statement',2,'p_break_statement','lexer.py',488),
  ('block_statement -> LBRACE_SPEC statement_list RBRACE_SPEC','block_statement',3,'p_block_statement','lexer.py',492),
  ('block_statement -> LBRACE_SPEC RBRACE_SPEC','block_statement',2,'p_block_statement','lexer.py',493),
  ('switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC case_list RBRACE_SPEC','switch_statement',7,'p_switch_statement','lexer.py',500),
  ('switch_statement -> SWITCH LPAREN_SPEC expression RPAREN_SPEC LBRACE_SPEC RBRACE_SPEC','switch_statement',6,'p_switch_statement','lexer.py',501),
  ('case_list -> case','case_list',1,'p_case_list','lexer.py',508),
  ('case_list -> case_list case','case_list',2,'p_case_list','lexer.py',509),
  ('case -> CASE expression COLON statement_list','case',4,'p_case','lexer.py',516),
  ('case -> DEFAULT COLON statement_list','case',3,'p_case','lexer.py',517),
  ('expression -> assignment_expression','expression',1,'p_expression','lexer.py',524),
  ('expression -> binary_expression','expression',1,'p_expression','lexer.py',525),
  ('expression -> unary_expression','expression',1,'p_expression','lexer.py',526),
  ('expression -> primary_expression','expression',1,'p_expression','lexer.py',527),
  ('assignment_expression -> IDENTIFIER ASSIGN_OP expression','assignment_expression',3,'p_assignment_expression','lexer.py',531),
  ('binary_expression -> expression PLUS_OP expression','binary_expression',3,'p_binary_expression','lexer.py',535),
  ('binary_expression -> expression MINUS_OP expression','binary_expression',3,'p_binary_expression','lexer.py',536),
  ('binary_expression -> expression MULT_OP expression','binary_expression',3,'p_binary_expression','lexer.py',537),
  ('binary_expression -> expression DIV_OP expression','binary_expression',3,'p_binary_expression','lexer.py',538),
  ('binary_expression -> expression EQ_OP expression','binary_expression',3,'p_binary_expression','lexer.py',539),
  ('binary_expression -> expression NE_OP expression','binary_expression',3,'p_binary_expression','lexer.py',540),
  ('unary_expression -> PLUS_OP expression','unary_expression',2,'p_unary_expression','lexer.py',544),
  ('unary_expression -> MINUS_OP expression','unary_expression',2,'p_unary_expression','lexer.py',545),
  ('primary_expression -> literal','primary_expression',1,'p_primary_expression','lexer.py',549),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','lexer.py',550),
  ('primary_expression -> LPAREN_SPEC expression RPAREN_SPEC','primary_expression',3,'p_primary_expression','lexer.py',551),
  ('literal -> numeric_literal','literal',1,'p_literal','lexer.py',558),
  ('literal -> string_literal','literal',1,'p_literal','lexer.py',559),
  ('literal -> boolean_literal','literal',1,'p_literal','lexer.py',560),
  ('literal -> null_literal','literal',1,'p_literal','lexer.py',561),
  ('numeric_literal -> HEX_0','numeric_literal',1,'p_numeric_literal','lexer.py',565),
  ('numeric_literal -> HEX_1','numeric_literal',1,'p_numeric_literal','lexer.py',566),
  ('numeric_literal -> HEX_2','numeric_literal',1,'p_numeric_literal','lexer.py',567),
  ('numeric_literal -> HEX_3','numeric_literal',1,'p_numeric_literal','lexer.py',568),
  ('numeric_literal -> HEX_4','numeric_literal',1,'p_numeric_literal','lexer.py',569),
  ('numeric_literal -> HEX_5','numeric_literal',1,'p_numeric_literal','lexer.py',570),
  ('numeric_literal -> HEX_6','numeric_literal',1,'p_numeric_literal','lexer.py',571),
  ('numeric_literal -> HEX_7','numeric_literal',1,'p_numeric_literal','lexer.py',572),
  ('numeric_literal -> HEX_8','numeric_literal',1,'p_numeric_literal','lexer.py',573),
  ('numeric_literal -> HEX_9','numeric_literal',1,'p_numeric_literal','lexer.py',574),
  ('numeric_literal -> HEX_A','numeric_literal',1,'p_numeric_literal','lexer.py',575),
  ('numeric_literal -> HEX_B','numeric_literal',1,'p_numeric_literal','lexer.py',576),
  ('numeric_literal -> HEX_C','numeric_literal',1,'p_numeric_literal','lexer.py',577),
  ('numeric_literal -> HEX_D','numeric_literal',1,'p_numeric_literal','lexer.py',578),
  ('numeric_literal -> HEX_E','numeric_literal',1,'p_numeric_literal','lexer.py',579),
  ('numeric_literal -> HEX_F','numeric_literal',1,'p_numeric_literal','lexer.py',580),
  ('string_literal -> STRING','string_literal',1,'p_string_literal','lexer.py',584),
  ('boolean_literal -> TRUE','boolean_literal',1,'p_boolean_literal','lexer.py',588),
  ('boolean_literal -> FALSE','boolean_literal',1,'p_boolean_literal','lexer.py',589),
  ('null_literal -> NULL','null_literal',1,'p_null_literal','lexer.py',593),
]
